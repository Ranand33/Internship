Set theory
Compare different types of empty sets (is a subset, member)
find the power set, and its relation to its original set
compute the rank of an empty set

find the disjunction of sets
Arbitrary union and its relation to its original set
Arbitrary union of a power set and its relation to its original set

Complement of set
Algebra of sets
Demorgan's law

Determine whether 2 sets are equal

Kuratowski definition of ordered pairs and its impossibility for ordered triples
find the cross product of sets, and its algebra

Find the domain, range, field of a relation
Show that a set is a relation

N ary relation and ordered m tuples

Determine whether relation is a function
Determine whether 2 functions are equal, subsets
Find the inverse, composite, restriction, image, identity of a function
Determine whether function is monotone, one to one

Infinite cartesian products

Determine whether a relation is symmetric, reflexive, or transitive, and its relation with its inverse or composite

Determine whether a set is a linear ordering

Find the functions from a set into or onto a set

Find all the equivalence relations of a set

Representation of natural numbers (Zernelo, or Von Neumann)
Determine whether a set is equal to its successor set
Construct the closure C of set A under function F

Find the arbitrary union, disjunction of a number

determine whether arbitrary union of a set is closed downward and has no largest element

Find a one-to-one correspondence between the open unit interval (0, 1) and R that takes rationals to rationals and irrationals to irrationals

Find the cardinality of a set
Determine whether a set is countable
Determine whether there's partial ordering on a Set
Show that R is a well ordering on a set P

Find the epsilon image

Show that F is an isomorphism

Relationship between ordinal and cardinal numbers

Show that every ordinal number a is grounded
Determine the rank of a set and its transitive closure
Determine the limit ordinal

Find a new concept
Compare and aassociate 2 objects
Determine whether an object is something
Show that a proposition is true


















Classical mechanics

Find the velocity and acceleration
How many forces act on an object?
How much force is needed to move something?
Find the momentum, impulse
Find the trajectory of a projectile
Find the amount of work done
Find the potential and kinetic energy 
Find the force between 2 objects, every objects
Find the mass
Find the center of mass, gravity
Find the stress, strain
Find the density, pressure

Calculate vector algebra
Find the length of a 3D vector
Find the angle between 2 vectors
find the values of the scalar s for which the two vectors are orthogonal
The position of a moving particle is given as a function of time t, describe the particles orbit
Find the area of a triangle given vectors
Find the general solution of the firstorder equation df/dt = f for an unknown function f(t)
* Prove that in the absence of external forces, the total angular momentum of an N-particle system is conserved
prove that the magnetic forces, F12 and F21, between two steady current loops obey Newton's third law.
Prove the converse, that if the law of conservation of momentum applies to every possible group of particles, then the interparticle forces must obey the third law
Write down Newton's second law for the bundle as it falls from the plane, assuming you can neglect air resistance

find the approximate speed v at which the two drag forces are equally important.  For what approximate range of speeds is it safe to treat the drag force as purely quadratic? Under normal conditions is it a good approximation to ignore the linear term?
Find the viscous drag on a sphere
Find the Reynolds number

Describe and explain how the velocity varies with time given a linear resistive force
Use the separation of variables method
Find the characteristic time t and the terminal speed v
Find the linear resistive force
find how long the projectile is in the air and show that the distance it travels before landing 
what is the minimum speed for which the ball will clear a wall of height h, a distance d away?
What's the surface a bullet can hit?

Find the quadratic air resistance
Hyporbolic functions
Write down the equation of motion
find the real and imaginary parts, the modulus and phase, and the complex conjugate of a complex number
Find the transverse velocity and the time dependence of the transverse velocity

use conservation of momentum to find the shell's speed relative to the ground.
Use conservation of momentum to find the speed of the recoiling car if the two men run and jump simultaneously
What was the thrust on the rocket if a mass was ejected with speed v?
Find the distances from the CM to m 1and m2
If a an object exploded into 2 pieces midair and one piece lands, where does the other piece land?

Find the work done by gravity and gravitational potential energy

Find the partial derivative, gradient, curl
Determine whether a force is conservative
Find the path independence of the work done by force
Write down the equation for conservation of energy, total energy

Write down the force F(r) exerted by the spring in terms of its length r and its equilibrium length ro
If the collision is perfectly inelastic (the two particles lock together and move off as one) what fraction of the kinetic energy is lost in the collision?
Write down the work—KE theorem for each of the four particles separately and, by adding these four equations, find the change in the total KE

Find the equilibrium length
Find the angular frequency, frequency, oscillation period, amplitude of a simple harmonic motion
Find the equilibrium position
Find the general solution for a two-dimensional isotropic oscillator
Find the restoring force
Find the damping factor

what is the natural frequency of the assembly oscillating on its two springs?
at about what speed would these oscillations go into resonance?
Find the Fourier coefficients an and bn
Find the Fourier series solution for a periodically driven oscillator a

Write down the Lagrangian for a projectile (subject to no air resistance) in terms of its Cartesian coordinates (x, y, z),
Find the 6 Lagrange equations of motion
Write down the equations that give the three Cartesian coordinates of the particle in terms of the generalized coordinates (p, 0)
Solve Lagrange equations for Lagrange multiplier
Write down the constraint equations for Lagrange

Write the positions of two particles in terms of the CM and relative positions 
Find the centrifugal potential energy , and the effective potential energy
Find the radius at which the particle (with given angular momentum) can orbit at a fixed radius
Find the eccentricity of satellite's orbit and its height above the earth at apogee. 

Find the Coriolis force
Find g(o), the freefall acceleration at colatitude o as a function of o

Find the moment of inertia a uniform circular cylinder of radius R and mass M for rotation about its axis
Find the products of inertia
Find the inertia tensor, moment of inertia tensor
Find the principal moments and principal axis
find the Euler angles

Find the normal frequencies for the system of two carts and three springs s
Find and describe the normal modes and normal frequency

estimate the Liapunov exponent X 
Solve for the first seven drive cycles

Find the Lagrangian, the generalized momentum, and the Hamiltonian for a free particle (
Find and solve Hamilton's equations
describe the phase-space orbits.
Evaluate the three-dimensional divergence V • v for each of the following vectors

Find the cross section a of a blueberry and the "target" density n
Find the number of scattered particles
Calculate the solid angles subtended by the moon and by the sun, both as seen from the earth. 
Write down the lab cross section for the scattering of two equal-mass hard spheres

Calculate the Galilean transformation
Find the factor y for this speed?
Solve the Lorentz transformation equations 











Abstract algebra

Determine whether a rule is an operation on a set
Indicate whether an operation is commutative, associative, has an identity or inverse element
Write the tables of all 16 operations on a 2 element set

Prove that each of the following sets, with the indicated operation, is an abelian group
Which of the following subsets of IR x IR, with the indicated operation, is a group?
Algebra and arithmetic on groups
determine whether or not His a subgroup of G. (Assume that the operation of H is the same as that of G.) 
Subgroups of Functions 
List all the cyclic subgroups of ( Z10 , +).
Find the generators of groups
Write the table of the groups having the following Cayley diagrams
Find the generator matrix G2 and the parity-check matrix H2 of the code C

Each of the following is a function f : R to R. Determine (a) whether or not f is injective, and (b) whether or not f is surjective
Functions. on Arbitrary Sets and Groups
find the composite function
Find Inverses of Functions
If A has n elements, how many functions are there from A to A
Describe the transition function Tx for the machine M1 and the following sequence
give the table of its next-state function, as well as its state diagram

Compute the permutations
Show that a subgroup of a permutation is a group of permutations
List the elements of the cyclic subgroup of S6 generated by f
Find a four-element abelian subgroup of S5 • Write its table.
Let G be the group of .symmetries of the rectangle. List the elements of G (there are four of them), and write the table of G
List the symmetries of each of the following polyndmials, and write their group table
Prove that G is a subgroup of SA
Multiplying and Factoring Permutations 
Write each of the following permutations in S9 as a product of disjoint cycles
Express each of the following as a product of transpositions in S8
express each of the following as the square of a cycle
Describe all the distinct powers of permutations
Determine which of the following permutations is even, and which is odd
Conjugate Cycles
Find the order of each of the following permutations
What is the order of ab, if a and b are disjoint cycles of lengths 4 apd 6, respectively?

show that a function is an isomorphism
In each of the following, G and Hare finite groups. Determine whether or not G ~ H
determine which groups are isomorphic to which others
Determine Isomorphism of Groups Given by Generators and Defining Equations 
Find an . isomorphism f : R to G and show that it is an isomorphism. 
Find the right and left regular representation of each of the following groups

What is the order of 10 in Z 25
Show that The order of a^-1 is the same as the order of a
 Relationship betweeri ord(ab ), ord(a), and ord(b)
What is the order of a^8
Relationship between ord(a) and ord(a^k)
Relationship between the Order of a and the Order of any kth Root of a

3Describe. the cyclic subgroup (½) in R*. Describe the cyclic group (½) in R
Direct Products of Cyclic Groups
which elements in <a> have a kth root

Prove that eacµ of the following is a partition of the indicated set. Then describe the equivalence relation associated with that partition
Prove that each of the following is an equivalence relation on the indicated set. Then describe the partition associated with that equivalence relation

list the cosets of subgroups. For each coset, list the elements of the cose
Find a coset leader in each coset
use coset decoding to decode the following words

Verify that f is a homomorphism, find its kernel K, and list the cosets of K
Find all the normal subgroups

G is a group and H is a normal subgroup of G. List the elements of G/H and then write the table of G/H

use the fundamental homomorphism theorem to prove that the two given groups are isomorphic

a set A with operations of addition and multiplication is given. Prove that A satisfies all the axioms to be a commutative ring with unity.Indicate the zero element, the unity, and the negative of an arbitrary a
Prove that each of the following is a subring of the indicated ring
Identify which of the following are ideals of Z x Z

In each of the following, A is cl ring and J is an ideal of A. List the elements of All, and then write the addition and multiplication tables of A/J

Characteristic of an Integral Domain

Prove using the principle of mathematical induction

Prove that each of the following numbers is algebraic over Q
Find the minimum polynomial of each of the following numbers over Q
Find a monic irreducible polynomial

prove R is a vector space, subspace, basis

Find a basis for Q(i*2^1/2) over Q
find an uncomplicated basis
Construct a field of four elements

Find the root field of a over Q, Z
Find the degree 
List the elements of Galois group
find the fixfield of a subgroup
Indicate the Galois correspondence by means of a diagram

Find radical extensions of Q containing the following complex number
Explain why every abelian group is, trivially, a solvable group












Electromagnetism
how can a particle at rest move another particle from here to there?
How can a moving particle move another particle from here  to there?
How much force does 2 charged particles generate?  
Find the charge, field, current, resistence

show that the dot product and cross product are distributive or associative
Find the angle between the body diagonals of a cube
4 Use the cross product to find the components of the unit vector nˆ perpendicular to the shaded plane
Find the separation vector r from the source point (2,8,7) to the field point (4,6,8). Determine its magnitude (r), and construct the unit vector
Find the transformation matrix R that describes a rotation by 120 degrees about an axis from the origin through the point (1, 1, 1).
How do the components of a vector5 transform under a translation of coordinates
How do the components of a vector transform under an inversion of coordinates

Find the gradients of the following functions
Calculate the divergence of the following vector function
show that the divergence transforms as a scalar under rotations
Calculate the curls of the vector functions 
Construct a vector function that has zero divergence and zero curl everywhere
Calculate the Laplacian of the following functions
Prove that the divergence of a curl is always zero
Calculate the line integral of the function
Calculate the surface integral of the function
Calculate the volume integral of the function
Check the fundamental theorem for gradients
Test the divergence theorem for the function
Test Stokes’ theorem for the function
What is the volume charge density of an electric dipole, consisting of a point charge −q at the origin and a point charge +q at a?
Find the vector area of a hemispherical bowl of radius R

What is the net force on a test charge Q at the center?
Find the electric field (magnitude and direction)
Find the electric field a distance z above one end of a straight line segment of length L that carries a uniform line charge λ
Find the electric field a distance z above the center of a square loop (side a) carrying uniform line charge λ
Find the electric field a distance z from the center of a spherical surface of radius R (Fig. 2.11) that carries a uniform charge density σ
find the field inside and outside a solid sphere of radius R that carries a uniform volume charge density ρ.
Find the charge density p
Find the total charge contained in a sphere of radius R, centered at the origin
Use Gauss’s law to find the electric field inside and outside a spherical shell of radius R that carries a uniform surface charge density σ
Calculate ∇ × E
One of these is an impossible electrostatic field. Which one?
Find the potential inside and outside a uniformly charged solid sphere whose radius is R and whose total charge is q. Use infinity as your reference point.
A conical surface (an empty ice-cream cone) carries a uniform surface charge σ.  Find the potential difference between points a (the vertex) and b (the center of the top).
Find the potential on the axis of a uniformly charged solid cylinder, a distance z from the center
Use Gauss’s law to find the field inside and outside a long hollow cylindrical tube, which carries a uniform surface charge σ
How much work does it take to bring in another charge, +q, from far away and place it in the fourth corner? 
Find the energy stored in a uniformly charged solid sphere of radius R and charge q.
How much work dW does it take to build up the radius by an amount dr?
Calculate the energy
Find the interaction energy for two point charges, q1 and q2, a distance a apart
Find the surface charge density σ
What is the field outside the conductor?
what is the electrostatic pressure on the plates?
What is the force of repulsion between the “northern” hemisphere and the “southern” hemisphere?
Find the capacitance of a parallel-plate capacitor consisting of two metal surfaces of area A held a distance d apart
express the work done by electrostatic forces, in terms of the field E, and the area of the plates, A.
express the energy lost by the field in this process
What is the minimum-energy configuration for a system of N equal point charges placed on or inside a circle of radius R
How much work would it take to move the charge out to infinity (through a tiny hole drilled in the shell)?

Find the average potential over a spherical surface of radius R due to a point charge q located insid
Find the general solution to Laplace’s equation in spherical coordinates, for the case where V depends only on r
Show that the average electric field over a spherical surface, due to charges outside the sphere, is the same as the field at the center
Find the force on the charge
Find the induced surface charge on the sphere, as a function of θ. Integrate this to get the total induced charge.
Find the first three terms (n = 0, 1, 2) in the multipole expansion for V(r,θ).
Find the approximate potential for points on the z axis, far from the sphere
Calculate the dipole moment of this charge distribution.
Find the approximate potential, at points far from the sphere
find (i) the monopole moment, (ii) the dipole moment, and (iii) the approximate potential (in spherical coordinates) at large r (include both the monopole and dipole contributions).
Find the approximate electric field at points far from the origin

What fraction of the atomic radius does the separation distance d amount to, roughly? Estimate the voltage you would need with this apparatus to ionize the atom
Find the atomic polarizability of such an atom
What is the torque on p1 due to p2?
Find the energy of an ideal dipole p in an electric field E
Find the interaction energy of two dipoles separated by a displacement r
Calculate the bound charges
Calculate the potential of a uniformly polarized sphere
Find the electric field inside, outside the cylinder
Find the electric displacement D in each slab
Find the polarization P in each slab
Find the location and amount of all bound charge.
Find the capacitance per unit length of this cable
Find the electric field in the insulator.

find the momentum of the particle
Find and sketch the trajectory of the particle in a magnetic field
Find the force on a square loop (side a), lying in the yz plane and centered at the origin
Find the current density J at any point (r, θ, φ) within the sphere
Find the magnetic field at the center of a square loop, which carries a steady current I
Find the field at the center of a regular n-sided polygon, carrying a steady current I
Find the force on a square loop 
Find the magnetic field, both inside and outside the wire, if
(a) The current is uniformly distributed over the outside surface of the wire.
(b) The current is distributed in such a way that J is proportional to s, the distance from the axis.
Find the magnetic force per unit area on the upper plate, including its direction.
At what speed v would the magnetic force balance the electrical force?
Find the density ρ of mobile charges in a piece of copper
Calculate the average electron velocity in a copper wire 1 mm in diameter, carrying a current of 1 A
Find the magnetic vector potential of a finite segment of straight wire carrying a current I
What current density would produce the vector potential
find the vector potential a distance s from an infinite straight wire carrying a current I
Find the magnetic potential inside the wire, if it has radius R and the current is uniformly distributed.
Show that the magnetic field of a dipole can be written in coordinatefree form
What is its magnetic dipole moment?
What is the (approximate) magnetic field at points far from the origin?
Find the magnetic dipole moment of the spinning spherical shell
Write down the multipole expansion
Write down the monopole potential

Calculate the torque exerted on the square loop 
If the square loop is free to rotate, what will its equilibrium orientation be?
Find the force of attraction between two magnetic dipole
Find all the bound currents. What is the net bound current flowing down the wire?
Find the energy of a magnetic dipole in a magnetic field B
If they are maintained at a potential difference V, what current flows from one to the other?
Determine the charge on the capacitor as a function of time, Q(t). What is the current through the resistor, I(t)?
Find the total energy output of the battery ( V0 I dt). Determine the heat delivered to the resistor. What is the final energy stored in the capacitor? What fraction of the work done by the battery shows up as energy in the capacitor?
What is the emf in this loop?
what is the current in the resistor? In what direction does it flow?
Find the flux of B through the loop
Find the current induced in the loop, as a function of time.
Find the electric field (magnitude and direction) at a distance s from the axis (both inside and outside the solenoid), in the quasistatic approximation.
Find the mutual inductance
Find the self-inductance per unit length of a long solenoid, of radius R, carrying n turns per unit length.
what emf is induced in the toroid?
Find the energy stored in a section of length l of a long solenoid
What is the total energy delivered to the resistor?
Find the magnetic field and the induced electric field
Find the displacement current density Jd .
What current is induced in the loop?
What is the ratio of conduction current to displacement current

Calculate the power (energy per unit time) transported down the cables
Find the energy density uem and the Poynting vector S in the gap
Determine the total energy in the gap, as a function of time. Calculate the total power flowing into the gap, by integrating the Poynting vector over the appropriate surface
What is the electromagnetic momentum in a region of area A?
Determine all nine elements of the stress tensor, in the region between the plates
determine the electromagnetic force per unit area on the top plate
Find the angular momentum of the fields
Find the torque on each sphere, and the resulting angular momentum of the system.
Use Faraday’s law to determine the induced electric field, find the torque this field exerts on the sphere, and calculate the total angular momentum imparted to the sphere in the course of the demagnetization.

Show that the standing wave satisfies the wave equation
Find the amplitude and phase of the reflected and transmitted waves for the case where the knot has a mass m and the second string is massless
Derive the modified wave equation describing the motion of the string
Solve this equation, assuming the string vibrates at the incident frequency ω.
Find the characteristic penetration distance, at which the amplitude is 1/e of its original value
find the reflected wave’s amplitude and phase.
Write down the (real) electric and magnetic fields for a monochromatic plane wave of amplitude E0, frequency ω, and phase angle zero that is (a) traveling in the negative x direction and polarized in the z direction
Ignoring the magnetic force, find the velocity of the particle, as a function of time. (Assume the average velocity is zero.)
Find all elements of the Maxwell stress tensor for a monochromatic plane wave traveling in the z direction and linearly polarized in the x direction
Calculate the exact reflection and transmission coefficients
calculate (a) the amplitudes at normal incidence, (b) Brewster’s angle, and (c) the “crossover” angle, at which the reflected and transmitted amplitudes are equal.
Find the wavelength and propagation speed in copper for radio waves at 1 MHz. Compare the corresponding values in air (or vacuum).
Find the skin depth (in meters) for (pure) water
Calculate the (time-averaged) energy density of an electromagnetic plane wave in a conducting medium
Find the intensity
Calculate the reflection coefficient for light at an air-to-silver interface, at optical frequencies.
Show that the wave velocity of deep water waves is twice the group velocity.
Calculate the group velocity and the wave velocity. Which one corresponds to the classical speed of the particle?
Find the coefficients of refraction and dispersion
Find the width of the anomalous dispersion region for the case of a single resonance at frequency ω0
Show that the mode TE00 cannot occur in a rectangular wave guide
What TE modes will propagate in this wave guide, if the driving frequency is 1.70 × 1010 Hz? 
Suppose you wanted to excite only one TE mode; what range of frequencies could you use? What are the corresponding wavelengths (in open space)?
Find the ratio of the lowest TM cutoff frequency to the lowest TE cutoff frequency, for a given wave guide
Find the charge density, λ(z, t), and the current, I(z, t), on the inner conductor.

Find the Poynting vector, and determine the energy per unit time flowing into the box during the interval t1 < t < t2.
confirm that the increase in energy (part (a)) equals the net influx.
Find the fields, and the charge and current distributions, corresponding to V(r), A(r)
Use the gauge function λ = −(1/4π0)(qt/r) to transform the potentials
Which of the potentials in Ex. 10.1, Prob. 10.3, and Prob. 10.4 are in the Coulomb gauge? Which are in the Lorenz gauge?
Find the scalar and vector potentials in the Coulomb gauge
Confirm that the retarded potentials satisfy the Lorenz gauge condition.
Calculate the retarded vector potential A at the center. Find the electric field at the center. Why does this (neutral) wire produce an electric field?
Find the Liénard-Wiechert potentials for points on the z axis.
Determine the Liénard-Wiechert potentials for a charge in hyperbolic motion
What are the fields on the axis to the left of the charge?
For a point charge moving at constant velocity, calculate the flux integral over the surface of a sphere centered at the present location of the charge.

Find the radiation resistance of the wire joining the two ends of the dipole
Check that the retarded potentials of an oscillating dipole satisfy the Lorenz gauge condition
find the fields of a rotating dipole. Also find the Poynting vector and the intensity of the radiation. 
Sketch the intensity profile as a function of the polar angle θ, and calculate the total power radiated.
Calculate the electric and magnetic fields of an oscillating magnetic dipole
Find the radiation resistance (Prob. 11.3) for the oscillating magnetic dipole
Derive the general formula for the power radiated
what fraction of the potential energy lost is radiated away?
calculate the lifespan of Bohr’s atom
Find the angle θmax at which the maximum radiation is emitted
What is the radiation reaction force? What is the power radiated?
Use the Abraham-Lorentz formula to determine the radiation reaction on each end of the dumbbell
Find the interaction term in the self-torque
Find the total radiation reaction torque

What’s the percent error introduced when you use Galileo’s rule, instead of Einstein’s
Write out the matrix that describes a Galilean transformation
Find the matrix describing a Lorentz transformation with velocity v along the x axis followed by a Lorentz transformation with velocity v¯ along the y axis.
Express the Einstein velocity addition law in terms of rapidity
What is the invariant interval between A and B?
What is the relation between proper velocity and rapidity
Find the components ηx and ηy of the proper velocity
Find the invariant product of the 4-velocity with itself
Find the proper time τ as a function of t,
Find the velocity of the center of momentum frame, in which the total momentum is zero
2 Find the velocity of the muon
Find the (relativistic) energy of each photon
Write the Minkowski version of Newton’s second law





Probability
How much probability does an event have?
Find the median, quartile, percentile
Find the expectation, variance, standard deviation
Find the distributions

Quantum mechanics


Thermodynamics
Find the temperature

Logic
Determine whether logically equivalent

Waves

Introduction to Geometry

Optics

Statistics

Topology

General relativity

Elementary particles

Number theory

Cosmology

Functional analysis

Astrophysics

Linear algebra

Computational physics

Complex analysis











Algorithms

Find the time complexity of an algorithm
Randomize the algorithm inputs
Make data into heaps

How are the shortest-path and traveling-salesman problems given above similar?
For which values of n does insertion sort beat merge sort?
For each function f .n/ and time t in the following table, determine the largest size n of a problem that can be solved in time t, assuming that the algorithm to solve the problem takes f(n) microseconds.

Rewrite the INSERTION-SORT procedure to sort into nonincreasing instead of nondecreasing order.
Express the function in terms of 0-notation
How can we modify almost any algorithm to have a good best-case running time?
Rewrite the MERGE procedure so that it does not use sentinels, instead stopping once either array L or R has had all its elements copied back to A and then copying the remainder of the other array back into A.
express insertion sort as a recursive procedure
Show that insertion sort can sort the n=k sublists, each of length k, in ‚.nk/ worst-case time
In terms of 0-notation, what is the running time of this code fragment for Horner’s rule?
List the five inversions of the array
What is the relationship between the running time of insertion sort and the number of inversions in the input array?
Give an algorithm that determines the number of inversions in any permutation on n elements in 0(nlgn) worst-case time

Is the function [lgn]! polynomially bounded?
Which is asymptotically larger
Rank the following functions by order of growth

Write pseudocode for the brute-force method of solving the maximum-subarray problem.
Use Strassen’s algorithm to compute the matrix product
How quickly can you multiply a kn	n matrix by an n	kn matrix, using Strassen’s algorithm as a subroutine?
Show how to multiply the complex numbers a C bi and c C d i using only three multiplications of real numbers
Show that the solution of a recurrence is O(log n)
Use a recursion tree to determine a good asymptotic upper bound on the recurrence
Use the master method to give tight asymptotic bounds for the following recurrences
Use the master method to show that the solution to the binary-search recurrence
Give asymptotic upper and lower bounds for T(n) in each of the following recurrences
Give recurrences for the worst-case running times of binary search when arrays are passed using each of the three methods above
Prove that an array is Monge 
Write the recurrence describing the running time of the algorithm

Use indicator random variables to compute the expected value of the sum of n dice
What is the probability that a k-string over a set of size n forms a k-permutation?

What are the minimum and maximum numbers of elements in a heap of height h?
Show that an n-element heap has height [lgn]
Show that in any subtree of a max-heap, the root of the subtree contains the largest value occurring anywhere in that subtree
Where in a max-heap might the smallest element reside, assuming that all elements are distinct?
Is an array that is in sorted order a min-heap?

illustrate the operation of MAX-HEAPIFY on the array A
What is the effect of calling MAX-HEAPIFY when the element A[i] is larger than its children?
illustrate the operation of BUILD-MAX-HEAP on the array A
illustrate the operation of HEAPSORT on the array A
Argue the correctness of HEAPSORT using the following loop invariant
What is the running time of HEAPSORT on an array A of length n that is already sorted in increasing order? What about decreasing order?
Show that the worst-case running time of HEAPSORT
Illustrate the operation of HEAP-EXTRACT-MAX on the heap A
Illustrate the operation of MAX-HEAP-INSERT on the heap A
Show how to implement a first-in, first-out queue with a priority queue. Show how to implement a stack with a priority queue.
Give an implementation of HEAP-DELETE that runs in O.lg n/ time for an n-element max-heap.
Building a heap using insertion
How would you represent a d-ary heap in an array
What is the height of a d-ary heap of n elements in terms of n and d?
Show how to insert a new element into a nonfull m x n Young tableau in O(m+n) time.

illustrate the operation of PARTITION on the array A
Give a brief argument that the running time of PARTITION on a subarray of size n is 0(n)
How would you modify QUICKSORT to sort into nonincreasing order?
Use the substitution method to prove that the recurrence
Why do we analyze the expected running time of a randomized algorithm and not its worst-case running time?
When RANDOMIZED-QUICKSORT runs, how many calls are made to the randomnumber generator RANDOM in the worst case?
Demonstrate the operation of HOARE-PARTITION on the array A
Rewrite the QUICKSORT procedure to use HOARE-PARTITION.
Suppose that all element values are equal. What would be randomized quicksort’s running time in this case?
Argue that TAIL-RECURSIVE-QUICKSORT correctly sorts the array A.
Describe a scenario in which TAIL-RECURSIVE-QUICKSORT’s stack depth is 0(n) on an n-element input arrary
Median-of-3 partition
Design a randomized algorithm for fuzzy-sorting n intervals.

What is the smallest possible depth of a leaf in a decision tree for a comparison sort?
Obtain asymptotically tight bounds on lg(n!) without using Stirling’s approximation.
Prove that COUNTING-SORT is stable.
illustrate the operation of RADIX-SORT on the following list of English words
Use induction to prove that radix sort works
illustrate the operation of BUCKET-SORT on the array A 
Show that for any randomized comparison sort B, there exists a deterministic comparison sort A whose expected number of comparisons is no more than those made by B.
You are given an array of integers, where different integers may have different numbers of digits, but the total number of digits over all the integers in the array is n. Show how to sort the array in O(n) time.
What does it mean for an array to be 1-sorted?
Give an algorithm that k-sorts an n-element array in O(nlg(n/k) time.
Given 2n numbers, compute the number of possible ways to divide them into two sorted lists, each with n numbers.
Show that if two elements are consecutive in the sorted order and from different lists, then they must be compared.
The 0-1 sorting lemma and columnsort

Prove the lower bound of [3n/2]- 2 comparisons in the worst case to find both the maximum and minimum of n numbers
Show that RANDOMIZED-SELECT never makes a recursive call to a 0-length array.
Write an iterative version of RANDOMIZED-SELEC
In the algorithm SELECT, the input elements are divided into groups of 5. Will the algorithm work in linear time if they are divided into groups of 7? Argue that SELECT does not run in linear time if groups of 3 are used.
Sort the numbers, and list the i largest.
Build a max-priority queue from the numbers, and call EXTRACT-MAX i times.
Use an order-statistic algorithm to find the ith largest number, partition around that number, and sort the i largest numbers.
Show how to compute the weighted median of n elements in O(nlgn) worstcase time using sorting
Small order statistics
Give an exact expression for E[Xijk]

illustrate the result of each operation in the sequence PUSH.S; 4/, PUSH.S; 1/, PUSH.S; 3/, POP.S /, PUSH.S; 8/, and POP.S / on an initially empty stack S Explain how to implement two stacks in one array in such a way that neither stack overflows unless the total number of elements in stacks together is N 
Rewrite ENQUEUE and DEQUEUE to detect underflow and overflow of a queue.
Show how to implement a queue using two stacks. Analyze the running time of the stack, queue operations.
Can you implement the dynamic-set operation INSERT on a singly linked list in O(1) time?
Implement a stack using a singly linked list L.
Implement a queue by a singly linked list L.
Implement the dictionary operations INSERT, DELETE, and SEARCH using singly linked, circular lists. What are the running times of your procedures?
Explain how to implement doubly linked lists using only one pointer value x:np per item instead of the usual two (next and pre). 
Write the procedures ALLOCATE-OBJECT and FREE-OBJECT for a homogeneous collection of objects implemented by the single-array representation.
Write an O(n)-time recursive procedure that, given an n-node binary tree, prints out the key of each node in the tree.
For each of the four types of lists in the following table, what is the asymptotic worst-case running time for each dynamic-set operation listed?
Mergeable heaps using linked lists
Searching a sorted compact list

Suppose that a dynamic set S is represented by a direct-address table T of length m. Describe a procedure that finds the maximum element of S. What is the worst-case performance of your procedure?
A bit vector is simply an array of bits (0s and 1s). A bit vector of length m takes much less space than an array of m pointers. Describe how to use a bit vector to represent a dynamic set of distinct elements with no satellite data.
Suggest how to implement a direct-address table in which the keys of stored elements do not need to be distinct and the elements can have satellite data
Suppose we use a hash function h to hash n distinct keys into an array T of length m. Assuming simple uniform hashing, what is the expected number of collisions? More precisely, what is the expected cardinalit
Demonstrate what happens when we insert the keys 5; 28; 19; 15; 20; 33; 12; 17; 10 into a hash table with collisions resolved by chaining
Suppose we wish to search a linked list of length n, where each element contains a key k along with a hash value h(k). Each key is a long character string. How might we take advantage of the hash values when searching the list for an element with a given key?
How can we apply the division method to compute the hash value of the character string without using more than a constant number of words of storage outside the string itself?
Compute the locations to which the keys 61, 62, 63, 64, and 65 are mapped.
Consider inserting the keys 10; 22; 31; 4; 15; 28; 17; 88; 59 into a hash table of length m D 11 using open addressing with the auxiliary hash function. Illustrate the result of inserting these keys using linear probing, using quadraticprobing with c1 = 1 and c2 = 3, and using double hashing 
Give upper bounds on the expected number of probes in an unsuccessful search and on the expected number of probes in a successful search when the load factor is 3/4 and when it is 7/8.
Consider an open-address hash table with a load factor ˛. Find the nonzero value ˛ for which the expected number of probes in an unsuccessful search equals twice the expected number of probes in a successful search.
Longest-probe bound for hashing
Slot-size bound for chaining
Quadratic probing
Show that if the family H of hash functions is 2-universal, then it is universal

For the set of A keys, draw binary search trees of heights 2, 3, 4, 5, and 6.
What is the difference between the binary-search-tree property and the min-heap property?
Give a nonrecursive algorithm that performs an inorder tree walk
Give recursive algorithms that perform preorder and postorder tree walks in 0(n) time on a tree of n nodes.
Suppose that we have numbers between 1 and 1000 in a binary search tree, and we want to search for the number 363. Which of the following sequences could not be the sequence of nodes examined?
Write recursive versions of TREE-MINIMUM and TREE-MAXIMUM.
Write the TREE-PREDECESSOR procedure
Show that if a node in a binary search tree has two children, then its successor has no left child and its predecessor has no right child.
An alternative method of performing an inorder tree walk of an n-node binary search tree finds the minimum element in the tree by calling TREE-MINIMUM and then making n - 1 calls to TREE-SUCCESSOR.
Give a recursive version of the TREE-INSERT procedure.
Argue that the number of nodes examined in searching for a value in the tree is one plus the number of nodes examined when the value was first inserted into the tree.
Binary search trees with equal keys
What is the asymptotic performance of TREE-INSERT when used to insert n items with identical keys into an initially empty binary search tree?
Find the average depth of a node in T
Describe an implementation of quicksort in which the comparisons to sort a set of elements are exactly the same as the comparisons to insert the elements into a binary search tree

Draw the red-black tree that results after TREE-INSERT is called on the tree
What is the largest possible number of internal nodes in a red-black tree with blackheight k? What is the smallest possible number?
Describe a red-black tree on n keys that realizes the largest possible ratio of red internal nodes to black internal nodes. What is this ratio? What tree has the smallest possible ratio, and what is the ratio?
Argue that in every n-node binary search tree, there are exactly n - 1 possible rotations.
How do the depths of a, b, and c change when a left rotation is performed on node x in the figure?
Show the red-black trees that result after successively inserting the keys 
Argue that after executing RB-DELETE-FIXUP, the root of the tree must be black.
For a general persistent binary search tree, identify the nodes that we need to change to insert a key k or delete a node y
If the height of the persistent binary search tree T is h, what are the time and space requirements of your implementation of PERSISTENT-TREE-INSERT?
Prove that an AVL tree with n nodes has heigh O(lgN)
Show that given a set of nodes x1; x2;:::;xn, with associated keys and priorities, all distinct, the treap associated with these nodes is unique.
Show that the expected running time of TREAP-INSERT is 0(lgN)

Show how OS-SELECT operates on the red-black tree T
Show how OS-RANK operates on the red-black tree T
Write a recursive procedure OS-KEY-RANK that takes as input an orderstatistic tree T and a key k and returns the rank of k in the dynamic set represented
by T 
Given an element x in an n-node order-statistic tree and a natural number i, how can we determine the ith successor of x in the linear order of the tree in
O(lgN) time
Show how to use an order-statistic tree to count the number of inversions
Can we maintain the black-heights of nodes in a red-black tree as attributes in the nodes of the tree without affecting the asymptotic performance of any of the redblack tree operations? Show how, or argue why not. How about maintaining the depths of nodes?
Describe an efficient algorithm that, given an interval i, returns an interval overlapping i that has the minimum low endpoint
Rewrite the code for INTERVAL-SEARCH so that it works properly when all intervals are open.
Describe an efficient algorithm that, given an interval i, returns an interval overlapping i that has the minimum low endpoint
Show how to maintain a dynamic set Q of numbers that supports the operation MIN-GAP, which gives the magnitude of the difference of the two closest numbers in Q. 
Show that there will always be a point of maximum overlap that is an endpoint of one of the segments.
Design a data structure that efficiently supports the operations INTERVALINSERT, INTERVAL-DELETE, and FIND-POM, which returns a point of maximum overlap.
Describe an O(n)-time algorithm that, given an integer n, outputs the (n,m)-Josephus permutation

Give an O(n)-time dynamic-programming algorithm to compute the nth Fibonacci number
Find an optimal parenthesization of a matrix-chain product whose sequence of dimensions is h5; 10; 3; 12; 5; 50; 6i
Describe the subproblem graph for matrix-chain multiplication with an input chain of length n. How many vertices does it have? How many edges does it have, and which edges are they?
Show that a full parenthesization of an n-element expression has exactly n-1 pairs of parentheses.
Which is a more efficient way to determine the optimal number of multiplications in a matrix-chain multiplication problem: enumerating all the ways of parenthesizing the product and computing the number of multiplications for each, or running RECURSIVE-MATRIX-CHAIN?
Draw the recursion tree for the MERGE-SORT procedure on an array of 16 elements
Consider a variant of the matrix-chain multiplication problem in which the goal is to parenthesize the sequence of matrices so as to maximize, rather than minimize, the number of scalar multiplications. Does this problem exhibit optimal substructure?
Determine an LCS
Give a memoized version of LCS-LENGTH
Determine the cost and structure of an optimal binary search tree for a set of n = 7 keys with the following probabilities
Describe a dynamicprogramming approach for finding a longest weighted simple path from s to t.
Give an efficient algorithm to find the longest palindrome that is a subsequence of a given input string.
Bitonic euclidean traveling-salesman problem
Describe a dynamic-programming algorithm that finds the edit distance 
Viterbi algorithm

Give a dynamic-programming algorithm for the activity-selection problem, based on recurrence. Compare the running time of your solution to the running time of GREEDY-ACTIVITY-SELECTOR.
Prove that the fractional knapsack problem has the greedy-choice property
Give a dynamic-programming solution to the 0-1 knapsack problem
Give an efficient algorithm to find an optimal solution to this variant of the knapsack problem, and argue that your algorithm is correct
Prove that a binary tree that is not full cannot correspond to an optimal prefix code
What is an optimal Huffman code for the following set of frequencies, based on the first 8 Fibonacci numbers?
Generalize Huffman’s algorithm to ternary codewords, and prove that it yields optimal ternary codes
Show that no compression scheme can expect to compress a file of randomly chosen 8-bit characters by even a single bit
Show how to transform the weight function of a weighted matroid problem, where the desired optimal solution is a minimum-weight maximal independent subset, to make it a standard weighted-matroid problem.
Describe a greedy algorithm to make change consisting of quarters, dimes, nickels, and pennies. Prove that your algorithm yields an optimal solution.
Give a set of coin denominations for which the greedy algorithm does not yield an optimal solution
Give an algorithm that schedules the tasks so as to minimize the average completion time. Each task must run non-preemptively, that is, once task ai starts, it must run continuously for pi units of time.
Write pseudocode for a cache manager that uses the furthest-in-future strategy. Show that the off-line caching problem exhibits optimal substructure.

If the set of stack operations included a MULTIPUSH operation, which pushes k items onto the stack, would the O(1) bound on the amortized cost of stack operations continue to hold?
Suppose we perform a sequence of n operations on a data structure in which the ith operation costs i if i is an exact power of 2, and 1 otherwise. Use aggregate analysis to determine the amortized cost per operation.
Show how to implement a queue with two ordinary stacks (Exercise 10.1-6) so that the amortized cost of each ENQUEUE and each DEQUEUE operation is O(1)
Suppose that we wish to implement a dynamic, open-address hash table. Why might we consider the table to be full when its load factor reaches some value ˛
that is strictly less than 1? Describe briefly how to make insertion into a dynamic, open-address hash table run in such a way that the expected value of the amortized cost per insertion is O(1) Why is the expected value of the actual cost per insertion not necessarily O(1) for all insertions?

For what values of t is the tree of Figure 18.1 a legal B-tree?
Show all legal B-trees of minimum degree 2 that represent f1; 2; 3; 4; 5g.
As a function of the minimum degree t, what is the maximum number of keys that can be stored in a B-tree of height h?
Describe the data structure that would result if each black node in a red-black tree were to absorb its red children, incorporating their children with its own.
Explain how to find the minimum key stored in a B-tree and how to find the predecessor of a given key stored in a B-tree.
How many nodes does the final B-tree have?
Write pseudocode for B-TREE-DELETE.
Asymptotically, what is the worst-case number of disk accesses for n stack operations using this simple implementation? What is the CPU time for n stack
operations?
What is the worst-case number of disk accesses required for n PUSH operations? What is the CPU time?
Show how to maintain, for every node x of a 2-3-4 tree, the height of the subtree rooted at x as an attribute x:height
Show how to implement the join operation

Show the Fibonacci heap that results from calling FIB-HEAP-EXTRACT-MIN on the Fibonacci heap
Suppose that a root x in a Fibonacci heap is marked. Explain how x came to be a marked root. Argue that it doesn’t matter to the analysis that x is marked, even though it is not a root that was first linked to another node and then lost one child
Show that for any positive integer n, a sequence of Fibonacci-heap operations that creates a Fibonacci heap consisting of just one tree that is a linear chain of n nodes.
Suppose that a binomial heap H has a total of n nodes. Discuss the relationship between the binomial trees that H contains and the binary representation of n.
Complete the description of how to represent a binomial heap (i.e., name the attributes, describe when attributes have the value NIL, and define how the root list is organized), and show how to implement the same seven operations on binomial heaps as this chapter implemented on Fibonacci heaps
How would the trees in a Fibonacci heap resemble those in a binomial heap? How would they differ? Show that the maximum degree in an n-node Fibonacci heap would be at most [lgN]

Modify the data structures in this section to support keys that have associated satellite data.
Write pseudocode for the procedures PROTO-VEB-MAXIMUM and PROTO-VEBPREDECESSOR.
Add the attribute n to each proto-vEB structure, giving the number of elements currently in the set it represents, and write pseudocode for PROTO-VEB-DELETE that uses the attribute n to decide when to reset summary bits to 0
Modify the proto-vEB structure to support duplicate keys
Suppose that we designed a proto-vEB structure in which each cluster array had only u^1/4 elements. What would the running times of each operation be?
Modify vEB trees to support duplicate keys
Write pseudocode for a procedure that creates an empty van Emde Boas tree.

Show that after all edges are processed by CONNECTED-COMPONENTS, two vertices are in the same connected component if and only if they are in the same set.
Write pseudocode for MAKE-SET, FIND-SET, and UNION using the linked-list representation and the weighted-union heuristic
Write a nonrecursive version of FIND-SET with path compression
Prove that every node has rank at most [lgn].
give a simple proof that operations on a disjoint-set forest with union by rank but without path compression run in O(mlgN) time.


Prove that a greedy scheduler achieves the following time bound
Construct a computation dag for which one execution of a greedy scheduler can take nearly twice the time of another execution of a greedy scheduler on the same number of processors. Describe how the two executions would proceed.
Give a multithreaded algorithm to multiply an n x n matrix by an n-vector that achieves 0(n^2/lgN) parallelism while maintaining 0(n^2) work.
Analyze the work, span, and parallelism of this algorithm
Draw the computation dag for computing P-SQUARE-MATRIX-MULTIPLY on 2 x 2 matrices, labeling how the vertices in your diagram correspond to strands in the
execution of the algorithm. Use the convention that spawn and call edges point downward, continuation edges point horizontally to the right, and return edges point upward. Assuming that each strand takes unit time, analyze the work, span, and parallelism of this computation
Give pseudocode for a multithreaded algorithm that multiplies two n x n matrices with work 0(n^3) but span only 0(lgn) 
Give pseudocode for an efficient multithreaded implementation of the FloydWarshall algorithm which computes shortest paths between all pairs of vertices in an edge-weighted graph.
Explain how to coarsen the base case of P-MERGE.
Give an efficient multithreaded algorithm for partitioning an array around a pivot, as is done by the PARTITION procedure
Give a multithreaded version of RANDOMIZED-SELECT on page 216.

Give a formal definition for the problem of finding the longest simple cycle in an undirected graph. Give a related decision problem. Give the language corresponding to the decision problem.
Give a formal encoding of directed graphs as binary strings using an adjacencymatrix representation. Do the same using an adjacency-list representation.
Is the dynamic-programming algorithm for the 0-1 knapsack problem that is asked for in Exercise 16.2-2 a polynomial-time algorithm? 
Show that if an algorithm makes at most a constant number of calls to polynomialtime subroutines and performs an additional amount of work that also takes polynomial time, then it runs in polynomial time. Also show that a polynomial number of calls to polynomial-time subroutines may result in an exponential-time algorithm.
Show that the class P, viewed as a set of languages, is closed under union, intersection, concatenation, complement, and Kleene star. 
Prove that if G is an undirected bipartite graph with an odd number of vertices, then G is nonhamiltonian.
Prove that the class NP of languages is closed under union, intersection, concatenation, and Kleene star. Discuss the closure of NP under complement.
Show that the hamiltonian-path problem can be solved in polynomial time on directed acyclic graphs. Give an efficient algorithm for the problem
Describe a circuit of size n that, when converted to a formula by this method, yields a formula whose size is exponential in n.
Show that the problem of determining whether a boolean formula is a tautology is complete for co-NP
Show that the problem of determining the satisfiability of boolean formulas in disjunctive normal form is polynomial-time solvable.
Suppose that someone gives you a polynomial-time algorithm to decide formula satisfiability. Describe how to use this algorithm to find satisfying assignments in polynomial time.
Show that the subgraphisomorphism problem is NP-complete.
Assuming that the 0-1 integer-programming problem is NP-hard, show that the integer linear-programming problem is NPcomplete.
Show how to solve the subset-sum problem in polynomial time if the target value t is expressed in unary
Show that the hamiltonian-path problem is NP-complete
Prove that the half 3-CNF satisfiability problem is NP-complete.
Give an efficient algorithm to solve the independent-set problem when each vertex in G has degree 2. Analyze the running time, and prove that your algorithm works correctly
Give an efficient algorithm to determine a 2-coloring of a graph, if one exists.
State a problem as a decision problem.
Give a polynomial-time algorithm for the optimization problem, assuming that all processing times are integers from 1 to n.























1 Show that f(N) = NlgN + O(N) implies that f(N) = Θ(NlogN).
Implement a mergesort that avoids defining sentinel value
Implement a mergesort that divides the array into three equal parts, sorts them, and does a three-way merge. 
Empirically compare its running time with standard mergesort.
Develop a recurrence describing the quantity CN+1 − CN
Give the recurrence for the total number of compares used by quicksort on all N! permutations of N elements.
Prove that the subarrays left after partitioning a random permutation are themselves both random permutations.
How many subarrays of size 2 or less are encountered, on the average, when sorting a random ŀle of size N with quicksort?
What is the standard deviation of the number of compares for the mergesort implementation given earlier in this chapter?

Write recursive and nonrecursive programs to compute values for the Fibonacci recurrence and try to use each to compute F20.
Write a program to compare quicksort, its median-of-three variant, and radix-exchange sort, calculating values from the recurrences 
Solve the inhomogeneous recurrence
Find a recurrence describing a sequence for which the order of growth decreases exponentially for odd-numbered terms, but increases exponentially for evennumbered terms.
Give an approximate solution for the “third-order” Fibonacci recurrence
Give a simple algorithm to determine whether a given monomial appears in the expansion
solve the register allocation recurrence
Solve the quicksort recurrence for a function
Solve the quicksort median-of-three recurrence using the repertoire method
Use bootstrapping to show that the number of compares used by median-of-three quicksort 
Find the asymptotic growth of the solution to the “perturbed” Fibonacci recurrence
What is the number of comparisons used during an unsuccessful search with binary search in a table of size N in the best case?
Give an asymptotic solution to the recurrence

Find the OGFs for each of the following sequences
Differentiate the OGF for harmonic numbers
Find the EGFs for each of the following sequences
Given the EGF A(z) for a sequence {ak}, ŀnd the EGF for the sequence
Find the EGF for the Fibonacci numbers.
Use generating functions to solve the following recurrences
Use Taylor’s theorem to ŀnd the expansions of the following function
What identity on binomial coefficients is implied by the convolution
Prove the binomial transform identity directly, without using generating functions.
Find the number of comparisons and exchanges used, on the average, by quicksort when modiŀed to use the median of ŀve elements for partitioning.
Find the PGF for the random variable that counts the number of leading 0s in a random binary string, and use the PGF to ŀnd the mean and standard deviation.
Find the DGF for the characteristic function of {N2}.

Show that the product of an exponentially small quantity and any polynomial in N is an exponentially small quantity
Find an asymptotic solution to the recurrence
Give an approximate solution for the “tth-order Fibonacci” recurrence
Give an asymptotic expansion for ln(Nα + Nβ)
Give speciŀc bounds for the 10th Catalan number implied by the relative formula
Give an asymptotic estimate
Use Euler-Maclaurin summation to estimate
Use Stirling’s formula for lnN! to prove the relative bounds for the Ramanujan Q- and R-distributions 
Give an asymptotic approximation of the binomial distribution for the case where p = λ/lnN.

How many bitstrings of length N have no 000?
What fraction of binary trees with N nodes have no superleaves?
Derive an EGF for the number of permutations whose cycles are all of odd length.
Derive an EGF for sequences of cycles.
Derive an EGF for cycles of sequences
What is the average number of 1 bits in a random bitstring of length N having no 00?
What is the average number of cycles in a random derangement?
Find the average number of internal nodes in a binary tree of size n with one child internal and one child external.
Find an approximation for the number of bitstrings having no occurrence of 01.
Establish similar bounds for the OGF of integer partitions

What proportion of the binary trees with N internal nodes have both subtrees of the root nonempty?
What proportion of the forests with N nodes have no trees consisting of a single node?
Discuss the relationship between the preorder and postorder representations of the ordered tree and the preorder, inorder, and postorder representations of the corresponding binary tree
Find and prove the validity of a correspondence between N-step gambler’s ruin paths and ordered forests of N − 1 nodes.
How many N-bit binary strings have the property that the number of ones in the ŀrst k bits does not exceed the number of zeros, for all k?
Give a method for representing a tree with a subdivided rectangle when the ratio of the height to the width of any rectangle is between α and 1/α for constant α > 1.
Give recursive formulations describing path length and height in general trees
Give recursive formulations for the number of leaves in binary trees and in general trees
Prove that the height of a binary tree with N external nodes has to be at least lgN.
Give tight upper and lower bounds on the path length of a general tree with N nodes.
If all N! permutations are equally likely, what is the probability that a degenerate tree structure will result?
Use the rotation correspondence between general trees and binary trees to derive the average path length in random general trees from the corresponding result on random binary trees.
Express the PGF for successful search in terms of the PGF for unsuccessful search
Find the average number of children of the root in a random Catalan tree of N nodes.
In a random Catalan tree of N nodes, ŀnd the proportion of nodes with k children for k = 2, 3, and higher.
What fraction of the nodes are of each type, in a random binary Catalan tree of N nodes?
Set up BGFs for the number of leaves and estimate the variance for each of the three random tree models
Find a relationship between the stack height of a binary tree and the height of the corresponding forest.
Find the number of n-node 3-forests of ternary trees.
Which free tree structure on six nodes appears most frequently among all ordered trees on six nodes?
Give an efficient algorithm that takes as input two binary trees and determines whether they are different when considered as unordered trees.
Give an efficient algorithm that takes as input two parenthesis systems and determines whether they represent the same rooted tree.
Give a polynomial-time algorithm to generate a random rooted tree of size N.
Show that the number of rooted trees of N nodes is bounded below by the number of free trees of N nodes and bounded above by N times the number of free trees of N nodes. 
Which tree of four nodes has the most different labellings?
What is the number of labelled rooted forests of N nodes?
Find the number of k-forests with a total of N internal nodes.
Find the number of “even” t-restricted trees, where all nodes have an even number of, and less than t, children.
Build a table giving the number of AVL and 2-3 trees with fewer than 15 nodes that are different when considered as unordered trees

Explain how to compute the number of left-to-right maxima, right-toleft minima, and right-to-left maxima from the inversion table.
How many different ways are there to write the sample permutation in cycle notation?
Which permutations of N elements have the maximum number of different representations with cycles?
Write a program that computes the number of increasing subsequences in a given permutation in polynomial time.
Write a programs that will compute Foata’s representation of a given permutation, and vice versa.
Give an efficient algorithm for computing the inversion table corresponding to a given permutation, and another algorithm for computing the permutation corresponding to a given inversion table.
Show that the lattice representation of an involution is symmetric about the main diagonal.
List five permutations that correspond to the BST
Characterize the nodes in an HOT that correspond to rises, double rises, falls, and double falls in permutations.
Characterize the binary trees of size N to which the smallest number of permutations correspond and those to which the largest number of permutations correspond
Show that the number of involutions of size N satisŀes the recurrence
Derive a recurrence that can be used to compute the number of permutations that have no cycle of length > 3
Find the EGF and an asymptotic estimate for the number of increasing subsequences of length at least 3 in a random permutation of length N
Prove that valleys and peaks have the same distribution for random permutations.
How many permutations of N elements have exactly one inversion? Two? Ļree?
Find the CGF for the total number of inversions in all involutions of length N. Use this to ŀnd the average number of inversions in an involution.
Analyze the following sorting algorithm: given an array to be sorted, sort the elements in odd positions and in even positions recursively, then sort the resulting 2-ordered permutation with insertion sort.

How long a string of random bits should be taken to be 50% sure that there are at least 32 consecutive 0s?
Find the bivariate generating function associated with the number of leading 1 bits in a random bitstring and use it to calculate the average and standard deviation of this quantity.
Find the BGF for the length of the longest run of 0s in bitstrings
What is the standard deviation of the random variable marking the ŀrst occurrence of a run of P 0s in a random bitstring?
How many bits are examined by the basic algorithm given in the previous section to ŀnd the ŀrst string of P 0s in a random bitstring?
Calculate the expected position of the ŀrst occurrence of each of the following patterns in a random bitstring
Which bit patterns of length P are likely to appear the earliest in a random bitstring? Which patterns are likely to appear the latest?
Give a regular expression for the set of all strings having no occurrence of the pattern 101101. What is the corresponding generating function?
Find the average number of 0s appearing before the ŀrst occurrence of each of the bit patterns of length 4 in a random bitstring.
Give a text string of length 25 that maximizes (among all strings of length 25) the number of times the KMP automaton from Figure 8.3 reaches step 2.
Give the KMP state transition table for the pattern 110111011101.
Write a computer algebra program that computes the standard rational form of the OGF that enumerates the language recognized by a given deterministic FSA.
What is the probability that the number of 0s in a random bitstring never exceeds the number of 1s?
Given a random bitstring of length N, how many of its preŀxes have k more 0s than 1s, on the average? What is the probability that the number of 0s in a random bitstring never exceeds the number of 1s by k?
How many different tries are there with N external nodes?
Given a set of pattern strings, describe a method for counting the number of times one of the patterns occurs in a text string
Give the Aho-Corasick FSA for the set of strings 01 100 1011 010.
Show that AN /N is equal to 1/ln2 plus a łuctuating term

How many different occupancy distributions are there for N unlabelled balls in a sequence of M urns?
Give necessary and sufficient conditions on N and M for the average number of empty urns to equal the average minimum urn occupancy.
Give an expression for the probability that collecting at least N boxes gives a full collection of M coupons.
Consider the “largest” construction among M-surjections: given an M-surjection of length N, consider the (M − 1)-surjection formed by removing all occurrences of M. Find the EGF for surjections using this construction.
Find the EGF for M-words with all letter frequencies even
What is the expected number of balls thrown in N urns before the second collision occurs?
Give an explicit expression for the number of M-words with no three occurrences of the same letter.
Derive an expression for the exponential CGF for the expected minimal occupancy when N balls are distributed into M urns. Tabulate the values for M and N less than 20.
What is the average number of blocks of contiguous equal elements in a random word?
What is the probability that each urn will get one ball when 100 balls are randomly distributed among 100 urns?
What is the standard deviation for the average number of empty urns?
For 1000 keys, which value of M will make hashing with separate chaining access fewer keys than a binary tree search? For 1 million keys?
How many keys can be inserted into a linear probing table of size M before the average search cost gets to be greater than lnN?
Give an explicit representation for the EGF for the cost of an unsuccessful search.
Find the exponential BGF for the image cardinality distribution
Use a combinatorial argument to ŀnd the exponential BGF for the image cardinality distribution
Give an explicit expression for the number of M-words of length N having k different letters.
Prove that every random mapping must have at least one cycle.
Show that the analysis of the rho length of a random point in a random mapping is equivalent to that for the birthday problem.
Which N-mappings have maximal and minimal rho length? Tree path length?
Write a program to ŀnd the rho length and tree path length of a random mapping without using any extra storage
What is the average number of different integers in the image when a random mapping is iterated twice?
Use Floyd’s method to test the random number generators on your machine for short cycles.




























Linear programming
how to optimize linear functions

Computer architecture and design
What kind of instruction do computers understand? How does it implement instructions?
What kind of arithmetic do computers compute?
What's a processor? What does it do? How does it do?
What's a memory? What's its function? How does it store information?

Semiconductor DRAM memory, fl ash memory, and disk storage diff er signifi cantly. For each technology, list its volatility, approximate relative access time, and approximate relative cost compared to DRAM.
A key factor in determining the cost of an integrated circuit is volume. Which of the following are reasons why a chip made in high volume should cost less?
For the following changes, state whether only the throughput improves, both response time and throughput improve, or neither improves.
Computer C’s performance is 4 times as fast as the performance of computer B, which runs a given application in 28 seconds. How long will computer C
take to run that application?
A given application written in Java runs 15 seconds on a desktop processor. A new Java compiler is released that requires only 0.6 as many instructions as the old compiler. Unfortunately, it increases the CPI by 1.1. How fast can we expect the application to run using this new compiler?
Describe the steps that transform a program written in a high-level language such as C into a representation that is directly executed by a computer
processor.
What is the minimum size in bytes of the frame buff er to store a frame?
How long would it take, at a minimum, for the frame to be sent over a 100 Mbit/s network?
Which processor has the highest performance expressed in instructions per second?
If the processors each execute a program in 10 seconds, fi nd the number of cycles and the number of instructions
We are trying to reduce the execution time by 30% but this leads to an increase of 20% in the CPI. What clock rate should we have to get this time reduction?
What is the global CPI for each implementation?
Find the average CPI for each program given that the processor has a clock cycle time of 1 ns.
For each processor fi nd the average capacitive loads
Find the percentage of the total dissipated power comprised by static power and the ratio of static power to dynamic power for each technology.
If the total dissipated power is to be reduced by 10%, how much should the voltage be reduced to maintain the same leakage current?
Find the total execution time for this program
Find the yield for both wafers
Find the cost per die for both wafers.
Assume a fabrication process improves the yield from 0.92 to 0.95. Find the defects per area unit for each version of the technology given a die area of 200 mm2.
Find the SPECratio
Find the CPI if the clock cycle time is 0.333 ns.
By how much is the total time reduced if the time for FP operations is reduced by 20%?
Can the total time can be reduced by 20% by reducing only the time for branch instructions?
By how much must we improve the CPI of FP instructions if we want the program to run two times faster? Compute the per-processor execution time for 2, 4, 8, 16, 32, 64, and 128 processors. For each case, list the corresponding speedup relative to a single processor and the ratio between actual speedup versus ideal speedup (speedup if there was no overhead).

For a given function, which programming language likely takes the most lines of code?
Given the importance of registers, what is the rate of increase in the number of registers in a chip over time?
What is the decimal value of this 64-bit two’s complement number?
Which operations can isolate a fi eld in a word?
Which type of variable that can contain 1,000,000,000ten takes the most memory space?
What is the range of addresses for conditional branches in MIPS (K = 1024)?
What is the range of addresses for jump and jump and link in MIPS (M = 1024K)?
What is the MIPS assembly language instruction corresponding to the machine instruction with the value 0000 0000hex?
When do you use primitives like load linked and store conditional?
For the following C statement, what is the corresponding MIPS assembly code?
For the memory locations in the table above, write C code to sort the data from lowest to highest, placing the lowest value in the smallest memory 
Show how the value 0xabcdef12 would be arranged in memory of a little-endian and a big-endian machine. Assume the data is stored starting at address 0.
show the value of the opcode (OP), source register (RS), and target register (RT) fi elds. For the I-type instructions, show the value of the immediate fi eld, and for the R-type instructions, show the value of the destination register (RD) fi eld.
What is the value of $t0 for the following assembly code?> Is the result in $t0 the desired result, or has there been overfl ow?
> For the instruction add $t0, $s0, $s1, what is the range(s) of values for $s1 that would result in overfl ow?
> Provide the type and assembly language instruction for the following binary value: 0000 0010 0001 0000 1000 0000 0010 0000two
Provide the type, assembly language instruction, and binary representation of instruction described by the following MIPS fields: op=0, rs=3, rt=2, rd=3, shamt=0, funct=34
For each function call, show the contents of the stack aft er the function call is made. Assume the stack pointer is originally at address 0x7ff ff ff c
Can we use the tail-call optimization in this function
If the current value of the PC is 0x00000000, can you use a single jump instruction to get to the PC address

What MIPS instructions should be generated for byte and halfword arithmetic operations?
Th e revised IEEE 754-2008 standard added a 16-bit fl oating-point format with fi ve exponent bits. What do you think is the likely range of numbers it could represent?
What is 5ED4 - 07A4 when these values represent signed 16-bit hexadecimal numbers stored in sign-magnitude format?
Assume 185 and 122 are signed 8-bit decimal integers stored in sign-magnitude format. Calculate 185 - 122. Is there overfl ow, underfl ow, or neither?
Assume 151 and 214 are signed 8-bit decimal integers stored in two’s complement format. Calculate 151  214 using saturating arithmetic
Calculate the time necessary to perform a multiply
What decimal number does the bit pattern 0×0C000000 represent if it is a two’s complement integer? An unsigned integer?
If the bit pattern 0×0C000000 is placed into the Instruction Register, what MIPS instruction will be executed?
Write down the binary representation of the decimal number 63.25 assuming the IEEE 754 double precision format.
Write down the binary bit pattern to represent -1.5625 x 10^-1 assuming a format similar to that employed by the DEC PDP-8
Using the IEEE 754 fl oating point format, write down the bit pattern that would represent -1/4. Can you represent -1/4 exactly?
Write down the bit pattern assuming that we are using base 30 numbers in the fraction instead of base 2. (Base 16 numbers use the symbols 0–9 and A–F. Base 30 numbers would use 0–9 and A–T.) Assume there are 20 bits, and you do not need to normalize. Is this representation exact?

True or false: Because the register fi le is both read and written on the same clock cycle, any MIPS datapath using edge-triggered writes must have more than one copy of the register fi le.
Which of the following is correct for a load instruction?
Th e single-cycle datapath conceptually described in this section must have separate instruction and data memories, because?
Look at the control signals. Can you combine any together? Can any control signal output in the fi gure be replaced by the inverse of another?
For each code sequence below, state whether it must stall, can avoid stalls using only forwarding, or can execute without stalling or forwarding
A group of students were debating the effi ciency of the fi ve-stage pipeline when one student pointed out that not all instructions are active in every stage of the pipeline. Aft er deciding to ignore the eff ects of hazards, they made the following four statements. Which ones are correct?
Consider three branch prediction schemes: predict not taken, predict taken, and dynamic prediction. Assume that they all have zero penalty when they predict correctly and two cycles when they are wrong. Assume that the average predict accuracy of the dynamic predictor is 90%. Which predictor is the best choice for the following branches? 
Which exception should be recognized fi rst in this sequence? 
1. add $1, $2, $1 # arithmetic overfl ow
2. XXX $1, $2, $1 # undefi ned instruction
3. sub $1, $2, $1 # hardware error
State whether the following techniques or components are associated primarily with a soft ware- or hardware-based approach to exploiting ILP
What are the values of control signals generated by the control
Which resources (blocks) perform a useful function for this instruction?
Which resources (blocks) produce outputs, but their outputs are not used for this instruction? Which resources produce no outputs for this instruction?
Which new functional blocks (if any) do we need for this instruction?
What new signals do we need (if any) from the control unit to support this instruction?
If the only thing we need to do in a processor is fetch consecutive instructions (Figure 4.6), what would the cycle time be?
For which kinds of instructions (if any) is this resource on the critical path?
discuss how changes in the given latency of this resource aff ect the cycle time of the processor
In what fraction of all cycles is the data memory used?
In what fraction of all cycles is the input of the sign-extend circuit needed? What is this circuit doing in cycles in which its input is not needed?
Can you design a test (values for PC, memories, and registers) that would determine if there is a stuck-at-0 fault on this signal?
If we know that the processor has a stuck-at-1 fault on this signal, is the processor still usable?
the fault to test for is whether the “MemRead” control signal becomes 0 if RegDst control signal is 0, no fault otherwise.
What are the values of the ALU control unit’s inputs for this instruction?
What is the new PC address aft er this instruction is executed? Highlight the path through which this value is determined.
For each Mux, show the values of its data output during the execution of this instruction and these register values
What are the values of all inputs for the “Registers” unit?
What is the clock cycle time in a pipelined and non-pipelined processor?
What is the total latency of an LW instruction in a pipelined and non-pipelined processor?
Assuming there are no stalls or hazards, what is the utilization of the data memory?
Indicate dependences and their type.
Assume there is full forwarding. Indicate hazards and add NOP instructions to eliminate them.
What is the total execution time of this instruction sequence without forwarding and with full forwarding? What is the speedup achieved by adding full forwarding to a pipeline that had no forwarding?
Add nop instructions to this code to eliminate hazards if there is ALU-ALU forwarding only (no forwarding from the MEM to the EX stage).
Assuming stall-on-branch and no delay slots, what speedup is achieved on this code if branch outcomes are determined in the ID stage, relative to
the execution where branch outcomes are determined in the EX stage? 
Assuming stall-on-branch and no delay slots, what is the new clock cycle time and execution time of this instruction sequence if beq address
computation is moved to the MEM stage? What is the speedup from this change? Assume that the latency of the EX stage is reduced by 20 ps and the latency of the MEM stage is unchanged when branch outcome resolution is moved from EX to MEM.
How oft en (as a percentage of all cycles) do we have a cycle in which all fi ve pipeline stages are doing useful work?
If we use full forwarding (forward all results that can be forwarded), what fraction of cycles are we staling due to data hazards?
If there is no forwarding or hazard detection, insert nops to ensure correct execution.
If the processor has forwarding, but we forgot to implement the hazard detection unit, what happens when this code executes?
For the new hazard detection unit from 4.13.5, specify which output signals it asserts in each of the fi rst fi ve cycles during the execution of this code.
Draw the pipeline execution diagram for this code, assuming there are no delay slots and that branches execute in the EX stage.
What is the accuracy of always-taken and always-not-taken predictors for this sequence of branch outcomes?
What is the accuracy of the two-bit predictor if this pattern is repeated forever?
What is the accuracy of your predictor from 4.16.4 if it is given a repeating pattern that is the exact opposite of this one?
Which exceptions can each of these instructions trigger? For each of these exceptions, specify the pipeline stage in which it is detected.
How much energy is spent to execute an ADD instruction in a single-cycle design and in the 5-stage pipelined design?
What is the worst-case MIPS instruction in terms of energy consumption, and what is the energy spent to execute it?

Th e speed of the memory system aff ects the designer’s decision on the size of the cache block. Which of the following cache designer guidelines are generally valid?
Which of the following is generally true about a design with multiple levels of caches?
How many 32-bit integers can be stored in a 16-byte cache block?
References to which variables exhibit temporal locality?
How many 16-byte cache blocks are needed to store all 32-bit matrix elements being referenced?
References to which variables exhibit spatial locality?
For each of these references, identify the binary address, the tag, and the index given a direct-mapped cache with 16 one-word blocks. Also list if each
reference is a hit or a miss, assuming the cache is initially empty
Calculate the total number of bits required for the cache listed above, assuming a 32-bit address
Generate a series of read requests that have a lower miss rate on a 2 KiB 2-way set associative cache than the cache listed above. Identify one possible solution that would make the cache listed have an equal or lower miss rate than the 2 KiB cache. Discuss the advantages and disadvantages of such a solution.
What is the cache block size (in words)?
How many entries does the cache have?
What is the ratio between total bits required for such a cache implementation over the data storage bits?
How many blocks are replaced?
What is the hit ratio?
Buff ers are employed between diff erent levels of memory hierarchy to reduce access latency. For this given confi guration, list the possible buff ers
needed between L1 and L2 caches, as well as L2 cache and memory.
Describe the procedure of handling an L1 write-miss, considering the component involved and the possibility of replacing a dirty block
For a write-through, write-allocate cache, what are the minimum read and write bandwidths (measured by byte per cycle) needed to achieve a CPI of 2?
Assume a 64 KiB direct-mapped cache with a 32-byte block. What is the miss rate for the address stream above? How is this miss rate sensitive to the size of the cache or the working set? How would you categorize the misses this workload is experiencing, based on the 3C model?
Re-compute the miss rate when the cache block size is 16 bytes, 64 bytes, and 128 bytes. What kind of locality is this workload exploiting?
What is the optimal block size for a miss latency of 20×B cycles?
For constant miss latency, what is the optimal block size?
Assuming that the L1 hit time determines the cycle times for P1 and P2, what are their respective clock rates?
What is the Average Memory Access Time for P1 and P2?
What is the AMAT for P1 with the addition of an L2 cache? Is the AMAT better or worse with the L2 cache?
Assuming a base CPI of 1.0 without any memory stalls, what is the total CPI for P1 with the addition of an L2 cache?
Which processor is faster, now that P1 has an L2 cache? If P1 is faster, what miss rate would P2 need in its L1 cache to match P1’s performance? If P2 is
faster, what miss rate would P1 need in its L1 cache to match P2’s performance?
show the fi nal cache contents for a three-way set associative cache with two-word blocks and a total size of 24 words. Use LRU replacement. For each reference identify the index bits, the tag bits, the block off set bits, and if it is a hit or a miss.
Calculate the CPI for the processor in the table using: 1) only a fi rst level cache, 2) a second level direct-mapped cache, and 3) a second level eight-way set associative cache. How do these numbers change if main memory access time is doubled? If it is cut in half?
Calculate the MTBF for each of the devices in the table
What happens to availability as the MTTR approaches 0? Is this a realistic situation?
What is the minimum number of parity bits required to protect a 128-bit word using the SEC/DED code?
Consider a SEC code that protects 8 bit words with 4 parity bits. If we read the value 0x375, is there an error? If so, correct the error. 
What is the best page size if entries now become 128 bytes?
what is the best page size if using a modern disk with a 3 ms latency and 100 MB/s transfer rate?
What are the reuse time thresholds if we keep using the same 4K page size? What’s the trend here?
Given the address stream shown, and the initial TLB and page table states provided above, show the fi nal state of the system
Given the parameters shown above, calculate the total page table size for a system running 5 applications that utilize half of the memory available, given a two level page table approach with 256 entries. Assume each entry of the main page table is 6 bytes. Calculate the minimum and maximum amount of memory required
For a single-level page table, how many page table entries (PTEs) are needed? How much physical memory is needed for storing the page table?
What happens when an instruction writes to VA page 30? When would a soft ware managed TLB be faster than a hardware managed TLB?
Assuming an LRU replacement policy, how many hits does this address sequence exhibit?
Assuming an MRU (most recently used) replacement policy, how many hits does this address sequence exhibit
Describe why it is diffi cult to implement a cache replacement policy that is optimal for all address sequences.
What would happen for the given operation sequence for shadow page table and nested page table, respectively? 
What techniques can be used to reduce page table shadowing induced overhead?
What techniques can be used to reduce NPT induced overhead?
Compare and contrast the ideas of virtual memory and virtual machines. How do the goals of each compare? What are the pros and cons of each? List a few cases where virtual memory is desired, and a few cases where virtual machines are desired.
What should happen if the processor issues a request that hits in the cache while a block is being written back to main memory from the write buff er?
Design a fi nite state machine to enable the use of a write buff er.
List the possible values of the given cache block for a correct cache coherence protocol implementation. List at least one more possible value of the
block if the protocol doesn’t ensure cache coherency.
For a snooping protocol, list a valid operation sequence on each processor/cache to fi nish the above read/write operations.
Consider the entire memory hierarchy. What kinds of optimizations can improve the number of concurrent misses?
Which fi elds in a log entry will be accessed for the given log processing function? Assuming 64-byte cache blocks and no prefetching, how many cache misses per entry does the given function incur on average?
How can you reorganize the data structure to improve cache utilization and access locality? Show your structure defi nition code.
For 64 KiB data caches with varying set associativities, what are the miss rates broken down by miss types (cold, capacity, and confl ict misses) for each benchmark?

memory volatility, cost, access time
running time for an application
time and size for a frame to travel through network

datapath, control signal
pipelining











What is the yield for the Phoenix chip?
Why does Phoenix have a higher defect rate than BlueDragon?
How much profit do you make on each wafer of Phoenix chips?
What is the yield for a single core being defect free as well as the yield for Phoenix4, Phoenix2 and Phoenix1?
How much dynamic energy and power are required compared to running at full power?
How much dynamic energy and power are required using frequency and voltage scaling?
How much energy is used with a dark silicon approach?
Imagine that 80% of the code is parallelizable. By how much would the frequency and voltage on a single core need to be increased in order to execute at the same speed as the four-way parallelized code?
If Google’s data center spends 70% of its time on workload A and 30% of its time on workload B when running GPUs, what is the speedup of the TPU system over the GPU system?
what percentage of Max IPS does it achieve for each of the three systems?
What has limited the rate of growth of the clock rate, and what are architects doing with the extra transistors now to increase performance?
How much energy do you save if you execute at the current speed and turn off the system when the computation is complete?
How much power savings would be achieved by placing 60% of the servers in the “barely alive” state?
We have a single processor with a failure in time (FIT) of 100. What is the mean time to failure (MTTF) for this system?
If it takes one day to get the system running again, what is the availability of the system?
With what percentage of encryption will adding encryption hardware result in a speedup of 2?
After implementing the new floating-point operations, what percentage of execution time is spent on floating-point operations? What percentage is spent on data cache accesses?
How much speedup would result from running application A on the entire 22-core processor, as compared to running it serially?
Given acceleration through parallelization, what new percentage of the resources are the applications receiving, considering only active time on their statically-assigned cores?
What is the speedup with N processors if 80% of the application is parallelizable, ignoring the cost of communication?
What is the speedup with eight processors if, for every processor added, the communication overhead is 0.5% of the original execution time
What is the speedup with eight processors if, for every processor added, the communication overhead is 0.5% of the original execution time
What is the number of processors with the highest speedup in an application in which P% of the original execution time is parallelizable, and, for every time the number of processors is doubled, the communication is increased by 0.5% of the original execution time?

What should be the minimum size of the cache to take advantage of blocked execution?
How do the relative number of misses in the blocked and unblocked versions compare in the preceding minimum-sized cache?
Write code to perform a transpose with a block size parameter B that uses BxB blocks.
What is the minimum associativity required of the L1 cache for consistent performance independent of both arrays’ position in memory?
For best performance given a nonunit stride prefetcher, in the steady state of the inner loop, how many prefetches must be outstanding at a given time?
Create a blocked version of the matrix transpose with software prefetching.
What are the overall size and block size of the second-level cache?
What is the size of the main memory?
What is the paging time if the page size is 4 KB?
What is the system page size?
How many entries are there in the TLB?
What is the associativity of the TLB?
How many actual processors are in your computer system and how many system processors are just additional multithreaded contexts?
How many memory controllers does your system have?
What is the read latency experienced by a memory controller on a row buffer miss?
If the memory channel supports only one bank and the memory access pattern is dominated by row buffer misses, what is the utilization of the memory
channel?
What is the average memory latency experienced if the memory channel supports only one bank? What if the memory channel supported four banks?
Tabulate the total power consumed for each rank organization. What is the most power-efficient approach to constructing a rank of a given capacity?
Compare the access times of 64 KB caches with 64-byte blocks and a single bank. What are the relative access times of two-way and four-way set associative caches compared to a direct mapped organization
What is the average memory access time of the current cache (in cycles) versus the way-predicted cache?
If all other components could operate with the faster way-predicted cache cycle time (including the main memory), what would be the impact on performance from using the way-predicted cache?
What is the cycle time of the cache in comparison to its access time, and how many pipe stages will the cache take up (to two decimal places)?
How many cycles would it take to service an L2 cache miss with and without critical word first and early restart?
How many bytes wide should each write buffer entry be?
What would the effect of possible L1 misses be on the number of required write buffer entries for systems with blocking and nonblocking caches?
Based on the following specifications, what is the size of L2 cache that achieves the lowest energy for the PMD (core, L1, L2, memory) for that given task?
Qualitatively explain the impact on cache hierarchy (L2 and memory) power and overall application energy if you design an L2 cache with
Can you define other Insertion and Promotion policies that may be competitive and worth exploring further?
What policies can you add to your last-level cache so that the behavior of one program is immune to the behavior of other programs sharing the cache?
What new policies can you introduce to maximize performance in a NUCA cache?
Calculate the peak bandwidth for DDR2-667 and DDR2-533 DIMMs for reads from an active page excluding the ECC overhead.
What is the relative latency when using the DDR2-667 DIMM of a read requiring a bank activate versus one to an already open page, including the time required to process the miss inside the processor?
What is the cost-performance of the entire system when using the different DIMMs
how many independent memory channels should be provided so the system is not limited by memory bandwidth if the bandwidth required is sometimes twice the average? 
How does a 2 GB DIMM made of 1 Gb x 8 DDR2 DRAMs compare with a DIMM with similar capacity made of 1 Gb x 4 DDR2 DRAMs in terms of power?
Calculate the difference in average DRAM energy per access between the two policies using the previously calculated row buffer hit rate. Assume that precharging requires 2 nJ and activation requires 4 nJ and that 100 pJ/bit are required to read or write from the row buffer.
how long should a system be idle to benefit from hibernating?
Could VMs be used to provide the following capabilities? If so, how could they facilitate this?
What types of programs would be expected to have smaller slowdowns when running under VMs?
What would a virtual machine running on top of another virtual machine have to do, assuming VT-x technology?
What are potential disadvantages in designing a prefetcher that is extremely aggressive?
List the instructions per clock (IPC) for each dataset size and your processor model and speed. Based on the results, what can you say about the L1, L2, and L3 miss penalties on your processor? Explain your observations

Loop unrolling is one standard compiler technique for finding more parallelism in code, in order to minimize the lost opportunities for performance. Hand-unroll two iterations of the loop in your reordered code
How many clock cycles per loop iteration are lost to branch overhead?
Assume a dynamic branch predictor. How many cycles are lost on a correct prediction?
Determine how many cycles are required for each processor to complete the first two iterations of the loop.
What is the execution time (in cycles) per element of the result vector, Y, unscheduled and scheduled? How much faster must the clock be for processor hardware alone to match the performance improvement achieved by the scheduling compiler?
What is the execution time per element of the result vector for each schedule? What percent of the operation slots are used in each schedule? How much does the size of the code differ between the two schedules? What is the total register demand for the two schedules?
Show the number of stall cycles for each instruction and what clock cycle each instruction begins execution (i.e., enters its first EX cycle) for three iterations of the loop. How many cycles does each loop iteration take?
Use the hardware configuration and latencies from the previous question and find a code sequence of no more than 10 instructions where Tomasulo’s algorithm must stall due to CDB contention. Indicate where this occurs in your sequence.
How much faster is the processor with the branch-target buffer versus a processor that has a fixed two-cycle branch penalty?
What is the penalty in clock cycles when an unconditional branch is found in the buffer?

Write code for RISC-V and RV64V
what is the dynamic instruction count for both implementations?
Show how the code sequence lays out in convoys assuming a single instance of each vector functional unit. How many chimes will the code require? How many cycles per FLOP are needed, ignoring vector instruction issue overhead?
Assume that you can use scatter-gather loads and stores (vldi and vsti). How does this affect the way you can write the RV64Vcode for this kernel?
Now assume we want to implement the MrBayes kernel on a GPU using a single thread block. Rewrite the C code of the kernel using CUDA.
Convert your code from Exercise 4.6 into PTX code. How many instructions are needed for the kernel?
How well do you expect this code to perform on a GPU? Explain your answer
What is the arithmetic intensity of this kernel?
Convert this loop into RV64V assembly code using strip mining
Assuming chaining and a single memory pipeline, how many chimes are required? How many clock cycles are required per complex result value, including start-up overhead?
Is this kernel amenable to vector or SIMD execution?
Assume this kernel is to be executed on a processor that has 30 GB/s of memory bandwidth. Will this kernel be memory bound or compute bound?
Develop a roofline model for this processor, assuming it has a peak computational throughput of 85 GFLOP/s
Compute the throughput, in GFLOP/s, for this kernel on this GPU
Does the following loop have a loop-carried dependency?
find all the true dependences, output dependences, and antidependences. Eliminate the output dependences and antidependences by renaming.
List and describe at least four factors that influence the performance of GPU kernels. which runtime behaviors that are caused by the kernel code cause a reduction in resource utilization during kernel execution?
Without considering memory bandwidth, what is the peak single-precision floating-point throughput for this GPU in GLFOP/s, assuming that all memory latencies can be hidden?
Compile your code using the –ptx option and inspect the PTX representation of your kernel. How many PTX instructions make up the PTX implementation of your kernel? Did the conditional sections of your kernel include branch instructions or only predicated nonbranch instructions?
After executing your code in the simulator, what is the dynamic instruction count? What is the achieved instructions per cycle (IPC) or instruction issue rate? What is the dynamic instruction breakdown in terms of control instructions, arithmetic-logical unit (ALU) instructions, and memory instructions? Are there any shared memory bank conflicts? What is the effective off-chip memory bandwidth?
Implement an improved version of your kernel where off-chip memory references are coalesced and observe the differences in runtime performance.

Draw new protocol diagrams for a MESI protocol that adds the Exclusive state and transitions to the base MSI protocol’s Modified, Shared, and Invalidate states.

Compare their performance when run on a core whose cache uses the MESI coherence protocol.
Using the simple spin lock, determine approximately how many memory stall cycles each processor incurs before acquiring the lock
Using the optimized spin lock, approximately how many memory accesses occur?
show the final state (i.e., coherence state, sharers/owners, tags, and data) of the caches and directory controller (including data values) after the given transaction sequence has completed and show the messages transferred (choose a suitable format for message types).
On a read miss to a block in shared (S) state in some other cores, the directory controller instructs one of the sharers (say, the one closest to the
requester) to directly forward the data to the requester
Use the routing and delay information described earlier and trace how the following groups of transactions will progress in the system (assume that all accesses are misses).
What extra complexities may arise if the messages can be adaptively rerouted on the links?
If the processors adhere to sequential consistency (SC) consistency model. What are the possible values of A and B at the end of the segments?
Will that alter the SC implementation execution results?
Augment the code with synchronization primitives to make it emulate the behavior of a total store order (TSO) implementation
How many stall cycles occur prior to each operation for both the SC and RC consistency models? (Write buffer can hold at most one write.)
Rewrite Amdahl’s Law so that it gives the speedup as a function of p for some application.
Calculate the worst-case remote communication cost when the 64 processors are arranged as a ring, as an 8 x 8 processor grid, or as a hypercube
Compare the base CPI of the application with no remote communication to the CPI achieved with each of the three topologies in part (a).
Show how the basic snooping protocol of Figure 5.6 can be changed for a write-through cache. What is the major hardware functionality that is not needed with a write-through cache compared with a write-back cache?
Add a clean exclusive state to the basic snooping cache coherence protocol 
What extra complications are introduced into the basic snooping cache coherence protocol by this addition?
Following the convention of Figure 5.11, let us divide the execution time into instruction execution, cache access, memory access, and other stalls. How would you expect each of these components to differ between system A and system B?
Based on the discussion of the behavior of OLTP workload in Section 5.3, what is the important difference between the OLTP workload and other benchmarks that limit benefit from a more aggressive processor design?
How would you change the code of an application to avoid false sharing? What might be done by a compiler and what might require programmer directives?
Identify the cache line sharing (true or false) that the code exhibits.
Identify a manual fix you can make to the code to rid it of any false sharing.
If the directory now gets a request for the same cache block from processor P1, what could this mean? What should the directory controller do? (
Modify the directory coherence protocol to use such replacement hints.
Compute the amount of storage needed to record the processor information for the directories, assuming that each directory is fully associative. 
What is the benefit of having such a directory over having no directory at all for a DSM system?
Implement the classical compare-and-swap instruction using the load linked/store conditional instruction pair.
Design such a monitor for a memory system supporting a four-core SMP
Prove that, in a two-level cache hierarchy where L1 is closer to the processor, inclusion is maintained with no extra action if L2 has at least as much associativity as L1, both caches use LRU replacement, and both caches have the same block sizes.

Assuming servers that are 10% faster at the same utilization, but are 20% more expensive, what is the CAPEX for the WSC?
If those servers also use 15% more power, what is the OPEX of the warehouse-scale computer?
If low-power server options offered 15% lower power at the same performance but are 20% more expensive, are they a good trade-off?
If a server operator decided to save power costs by running all servers at medium performance, how many servers would be needed to achieve the same level of performance?
find the performance–power curve that provides a TCO comparable to the baseline server
Estimate how the per-server TCO changes if the nameplate server power is 200 W and the cost is $3000.
Extend the TCO model to initially provision a WSC based on a server with a nameplate power of 300 W, but also calculate the actual monthly critical power used and TCO assuming the server averages 40% utilization and so consumes only 225 W. How much capacity is left unused?
Given the interactive nature of WSCs, what are some of the challenges to aggressively reducing power usage?
Propose one possible way to improve TCO by focusing on reducing server power. What are the challenges to evaluating your proposal? Estimate the TCO improvements based on your proposal.
Discuss scenarios where improving the instruction- or thread-level parallelism would provide greater benefits than those achievable through request-level parallelism.
What are the software design implications of increasing request-level parallelism?
what are the pros and cons of round-robin versus consolidated scheduling in terms of power and cooling costs, performance, and reliability?
What is the expected runtime with 5 nodes? 10 nodes? 100 nodes? 1000 nodes?
What is the runtime if remote accesses are within the same rack 20% of the time? 50% of the time? 80% of the time?
what kind of availability does a 10-node Hadoop cluster have with one-, two-, and three-way replications?
Calculate the time overhead for two- and three-way replications. What if the transaction is executed in-memory and takes 10 μs?

yield rate of a chip
dynamic energy and power
time
clock rate
speedup

memory blocks
cache blocks
cache hierarchy
hit and miss ratio
size of a memory
paging time and size
access time
memory latency
buffer
memory channel
VMs

loop unrolling
clock cycles per loop
compiler scheduler















































Compiler
How to translate strings (lexical analysis)
How to understand statement and expressions (Syntax analysis)

Describe some of the tasks that an assembler needs to perform.
For the block-structured code of Fig. 1.14, assuming the usual static scoping of declarations, give the scope for each of the twelve declarations.

Consider the context-free grammar, Show how the string aa+a* can be generated by this grammar. Construct a parse tree for this string. 
What language is generated by the following grammars?
Construct unambiguous context-free grammars for each of the following languages.
Show that all binary strings generated by the following grammar have values divisible by 3.
Construct a context-free grammar for roman numerals.
Construct a syntax-directed translation scheme that translates arithmetic expressions from infix notation into prefix notation in which anoperator appears before its operands; e.g., -xy is the prefix notation for x - y
Construct a syntax-directed translation scheme that translates roman numerals up to 2000 into integers
Construct a syntax-directed translation scheme to translate postfix arithmetic expressions into equivalent prefix arithmetic expression
Construct recursive-descent parsers, starting with the following grammars:
Extend the lexical analyzer in Section 2.6.5 to recognize the relational operators <, <=, ==, !=, >=, >
The programming language C does not have a boolean type. Show how a C compiler might translate an if-statement into three-address code.

Divide the following C++ program into appropriate lexemes. Which lexemes should get associated lexical values? What should those values be?
Suggest how to divide the following HTML documen into appropriate lexemes
Consult the language reference manuals to determine (i) the sets of characters that form the input alphabet (excluding those that may onlyappear in character strings or comments), (ii) the lexical form of numerical constants, and (iii) the lexical form of identifiers, for each of the followinglanguages
Show how to write a regular expression for a keyword in a caseinsensitive language.
Write regular definitions for the following languages
Write character classes for the following sets of characters
Show that for every regular expression containing repetition operators of this form, there is an equivalent regular expression without repetition operators.
Show how to express any SQL pattern as a regular expression, giventhat we know which character is the escape character.
Provide transition diagrams to recognize the same languages as each of the regular expressions
Construct the failure function for the strings
Apply Algorithm KMP to test whether keyword ababaa is substring of 
Modify the algorithm of Fig. 3.19 to compute the failure function for general tri
Write a Lex program that copies a file, replacing each nonempty sequence of white space by a single blank.
Design finite automata (deterministic or nondeterministic) for each of the languages
For the NFA of Fig. 3.29, indicate all the paths labeled aabb. Does the NFA accept aabb?
Give the transition tables for the NFA of:
Convert to DFA's the NFA's of
use Algorithm 3.22 to simulate the NFA's
Convert the following regular expressions to deterministic finite automata, using algorithms 3.23 and 3.20:
Construct the minimum-state DFA's for the following regular expression

: Consider the context-free gramm
. a) Give a leftmost derivation for the string.
b) Give a rightmost derivation for the string.
c) Give a parse tree for the stri
For each of the following grammars, devise predictive parsers and show the parsing tables.You may left-factor and/or eliminate left-recursionfrom your grammars first
Show that this recursive-descent parser recognizes inputs aa, aaaa, andaaaaaaaa, but not aaaaaa.
Give an algorithm to convert any grammar into an epsilon-free grammar that generates the same language
Show how to convert any grammar into a CNF grammar for the same language
Build an error-correcting predictive parsing table for the grammar
indicate the handle in each of the following right-sentential forms
Give bottom-up parses for the following input strings andgrammars
Describe all the viable prefixes for the following grammars
Construct the SLR sets of items for the (augmented) grammar
Construct the SLR sets of items and their GOTO function. Construct the SLR-parsing table, if one exists.
Draw the transition diagram (NFA) for the valid items of this grammar according to the rule given in the box cited above.
: Construct the a) canonical LR, and b) LALR
compute the collection of LALR sets of items from the kernels of the LR(0) sets of items.
Build an LR parsing table for this grammar, resolving conflicts in the usual way for the dangling-else problem.
Implement error correction by filling in the blank entries in the parsingtable with extra reduce-actions or suitable error-recovery routines
Write a Yacc program that takes boolean expressions as input [as given by the grammar of Exercise 4.2.2(g)] and produces the truth value of the expressions.
Write a Yacc program that tells whether its input is a palindrome (sequence of characters that read the same forward and backward).

For the SDD of Fig. 5.1, give annotated parse trees for the following expressions
What are all the topological sorts for the dependency graph
tell whether (i) the rules are consistent with an S-attributed definition (ii) the rules are consistent with an L-attributed definition, and (iii) whether the rules are consistent with any evaluation order at all?
Design an L-attributed SDD to compute S:val, the decimal-number value of an input string
converts a regular expression into a nondeterministic finite automaton, by an L-attributed SDD on atop-down parsable grammar
Give an SDD to determine the type of each term T and expression E.
Extend your SDD of (a) to translate expressions into postfix notation.
Give an SDD to translate infix expressions with + and  into quivalent expressions without redundant parentheses. 
Rewrite the following SDT so that the underlying grammar becomes non-left-recursive
.5 : Implement each of your SDD's of Exercise 5.4.4 with  LR parser in the style of Section 5

Construct the DAG for the expression
Construct the DAG and identify the value numbers for the subexpressions of the following expressions
Translate the arithmetic expression into a syntax tree, quadruples, Indirect triples
Show how to transform a three-address code sequence int one in which each defined variable gets a unique variable name
Determine the types and relative addresses for the identifiers in the following sequence of declarations
Extend the handling of field names in Fig. 6.18 to classes andsingle-inheritance class hierarchies.
Generalize formula (6.7) to multidimensional arrays, and indicate what values can be stored in the symbol table and used to compute offsets.
Describe an SDD that determines a unique type for each subexpression byusing an attribute type to synthesize a set of possible types bottom-up, and, once the unique type of the overall expression is determined, proceeds top-downto determine attribute unique for the type of each subexpression.
Add rules to the syntax-directed definition of Fig. 6.36 for the following control- ow constructs
Give a translation scheme based on the syntax-directed defnition
Sketch a syntaxdirected definition that produces the list of pairs, while also emitting code for the statements Si that are the actions for each case.

Draw the activation tree when the numbers 9; 8; 7; 6; 5; 4; 3; 2; 1 are sorted.
What is the largest number of activation records that ever appear together on the stack?
What does the stack and its activation records look like the fifth time f(1) is about to return?
To which activation record does the element belong?
Show the stack of activation records that result from a call to main, up until the time that the first call (to fib0(1)) is about to return. Show the access link in each of the activation records on the stack.
what does the free space list look like after satisfying the requests, if the method of selecting chunks is
What happens to the reference counts of the objects when the pointer is deleted
Show the steps of a mark-and-sweep garbage collector 
indicate for each ob ject the sequence of lists onwhich it finds itself from just before garbage collection begins until just after it finishes.
What is the address of each ob ject after garbage collection?
Simulate the entire incremental garbage collection, assuming no more pointers are rewritten. Which ob jects are garbage? Which ob jects are placed on the
Free list?

Generate code for the following three-address statements assuming all variables are stored in memory locations.
Generate code for the following sequence assuming that n is in a memory location:
Determine the costs of the following instruction sequences:
Generate code for the following three-address statements assuming stack allocation where register SP points to the top of the stack.
Generate code for the following three-address statements again assuming stack allocation and assuming a and b are arrays whose elements are 4-byte values
Translate the program into three-address statements of the type we have been using in this section.
Construct the DAG for the basic block
Give the three-address statements (only one addition per statement) for this block.
Use the associative and commutative laws to modify the block to use the fewest possible number of instructions, assuming both x and y are live onexit from the block.
Convert your three-address code from Exercise 8.6.1 into machine code for the machine model of this section
Convert your three-address code from Exercise 8.6.1 into machine code, using the simple code-generation algorithm of this section, assumingthree registers are available.
: Construct an algorithm that will perform redundant-instruction elimination in a sliding peephole on target machine code.
Construct an algorithm that will do simple algebraic simpli-fications and reductions in strength in a sliding peephole on target machine code.
Construct the register-interference graph for the program
Devise a register-allocation strategy on the assumption that we automatically store all registers on the stack before each procedure call andrestore them after the return.
Construct syntax trees for each of the following statements assuming all nonconstant operands are in memory locations
How would you extend tree rewriting to apply to DAG's?
Compute Ershov numbers for the following expressions
Generate optimal code using two registers for each of the express
Generalize the computation of Ershov numbers to expreson trees with interior nodes with three or more chil
How would you modify the treelabeling scheme to generate optimal code for this machine mo
How would you extend dynamic programming to do optimal code generation on DAG's?

Optimize this code by eliminating common subexpressions, performing reduction in strength on induction variables, and eliminatingall the induction variables you can.
compute The gen and kil l sets for each block
compute the def, use, IN, d OUT sets for live variable analysis
Which of the following operations can serve as the meet operation for a semilattice on 
: Construct a lattice diagram for the product of three lattices
 Show that this framework is of finite height but not monotone
What is the appropriate meet operator for this framework?
Give a data structure to represent domain values and an algorithmtoimplement the meet operator.
a) Compute anticipated for the beginning and end of each block.
b) Compute available for the beginning and end of each block.
c) Compute earliest for each block.
d) Compute postponable for the beginning and end of each block.
e) Compute used for the beginning and end of each block.
f ) Compute latest for each block.
g) Introduce temporary variable t; show where it is computed and where it is used.
Develop an algorithm to move partially dead code, so expressions are evaluated only where they will eventually be used.
Compute the dominator relation.
Find the immediate dominator of each node.
iii. Construct the dominator tree.
iv. Find one depth-first ordering for the flow graph.
v. Indicate the advancing, retreating, cross, and tree edges for your answer to iv. 
vi. Is the flow graph reducible?
vii. Compute the depth of the  flow graph.
viii. Find the natural loops of the  flow graph.
Find all the possible regions. You may, however, omit from the list the regions consisting of a single node and no edges.
Show that a flow graph is reducible if and only it can be transformed to a single node using
What happens if you apply node-splitting and T1-T2 reduction alternately, to reduce a complete directed graph of n nodes

classify the dependence as (i) true dependence, (ii) antidependence, (iii) output dependence, or (iv) no dependence (i.e., the instructions can appear in either order):
Give register-level machine code to provide the maximum possible parallelism. If instead of maximizing the parallelism, we minimized the number of registers, how many steps would the computation take? How many steps do we savey using maximal parallelism
What are the data dependences in your machine co
draw the datadependence graph.
Find a shortest schedule for each of the fragments
What are all the critical paths in your graph
Show how to unroll the generic while-loop
Find a shortest possible executionof this fragment
Compute the bounds for each of five other pairs of nodes
Keeping each iteration as tight as possible (i.e., only introduce one nop after each arithmetic operation), unroll the loop twice. Schedule the seconditeration to commence at the earliest possible moment without violating the constraint that the machine can only do one load, one store, one arithmetic operation, and one branch at any clock
Construct fully pipelined code sub ject to the machine constraints
What is the minimum initiation interval for a software pipeliningof this loop on a machine that executes each operation in one clock tick, andhas resources enough to do, in one clock tick
Find the minimum initiation interval and a uniform schedule for the iterations
a) Draw the cyclic dependence graph.
b) Compute the table of longest simple paths among the nodes.
c) Show the lengths of the longest simple paths if the initiation interval T is 2.
e) For T = 3, what are the constraints on the relative times that each of the instructions represented by a, b, c, and d may be scheduled?

 : Convert each of the following loops to a form where the loop indexes are each incremented by 1
 Draw or describe the iteration spaces for each of the following loop nests
Write the constraints implied by each of the loop nests
Reverse each of the loop-nesting orders for the nests
Use the Fourier-Motzkin elimination algorithm to eliminate j from each of the sets of constraints obtained
: For each of the following array accesses, give the vector f and the matrix F that describe them.
Compute the ranks of each of the matrices
Find a basis for the null space of each matrix 
For each of the accesses below, describe the subspaces that refer tothe following single elements of the array
Indicate for each of the following accesses whether it is possible to rewrite the loops so that the access to A exhibits self-spatial reuse; that is, entire cache lines are used consecutively
What condition would assure spatial locality if the arraywere stored in column-major order?
how could you rewrite the loop nest in order to guarantee group-spatial reuse
For the following loop indicate all the
a) True dependences (write followed by read of the same location).
b) Antidependences (read followed by write to the same location).
c) Output dependences (write followed by another write to the same location
Find another solution to the second Diophantine equat
Apply the loop-residue test to the following set of constraints
For the follwing loop
a) What is the largest number of processors that can be used effiectively toexecute this loop?
b) Rewrite the code with processor p as a parameter.
c) Set up and find one solution to the space-partition constraints for this
loop.
d) What is the affine partition of highest rank for this loop?
Rewrite the code as a single, fully permutable loop nest
Use 100 processors in a pipeline to implement this code. Write the code for each processor p, in terms of p, and indicate the synchronization necessary
Perform array contraction on the following vector operations
Stripmine the outer loop into strips with width 10

Use the Datalog rules of this section to infer all possible pts and hpts facts.
Suggest an intraprocedural data-flow analysis that can avoid this kind of inaccuracy
Perform an insensitive analysis on this code.
For the code a) Construct the EDB relations actual, f ormal, and cha. b) Make all possible inferences of pts and hpts facts.
Perform a context sensitive analysis of the code
Extend the Datalog rules of this section to incorporate the type and subtype information 
developa BDD that represents the relation consisting of the tuples (b; b), (c; a), and(b; a). You may order the boolean variables in whatever way gives you the most succinct BDD.
As a function of n, how many nodes are there in the most succinct BDD that represents the exclusive-or function on n variables.
Find algorithms to perform the following relational operations on the ordered BDD's that represent them






Grammar
Syntax directed translation
Parsing tree
lexeme
regex
failure function
finite automata

converting grammars
predictive parser

SDD

DAG

activation tree and record
garbage collector

Generate code for the following three-address statements
Ershov number
optimal code





Determine and describe the large-scale structure and intermediate codes of a com-piler in use in your computing environment. What sections of the compiler are  optionally executed under user control? 

Describe how to translate an XBNF syntax representation into a representation that uses only concatenation. (b) Apply your method to rewrite the XBNF description 
Show that arrays, sets, records, tuples, products, and functions are all "syntactic  sugar" in leAN by describing how to implement them and their operations in a  version of leAN that does not include them 
Adapt your algorithm from the preceding exercise to solve the traveling salesman  problem. That is, return a list of nodes beginning and ending with start that passes  through every node other than start exactly once, or return nil if there is no such  path. 
write an lCAN procedure RTC (R, x, y) to compute its reflexive transitive closure. 

Give examples from real programming languages of as many of the following pairs of scopes and lifetimes as actually occur. 
Write routines to assign stack variables to offsets from the frame pointer (a) in the order given in the symbol table, (b) ordered by the length of the data, longest first,  and (c) ordered shortest first. 
Write register-tracking versions of (a) Sym_to_Reg( ), (b) Reg_to_Sym( ), and (c) Alloc_Reg( ). 
Design an leAN symbol-table entry that includes at least the fields described at the be-ginning of Section 3.2 and write the routines Get_Sym_Attr ( ) and Set_Sym_Attr ( ) In lCAN. 
Design a structure for a local symbol table, using your entry design from the preced-ing exercise, and write leAN implementations of Insert_Sym( ), Locate_Sym( ), Next_Sym ( ), and More_Syms ( ). 

Construct an abstract syntax tree that represents the C function 
Construct a HIR representation of the C function 

Write an efficient LIR routine that moves a byte string from the byte address in register rl to the byte address in r2 with the length in r3. (b) Now assume the C convention that a string is terminated by a null character, i.e., OxOO, and rewrite the routines to move such strings efficiently. 
Determine how one of the compilers in your computing environment divides up register usage. 
Write LIR code that implements the procedure-calling and return handshake, assuming that parameters are passed in registers with a flat register file, 
Write LIR code for the preceding exercise, assuming that parameters are passed in registers with register windowing, 
Devise a language extension to Pascal or a similar language that requires (some) stack frames to be preserved, presumably in heap storage, independent of the origi-nal calling conventions. Why might such a language extension be useful? 
Write a (single) program that demonstrates that all the parameter-passing disciplines are distinct. 
Write sample code for the procedure-calling handshake for a language with call by name. 
Describe and give code examples for an approach to handling shared objects that uses only a GOT and no PLTs. 
Explore the issues involved in supporting a polymorphic language by mixing on-the-fly compilation (discussed briefly in Section 5.8) with interpretation of an interme-diate code. 

Construct the Graham-Glanville parsing tables for the machine-description rules and machine instructions 
Write a chain-loop eliminator that can be used during or after the Graham-Glanville parsing tables have been constructed. 
Read Pelegri-Llopart and Graham's article [PelG88] and write a BURs-based code- generator generator In leAN. 

Construct (a) a depth-first presentation, (b) depth-first ordering, (c) preorder, and (d) postorder of the flowchart nodes 
Write an leAN program to compute the maximal intervals in a reducible flowgraph. 
Write a formal specification of the case/switch schema 
Write a formal specification of the set of natural loops (see Figure 7.36), where a natural loop is defined to be a single-entry, multiple-exit loop, with only a single branch back to the entry from within it. 
Perform structural control-flow analyses of the routines 

What is the complexity in bit-vector or set operations of iteratively computing unidirectional data-flow information using (a) both in( ) and out( ) functions versus (b) using only one of them? 
Give an example of a lattice that is not strongly distributive. 
Give an example of a specific data-flow problem and an instance for which the MOP and MFP solutions are different. 
Evaluate the space and time complexity of associating data-flow information with edges in a flowgraph versus with node entries and exits. 
Formulate the data-flow analysis in Figure 8.4 as a relational problem, as described in UonM81a]. Is the result as good as associating information with edges? What about the computational complexity? 
Research Kennedy's node-listing algorithm [Kenn75] or Farrow, Kennedy, and Zuc- coni's graph-grammar approach [FarK75] to data-flow analysis. 
(a) Formulate a backward data-flow analysis using the structural approach. (b) Show that the iteration over the function lattice to handle an improper region is a forward analysis. 
Suggest alternative representations for structural analysis equations 
Construct the du-chains, ud-chains, and webs for the procedure 
Does Sharlit produce the MOP solution of a data-flow problem? 

(a) What are the dependences between the LIR instructions in the following basic block? (b) Use Build_DAG( ) to construct the scheduling DAG for the block and draw the resulting dependence DAG. 
Research the notion of extending the dependence graph from a basic block to any single-entry, single-exit subgra ph of a flowgra ph that contains no loops. Does this give additional freedom in instruction scheduling? 
What is the iteration-space traversal of the following triply nested HIR loop? 
Given the loop nest in the preceding exercise, what are the execution-order and dependence relationships within it? (a) Write an algorithm that, given a distance vector, produces the minimal depen- dence vector that covers it, where d 1 covers d 2 if and only if any dependence ex- pressed by d 2 is also represented by d l . (b) Do the same thing for direction vectors. 
Give a three-deep loop nest that the GCD test determines independence for. 

Give four examples of program information that are flow sensitive versus flow insensitive and may versus must; 
Construct a C example in which a global variable is accessed by name, by being passed as a parameter, and through a pointer. 
Formulate a flow-insensitive may version of the C aliasing rules given 
What differences in information obtained would result from associating alias infor-mation with node entries rather than flowgraph edges? 
(a) Write an leAN program to do scalar replacement of aggregates. (b) What situa- tions are likely not to benefit from such replacements? (c) How can we guard against their being performed in the algorithm? 
(a) Write a canonicalizer or tree transformer in leAN that accepts a tree and a set of tree-transformation rules and that applies the transformations to the tree until they no longer apply. 
Modify the (a) local and (b) global copy-propagation algorithms to work on ex- tended basic blocks. 
Can copy propagation be expressed in a form analogous to sparse conditional constant propagation? 
Modify the sparse conditional constant-propagation algorithm to use basic blocks in place of individual statement nodes. 

Formulate an algorithm to recognize reductions and to perform loop-invariant code motion on them. Use the function Reductor (opr) to determine whether the operator opr is an operator useful for performing a reduction. 

Formulate identification of induction variables as a data-flow analysis and apply it to the example Write an leAN routine to do elimination of unnecessary bounds checking. 
Extend the linear-function test replacement part of the algorithm in Figure 14.22 to  deal with loop constants that are not compile-time constants. 
(a) Generalize tail-call optimization to discover groups of routines that form a recursive loop, 
Design a compact format for saving the MIR and symbol table generated for a compilation unit to enable cross-compilation-unit procedure integration. 
Write an leAN procedure to do leaf-routine optimization on LIR code, assuming that parameters are passed in registers r1 through r6 and that r7 through r13 are saved by the caller. 

Modify the code in Figure 16.15 to enable one to ensure that instructions that require a register pair for some operand or result are assigned a pair. 
What are the space requirements for the (a) adjacency matrix and (b) adjacency lists for a procedure with w webs? 
Develop the data-flow analysis alluded to in Section 16.3.12 that determines where rematerialization is useful. 

write a sequence of LIR instructions for which using only that heuristic provides the best schedule and one for which it does not. 
Give an example of the use of hierarchical reduction to pipeline a loop that contains an inner loop and an if-then-else construct. 
Give an example of a basic block of LIR code for which register renaming allows a schedule that decreases execution time by at least one-third. 
Give leAN code to expand (a) accumulator and (b) search variables in an unrolled loop. 
Give three examples of useful instruction sequences that can be made more efficient by using conditional moves. 
Show that the dead-code elimination algorithm in Figure 18.19 recognizes and eliminates definitions of sets of variables {VI, V2, V3, . . .} that only contribute to defining each other and hence are not essential. 
Design a pattern language for assembly-language instruction sequences that can be combined or transformed as machine idioms. 
Write a program that searches assembly language for opportunities to use instruction combining and machine idioms represented in the pattern language designed for Exercise 18.6 and that applies them to the code. 

(a) Write a program that includes at least five distinct procedures with calls among them and that includes at least one recursive call. 
(a) Formulate an leAN algorithm to do call-site-specific interprocedural constant- propagation analysis using both jump and return-jump functions 
(a) Construct a C program with at least three routines and at least one global variable and (b) perform site-specific alias analysis on it 
Write an leAN routine that takes a LIR procedure body and annotates its instructions with register-allocation annotations of the sort 

Which of the optimizations discussed in preceding chapters are likely to enhance the effect of procedure sorting 
Which of the optimizations discussed in preceding chapters are likely to enhance the effect of intraprocedural code positioning 
Write an leAN algorithm to perform scalar replacement of array references in a (non- nested) loop that contains only a single basic block. 
Give an example of a loop to which loop distribution applies and an optimization that makes loop distribution inapplicable. 
Give an example of a doubly nested loop for which scalar replacement of array references applies to the inner loop. 
















































OS
How to allocate resources to processes?
How to communicate with hardware?
How to manage storage?

What is the difference between timesharing and multiprogramming systems?
To use cache memory, main memory is divided into cache lines, typically 32 or 64 bytes long. An entire cache line is cached at once. What is the advantage of caching an entire line instead of a single byte or word at a time?
every byte of data read or written was handled by the CPU (i.e., there was no DMA). What implications does this have for multiprogramming?
Give a reason why these instructions are privileged
How much video RAM is needed to support a 25-line × 80-row character monochrome text screen? How much for a 1200 × 900-pixel 24-bit color bitmap? What was the cost of this RAM at 1980 prices ($5/KB)? How much is it now?
What is the difference between kernel and user mode?
A 255-GB disk has 65,536 cylinders with 255 sectors per track and 512 bytes per sector. How many platters and heads does this disk have? calculate the average time it will take to read 400 KB from one sector.
Consider a system that has two CPUs, each CPU having two threads (hyperthreading). Suppose three programs, P0, P1, and P2, are started with run times of 5, 10 and 20 msec, respectively. How long will it take to complete the execution of these programs?
A computer has a pipeline with four stages. Each stage takes the same time to do its work, namely, 1 nsec. How many instructions per second can this machine execute?
If the cache hit rate is 95% and main memory hit rate (after a cache miss) is 99%, what is the average time to access a word?
What is a trap instruction?
Why is the process table needed in a timesharing system?
Is there any reason why you might want to mount a file system on a nonempty directory? If so, what is it?
For each of the following system calls, give a condition that causes it to fail: fork, exec, and unlink.
What type of multiplexing (time, space, or both) can be used for sharing the following resources: CPU, memory, disk, network card, printer, keyboard, and display?
What is the essential difference between a block special file and a character special file?
Modern operating systems decouple a process address space from the machine’s physical memory. Why?
For each of the calls listed as having no Win32 equivalent, what are the consequences for a programmer of converting a UNIX program to run under Windows?
Explain why it is infeasible to build an operating system that is completely portable. Describe two high-level layers that you will have in designing an operating system that is highly portable.
Explain how separation of policy and mechanism aids in building microkernel-based operating systems.
Examine and try to interpret the contents of a UNIX-like or Windows directory with a tool like the UNIX od program

Are there any circumstances in which either or both of the missing transitions might occur?
What information would the CPU need? Describe how the hardware process switching might work.
On all current computers, at least part of the interrupt handlers are written in assembly language. Why?
If the goal is 99% CPU utilization, what is the maximum I/O wait that can be tolerated?
Assume that each process spends 40% of its time waiting for I/O. What will be the CPU utilization?
Why would a thread ever voluntarily give up the CPU by calling thread yield?
Can a thread ever be preempted by a clock interrupt?
How many requests/sec can the server handle if it is single threaded? If it is multithreaded?
What is the biggest advantage of implementing threads in user space?
Write a shell script that produces a file of sequential numbers by reading the last number in the file, adding 1 to it, and then appending it to the file
Assume that you have an operating system that provides semaphores. Implement a message system. Write the procedures for sending and receiving messages.
Write a producer-consumer problem that uses threads and shares a common buffer. However, do not use semaphores or any other synchronization primitives to guard the shared data structures
write a program that tests a list of numbers for primality. Then devise a method to allow multiple instances of the program to run at once in such a way that no two instances of the program will work on the same number.
implement a multithreaded solution to find if a given number is a perfect number. N is a perfect number if the sum of all its factors, excluding itself, is N; examples are 6 and 28
Implement a program to count the frequency of words in a text file.

Write a program that simulates a paging system using the aging algorithm.
Write a program that simulates a toy paging system that uses the WSClock algorithm.
Write a program that demonstrates the effect of TLB misses on the effective memory access time by measuring the per-access time it takes to stride through a large array.
Write a program that will demonstrate the difference between using a local page replacement policy and a global one for the simple case of two processes.  Demonstrate that the page reference string-generation routine behaves properly for some small N.Compute the page fault rate for a small example in which there is one process and a fixed number of page frames. 
Write a program that can be used to compare the effectiveness of adding a tag field to TLB entries when control is toggled between two programs. Describe the basic data structures and algorithms in your implementation. Show that your simulation behaves as expected for a simple (but nontrivial) input
example. Plot the number of TLB updates per 1000 references
For each of the following cases, either give the real (actual) memory address which results from dynamic address translation or identify the type of fault which occurs (either page or protection fault).
What is the maximum number of page faults this instruction can cause?

Write a program that reverses the bytes of a file, so that the last byte is now first and the first byte is now last
Write a program that starts at a given directory and descends the file tree from that point recording the sizes of all the files it finds
Write a program that scans all directories in a UNIX file system and finds and locates all i-nodes with a hard link count of two or more
Write a new version of the UNIX ls program.
Implement a program to measure the impact of application-level buffer sizes on read time.
Implement a simulated file system that will be fully contained in a single regular file stored on the disk

Write a program that simulates stable storage
Write a program to implement the three disk-arm scheduling algorithms. Write a driver program that generates a sequence of cylinder numbers (0–999) at random, runs the three algorithms for this sequence and prints out the total distance (number of cylinders) the arm needs to traverse in the three algorithms.
Write a program to implement multiple timers using a single clock

Program a simulation of the banker’s algorithm
Write a program to implement the deadlock detection algorithm with multiple resources of each type.
Write a program that detects if there is a deadlock in the system by using a resource allocation graph.
Write a program that does not deadlock

Write a C program to find out how much time it takes on a system to which you have access
Write C functions that could be used as client and server stubs to make an RPC call to the standard printf function, and a main program to test the functions
Write a program that implements the sender-initiated and receiver-initiated load balancing algorithms described in Sec. 8.2
Write a multithreaded application that emulates a broker-based pub/sub system. Publisher and subscriber threads may communicate with the broker via shared memory

Write a pair of programs, in C or as shell scripts, to send and receive a message by a covert channel on a UNIX system
Download an implementation of DES from the Internet and write a program that encrypts a password and checks if a password is valid for such a system. Generate a list of 10 encrypted passwords using the Morris-Thomson protection scheme.
Write a set of management functions to manage the ACLs when (1) a new object is created; (2) an object is deleted; (3) a new domain is created; (4) a domain is deleted; (5) new access rights (a combination of r, w, x) are granted to a domain to access an object; (6) existing access rights of a domain to access an object are revoked; (7) new access rights are granted to all domains to access an object; (8) access rights to access an object are revoked
from all domains.
Write a program that emulates overwriting viruses outlined in Sec. 9.9.2 under the heading ‘‘Executable Program Viruses’’

Write a minimal shell that allows simple commands to be started
Using assembly language and BIOS calls, write a program that boots itself from a floppy disk on a Pentium-class computer
Write a dumb terminal program to connect two Linux computers via the serial ports
Write a client-server application which, on request, transfers a large file via sockets. Reimplement the same application using shared memory
Implement a basic user-level threads library to run on top of Linux.
Write a shell script that displays some important system information such as what processes you are running, your home directory and current directory, processor type, current CPU utilization, etc.

Write a UNIX program that simulates writing an NTFS file with multiple streams.

Write a procedure in C to do a double-precision addition on two giv en parameters. Write the procedure using conditional compilation in such a way that it works on 16-bit machines and also on 32-bit machines.
Write programs that enter randomly generated short strings into an array and then can search the array for a given string using (a) a simple linear search (brute force), and (b) a more sophisticated method of your choice. Recompile your programs for array sizes ranging from small to as large as you can handle on your system.
Write a program to simulate an in-memory file system.











Write a console application that prints more information about the system than the HelloWin application shown earlier, by calling the following APIs: GetNativeSystem-Info, GetComputerName, GetWindowsDirectory, QueryPerformanceCounter, GetProductInfo, GetComputerObjectName. Handle errors if they occur.

Write a GUI or console application called MiniProcExp - a mini Process Explorer, that uses either the Toolhelp APIs, WTS APIs or the native API to show information about processes. Anything that is not readily available get by opening a proper handle to the process and using the correct function to get the information. (A basic app is provided in the MinProcExp project).
Extend the previous application by adding operations on processes, such as terminating and changing priority class

Write a tool called MemLimit that accepts a process ID and a number representing the maximum committed memory for the process and set that limit using a job.
Extend JobMon to cover all remaining limits that are not currently implemented, such as I/O and network limits.

Create a WTL dialog-based application that allows counting prime numbers (add edit boxes for number input) in a range of numbers. Perform the calculation on a separate thread so the UI thread is not blocked.
Add a Cancel button to the dialog that allows cancellation of the prime numbers counting mid-flight.
Create a Console application to calculate the Mandelbrot set with multiple threads concurrently, so the calculation is quicker
Extend the application to write the output to a BMP or PPM format (both relatively simple), so the results can be viewed in a paint-like application.
Create a WTL application and calculate the Mandelbrot set with multiple threads without freezing the UI. Add the ability to pan/zoom and recalculate as needed

Create a thread-safe implementation of a stack data structure. If a pop operation cannot succeed, block the thread until data is available (use a condition variable).
Create a system that can run multiple work items concurrently, but some of them may have dependencies on other work items. As a concrete example, think of compiling projects in Visual Studio. The goal is to compile all projects as quickly as possible while adhering to the dependencies. use event objects for flow synchronization.

Use the thread pool to implement the Mandelbrot exercises from chapter 5
Use the thread pool to implement the exercise from chapter 8.

Create a console application that calculates the Mandelbrot set with concrt









Add code to the sample DriverEntry to output the Windows OS version: major, minor and build number. Use the RtlGetVersion function to retrieve the information. Check the results with DebugView.

Create a driver that monitors process creation and allows a client application to configure executable paths that should not be allowed to execute.
Write a driver (or add to the SysMon driver) the ability to detect remote thread creations - threads created in processes other than their own.

Implement a driver that will not allow thread injection into other processes unless the target process is being debugged.
Implement a driver that protects a registry key from modifications. A client can send the driver registry keys to protect or unprotect
Implement a driver that redirects registry write operations coming from selected processes (configured by a client application) to their own private key if they access HKEY_LOCAL_MACHINE.

Write a file system mini-filter that captures delete operations from cmd.exe and instead of deleting them, moves the files to the recycle bin.
Extend the File Backup driver to include multiple backups, limited by some rule, such as file size, date or maximum number of backup copies
Modify the File Backup driver to back up only the changed data instead of the entire file.















Database
How to write, change, query inputs in a database?

List six major steps that you would take in setting up a database for a particular enterprise
List four significant differences between a file-processing system and a DBMS.
List five responsibilities of a database-management system
Explain the concept of physical data independence and its importance in database systems
List at least two reasons why database systems support data manipulation using a declarative query language such as SQL
Explain the difference between two-tier and three-tier application architectures.

What are the appropriate primary keys?
Give examples of inserts and deletes to these relations that can cause a violation of the foreign-key constraint.
Write a relational algebra expression using the division operator to find 
Show how to write the above query in relational algebra, without using division
Describe the differences in meaning between the terms relation and relation schema.
Given your choice of primary keys, identify appropriate foreign keys.

Write the following queries in SQL, using the university schema. 
Write the following inserts, deletes, or updates in SQL, using the university schema
Write SQL DDL corresponding to the schema
List two reasons why null values might be introduced into the database.

Write the same query as in part a, but using a scalar subquery and not using outer join
show how to rewrite each of the following SQL queries without using the outer join expression.
Give instances of relations r, s, and t such that in the result of (r natural left outer join s) natural left outer join t attribute C has a null value but attribute D has a non-null value
Show how to define the view
Give an SQL DDL definition of this database. Identify referential-integrity constraints that should hold, and include them in the DDL definition.
Write an SQL assertion to enforce this constraint
show how to express a natural full outer join b using the full outer-join operation with an on condition rather than using the natural join syntax.
Why do database systems offer so many kinds of authorization?
Why should the user include (or not include) the clause granted by current role in the grant statement?
Express the following query in SQL using no subqueries and no set operations
Show how to express the coalesce function using the case construct
Explain the difference between integrity constraints and authorization constraints.

Write a Java method using JDBC metadata features that takes a ResultSet as an input parameter and prints out the result in tabular form, with appropriate names as column headings.
Describe the circumstances in which you would choose to use embedded SQL rather than SQL alone or only a general-purpose programming language.
Show how to enforce the constraint “an instructor cannot teach two different sections in a semester in the same time slot.” using a trigger
Write triggers to maintain the view, that is, to keep it up-to-date on insertions to depositor or account.
Show how to express group by cube(a, b,c, d) using rollup
What do you need to know about relation r to be able to print the result in the specified tabular format?
Write a recursive SQL query that outputs the names of all subparts of the part with
Describe how the trigger mechanism can be used to implement the on delete cascade option when a tuple is deleted from s.
Modify the recursive query to define relation
write an SQL statement to generate a histogram

Construct an E-R diagram for a car insurance company whose customers own one or more cars each.
Design an E-R diagram for keeping track of the scoring statistics of your favorite sports team
Explain how a constraint on total participation of A in R can be enforced using not null constraints in SQL
Explain how to enforce total participation constraints using complex check constraints or assertions
For entity sets A, B, and C, explain how attributes are inherited from the higherlevel entity sets X and Y 
Convert the E-R diagram discussed above into a set of relations.
Explain the difference between a weak and a strong entity set.
Design a generalization–specialization hierarchy for a motor vehicle sales company
Eplain the distinction between disjoint and overlapping constraints, between total and partial constraints.

Show that this decomposition is a lossless decomposition if the following set F of functional dependencies holds:
List all nontrivial functional dependencies satisfied by the relation 
Use Armstrong’s axioms to prove the soundness of the union rule
Use Armstrong’s axioms to prove the soundness of the pseudotransitivity rule
Compute the closure of the following set F of functional dependencies for relation schema R = (A, B, C, D, E).
List the candidate keys for R
Using the functional dependencies of Exercise 7.6, compute the canonical cover Fc.
write an SQL query to test whether the functional dependency B → C holds on relation r. Also write an SQL assertion that enforces the functional dependency.
What primary and foreign-key constraint do you expect to hold on the decomposed relations?
Show that it is possible to ensure that a dependency-preserving decomposition into 3NF is a lossless decomposition by guaranteeing that at least one schema contains a candidate key for the schema being decomposed.
Show that every 3NF schema is in 2NF
Give an example of a relation schema R and a set of dependencies such that R is in BCNF but is not in 4NF.

Construct an SQL schema definition for this database. Use inheritance where appropriate.
Define the above schema in SQL, using the SQL Server table type syntax from Section 8.2.1.1 to declare multiset attributes.
Give a schema definition in SQL corresponding to the relational schema but using references to express foreign-key relationships.
Compute the relevance (using appropriate definitions of term frequency and inverse document frequency)
Show how to represent the matrices used for computing PageRank as relations. Then write an SQL query that implements one iterative step of the iterative technique for finding PageRank
Redesign the database of Exercise 8.4 into first normal form and fourth normal form. List any functional or multivalued dependencies that you assume. Also
list all referential-integrity constraints that should be present in the first and fourth normal form schemas.

Give a relational schema in third normal form that represents the same information. Recall the constraints on subtables, and give all constraints that must be imposed on the relational schema so that every database instance of the relational schema can also be represented by an instance of the schema with inheritance.

What is the main reason why servlets give better performance than programs that use the common gateway interface (CGI), even though Java programs generally run slower than C or C++ programs?
What is the loophole in this scheme? 
Why is it important to open JDBC connections using the try-with-resources
List three ways in which caching can be used to speed up web server performance.
Suggest an approach for testing an application to find if it is vulnerable to SQL injection attacks on text input.
Can SQL injection occur with forms of HTML input other than text boxes? If so, how would you test for vulnerability?
Write a servlet and associated HTML code for the following very simple application
Write a servlet that authenticates a user (based on user names and passwords stored in a database relation) and sets a session variable called userid after authentication.
Write pseudocode to manage a connection pool.
8 Explain the terms CRUD and REST
List two features each of which reveals if a site uses Ajax, without having to look at the source code.
How can the referer field be used to detect some XSS attacks?
What is multifactor authentication?
Give an SQL query such that the query with the predicate added gives a result that is a subset of the original query result without the added predicate.
Define triggers to create an audit trail, logging the information into a relation called
Can the preceding implementation guarantee that updates made by a malicious database administrator (or someone who manages to get the administrator’s password) will be in the audit trail?
Explain what is a challenge–response system for authentication

Estimate the number of block transfers and seeks required using each of the following join strategies
Describe a way, using sorting, to reduce the cost of retrieving tuples of the inner relation
Write pseudocode for an iterator that implements indexed nested-loop join, where the outer relation is pipelined
Design sort-based and hash-based algorithms for computing the relational division operation
What is the effect on the cost of merging runs if the number of buffer blocks per run is increased while overall memory available for buffering runs remains fixed?
Which choice of demand-driven or producer-driven pipelining (with buffering) would be a good choice for such a query?
Design a variant of the hybrid merge-join algorithm for the case where both relations are not physically sorted, but both have a sorted secondary index on the join attributes.
Explain how to split the hybrid hash-join operator into sub-operators to model pipelining
Describe how the sort operator is broken into suboperators to model the pipelining in this case.

a. Write a query with an equality condition on student.name (which does not have an index), and view the plan chosen.
b. Create an index on the attribute student.name, and view the plan chosen for the above query.
c. Create simple queries joining two relations, or three relations, and view the plans chosen.
d. Create a query that computes an aggregate with grouping, and view the plan chosen.
e. Create an SQL query whose chosen plan uses a semijoin operation.
f. Create an SQL query that uses a not in clause, with a subquery using aggregation. Observe what plan is chosen.
g. Create a query for which the chosen plan uses correlated evaluation (the way correlated evaluation is represented varies by database, but most databases would show a filter or a project operator with a subplan or subquery).
h. Create an SQL update query that updates a single row in a relation. View the plan chosen for the update query
Create an SQL update query that updates a large number of rows in a relation, using a subquery to compute the new value.
Rewrite the preceding query without using a nested subquery; in other words, decorrelate the query, but in SQL.
Give a relational algebra expression using semijoin equivalent to the query.
Show how to derive the following equivalences by a sequence of transformations using the equivalence rules
Give an example of a query that can be answered by using the index only, without looking at the tuples in the relation











Computer network
How to connect 2 computer?
How to connect many computers?
What's the internet? 
How to connect computers wireless?

network topology
Compile and test the TCP daytime client
What value is printed as the client's counter?

We have mentioned IP versions 4 and 6. What happened to version 5 and what were versions 0, 1, 2, and 3?
we said that TCP assumes an MSS of 536 if it does not receive an MSS option from the peer. Why is this value used?
Draw a figure like Figure 2.5 for the daytime client/server assuming the server returns the 26 bytes of data in a single TCP segment.
A connection is established between a host on an Ethernet, whose TCP advertises an MSS of 1,460, and a host on a Token Ring, whose TCP advertises an MSS of 4,096. Neither host implements path MTU discovery. Watching the packets, we never see more than 1,460 bytes of data in either direction. Why?
we said that OSPF uses IP directly. What is the value of the protocol field in the IPv4 header (Figure A.1) for these OSPF datagrams?
If a selective acknowledgment shows that data is acknowledged beyond the cumulative acknowledgment point, why can't the data be freed?

Why must value-result arguments such as the length of a socket address structure be passed by reference?
Why do both the readn and writen functions copy the void* pointer into a char* pointer?
Write a new function named inet_pton_loose that handles these scenarios: If the address family is AF_INET and inet_pton returns 0, call inet_aton and see if it succeeds. Similarly, if the address family is AF_INET6 and inet_pton returns 0, call inet_aton and if it succeeds, return the IPv4-mapped IPv6 address.

we stated that the INADDR_ constants defined by the <netinet/in.h> header are in host byte order. How can we tell this?
Modify Figure 1.5 to call getsockname after connect returns successfully. Print the local IP address and local port assigned to the TCP socket using sock_ntop. In what range (Figure 2.10) are your system's ephemeral ports?

Build the TCP server. Use netstat on the client host to verify that the client's end of the connection goes through the TIME_WAIT state. What is the MSL for this implementation?
What happens with our echo client/server if we run the client and redirect standard input to a binary file?
What is the difference between our echo client/server and using the Telnet client to communicate with our echo server?
Are the final two segments exchanged (a FIN from the client that is ACKed by the server)? If so, when, and if not, why?
What happens in Figures 5.19 and 5.20 if the client is on a SPARC that stores a long in 32 bits, but the server is on a Digital Alpha that stores a long in 64 bits? 

We said that a descriptor set can be assigned to another descriptor set across an equals sign in C. How is this done if a descriptor set is an array of integers?
why did we need the qualifier that the socket had to be nonblocking for a write operation to return a positive value?
add code to allow the server to be able to use as many descriptors as currently allowed by the kernel. 
Why would an application call shutdown with an argument of SHUT_RDWR instead of just calling close?
What happens in Figure 6.22 when the client sends an RST to terminate the connection?
Recode Figure 6.25 to call sysconf to determine the maximum number of descriptors and allocate the client array accordingly.

Write a program that prints the default TCP, UDP, and SCTP send and receive buffer sizes and run it on the systems to which you have access
Many versions of the ping program have a -d flag to enable the SO_DEBUG socket option. What does this do?
Read RFC 1122 [Braden 1989] to determine the recommended intervalfor delayed ACKs












Translate this situation into ISO-ese. 
Give an example of a protocol failure in which the transmitter has a window size of n and the receiver discards packets received out of order. Prove that no problems will occur if the window size is n–1 
Give an example of a protocol failure in which the transmitter has a window size of n/2+1. 
Discuss the trade-offs of providing reliable versus datagram service at the data link layer

Is the address 53-21-ab-41-99-bb a group address? Has it been globally or locally assigned? Show bit-by-bit how it would be stored for transmission on 802.3. Show bitby-bit how it would be stored for transmission on 802.5. 
Assuming that 802.3 is fair (every station gets a chance to transmit if it has data), in what respects does 802.3 differ from a meeting of human beings? 
What is gained by using a group address specific to a particular protocol instead of using the broadcast address and specifying the protocol based on the protocol type field?
Assuming that every protocol uses a separate group address when transmitting multicast packets, why is it necessary to include a protocol type field in the packet header?
What provisions should be made by a request/response protocol involving many packets in the response so that the requester will (with a reasonable probability) receive all the data? 
what provisions can be made in the protocol to ensure that the requester will eventually receive all the replies (so that the same ones don't always get lost)?
Give an example of the destination, source, DSAP, SSAP, and protocol type fields when the station built by organization B transmits an OZ packet to the station built by organization A. 

What problems occur if a bridge's cache is incorrect about the direction in which a station resides? 
Should the bridge overwrite existing entries with new entries before the old entries have timed out, or should the new entries be ignored?
What design decisions in bridge implementation can ensure that the network will recover?
Although this protocol works fine on a LAN, why won't it work when there's a bridge separating A from Z and the intro server?
How does this compare with the topology change notification protocol? Will all incorrect entries be deleted? Will the network's performance be any different if the station cache is completely deleted in one step rather than having the station cache slowly cleansed of incorrect entries by setting the cache timer smaller?
Demonstrate a topology in which the spanning tree can reconfigure without some particular bridge's being aware that the topology has changed. Demonstrate how portions of that bridge's station learning cache can become invalid as a result of that reconfiguration.
What network management commands would you give to the bridge to set up the filtering?
Where would filtering based on source address be useful?
Will filtering based solely on the multicast addresses keep the separate regions segregated with respect to that protocol?
vDiscuss methods (both hardware and software) for organizing the station learning cache to speed the forwarding of packets.
Use this information to devise a simple scheme that two FDDI stations can use to discover whether they can communicate with 4,500-octet packets or 1,500-octet packets
Consider the implications, such as unnecessarily forwarded frames and incorrect cache entries, of each strategy. 
Compare the functionality of n-port bridges with two-port bridges. Can every configuration built with n-port bridges be built with two-port bridges?
If a customer wanted n LANs interconnected and only two-port bridges were available, what configuration of LANs and two-port bridges would you suggest?
Can this modification ever introduce loops (even if multiple events occur in various portions of the network and different root candidates appear)?
Show that this proposal would introduce loops if the Designated Bridge adds the cost of the link into its Hello message—that is, the cost advertised is the cost to the LAN rather than the cost to the bridge.
Show a case in which this change causes a temporary partition when, with the original specification, no such delay was necessary.
In what topologies does this modification speed forwarding of packets?

Suppose that source routing were not allowed to use the multicast bit in the source address to flag that the LAN header contains the routing information field. What other encoding could have been used to signal that the header contains the extra field?
what strategy can an end system use to ensure that packets to a destination will not arrive out of order, even if in the middle of a conversation, the source changes source routes or switches from using transparent packets to using a source route? 
How can it be possible for a destination to be reachable by source routing but for the source routing path to be much worse than the spanning tree path?
An end station that receives an all paths explorer packet giving a route from D could routinely overwrite the existing cache entry for D with the newly received route. Why is that a bad strategy?
Is it a good idea or bad idea for SRT bridges to learn the location of the source address, and forward based on the learned location of the destination address, in each of the following cases? 
How many copies of a spanning tree explorer packet (approximately) would arrive on a typical LAN in a topology in which every LAN had k bridges attached and every bridge had j ports? How many copies would arrive on the LAN from which the source station launched the packet?
Can a bridge have only a single parallel bridge number?
What problems can arise if two LANs are given the same LAN number?
What problems can arise if two bridges between the same pair of LANs are given the same bridge number?
What problems can arise if bridges don't agree about the LAN number? (
Is it necessary for bridges to also check for duplicate LAN numbers when forwarding specifically routed packets?
Write code in your favorite language to handle forwarding of a specifically routed packet (make sure to take into account the direction bit and checking that the output LAN does not appear multiple times).
What happens if an end system launches a specifically routed packet with extra hops following the destination LAN and/or extra hops preceding the source LAN?
What procedure can a bridge B follow to determine whether there is another bridge between the same pair of LANs as B whose bridge number is identical to B's? If B has n ports, how many times would B need to carry out this procedure?
Design several plausible end-system strategies for operation in a network with a mix of TB and SRT bridges and a mix of transparent and source-routing-capable end stations. Can you design two plausible end-station schemes so that an end station using one scheme will fail to establish communication with an end station using a different scheme?
Can the LAN numbers assigned to the LANs in the SR cloud on the left overlap with the LAN numbers assigned to the LANs in the SR cloud on the right?
What is the actual behavior of source routing in a richly connected topology? 
for autoconfiguration of source route bridging—how much overhead is added for registration of LAN numbers? How much overhead is added for registration of parallel bridge numbers? Suggest a way of making parallel bridge number assignment reasonably efficient if a bridge has, say, hundreds of ports. 
In the scheme described in Section 4.6.2, why does the first bridge send the packet as a spanning tree explorer rather than simply sending it to the destination's LAN? 

What is the total aggregate bandwidth in the following cases, assuming that each station sends as quickly as it can? 
2. Why are collisions (as with layer 1 switches) not an issue with a layer 2 switch that is doing cut-through forwarding?
3. Why is it possible to have ports with differing speeds on a layer 2 switch but not on a layer 1 switch?
4. How would you implement cut-through forwarding on a switch if ports are different speeds? What are the issues when forwarding from slow to fast links and from fast to slow links?
5. Why would it be difficult for layer 1 switches (repeaters) to run the spanning tree algorithm?
What are the advantages of running a different instance of the spanning tree for each VLAN instead of running a single spanning tree?

What are the trade-offs between providing reliability at layer 3 versus layer 4?
For each of the following semireliable service variants, propose how a network might provide this service

What is the difference in functionality between flow control performed at the link layer and flow control performed in X.25's network layer?
Design a connection-oriented net so that the VCI remains constant as it travels from source to destination. Compare this approach to having a virtual circuit number with only local significance.
Would it be possible in a connection-oriented network for neighbors to have a different VCI for a particular call in the two directions?
Explain how the call-setup protocol would need to handle this. Would it matter whether R1 chooses the VC number it wants to use when transmitting to R2, or whether it chooses the VC number R2 should use when sending to R1?
Does this arrangement require more memory in the routers for the call database?
Would such a network have the potential for call collisions?
Would it be possible in a connection-oriented network to have different paths in the two directions (A to B and B to A)? What would the call-setup protocol look like? 
What can be said about the sequence number on that data when it is delivered by the destination DCE to the destination DTE?
Compare the strategies in Sections 7.3.1 and 7.3.2 for providing X.25 service to the DTE. Which one is more prone to call hangups? 
What is the purpose of dividing the virtual circuit field into VPI and VCI in ATM?
How much overhead is involved in transmitting a 1,500-byte packet with AAL3/4 versus AAL5? 
The VPI/VCI split in ATM allows two levels of hierarchy. How could you provide more levels of hierarchy?

Discuss the relative merits of the three proposals for discarding partly reassembled packets
Discuss strategies for finding the maximum packet size to the destination in the following cases

With IP addressing (and noncontiguous subnet masks), find two different (value, mask) pairs and an IP address that would match either link
How many bits must be allocated to the mask length? Is an encoding of (mask length, value) more efficient than an encoding of (mask, value)? 
Can you think of anything that can be done with noncontiguous subnet masks that cannot be done without them? 
The rule in IP is that none of the three fields (net, subnet, host) in an IP address is allowed to be all 1's or all 0's. Why does this rule exclude a single-bit host or subnet field?
At $1,250 per OUI, what percentage of Bill Gates's net worth would be consumed by buying up all OUIs?
Compare the addressing schemes of IPv4, IPv6, CLNP, and IPX. Consider ability to autoconfigure, bandwidth use, simplicity, interconnection over public networks, and anything else of importance. 

Give the values of all the appropriate header fields, as a function of what they were in the received packet, as they should be transmitted for each outgoing fragment. Do this for both CLNP and IP
Why is the packet identifier field not needed for X.25?
What does this imply about the algorithm for assigning packet identifiers?
How can a destination reassemble packets without this field? If the field is not necessary, is it useful?
Under what conditions will the router's overwriting of its specified address with its address on the outgoing link not cause the option value to be modified? Draw a picture of a network, specifying the routers' addresses on each link, and give a source route that would not be modified upon reaching the destination. If IP did not specify that routers must overwrite their address on the out-going link, what would happen if the destination attempted to use the specified route (but in reverse order) when reaching the source?
How can a loop be created in CLNP as a result of a router's ignoring the partial source routing option? Why does mandating the implementation of partial source routing in CLNP fix the problem?
If some routers did it this way and others did it the "standard" way (sending all packets to DEST on the same path if the S/D bit was set), would there be any problems with the schemes interworking?
Show how the packet would look if tunneling were used instead of source routing.
When might an IPv4 router add or delete the "end of option list" option?

Argue why the background traffic caused by ARP queries and responses would be more than, less than, or (relatively) equal to the background traffic caused by ESHs
If the link number on which a node resides were standardized to be a recognizable portion of the CLNP address, what changes might be made to the ES-IS protocol?  
Suppose an IP endnode is incorrectly configured and it thinks that its data link address is all 1's, that is, the data link layer "broadcast" address. What happens when someone attempts to transmit a data packet to that node? 
In the case of no router on the LAN, why does DECnet not need to multicast data packets (as CLNP needs to)?
What are the pros and cons of such an LSP distribution scheme? Would using the bridge spanning tree violate the principle that the protocol for distributing routing information must not rely on the routing information?
Under what circumstances is it possible for router A to forward packets for router B through router C even though routers A and B are neighbors? 
What is the worst-case number of distance vector messages that might be generated as a result of a single node's coming up in a network? 
how long will it be from the time D dies to the time R6 knows that D is unreachable if split horizon is used? How about if split horizon is not used?
Will this cause any problems with distance vector routing? How about with link state routing?
Give a topology in which a single link can change many routes. Give a topology in which there is a link that can go down without disrupting any routes
In link state routing, the designated router names the LAN using its ID as part of the name. Why is the DR's ID part of the LAN ID?
why can the first mechanism cause transient loops, whereas the second mechanism does not?
Would you still need an age field? How could you garbage-collect LSPs issued by dead routers? 

Which prefixes should you keep when prefix capture occurs?
Update the structure in Figure 13.1 assuming the following changes to the dictionary. Add prefix 1000. Add prefix 1. Delete prefix 101. Then delete prefix 10100.
What is the worst-case memory expansion required for searching 4 bits at a time?
What prefix length would require adding the most marker prefixes at smaller lengths? What prefix length would require adding the fewest marker prefixes? 
Consider the IP prefix-matching algorithm of Section 13.3.3. What is the worst-case additional memory required? 
Modify the IP prefix-matching algorithm of Section 13.3.3 by checking only for prefix lengths that actually exist. 

Give an algorithm for computing the mask for a particular destination reported in a RIP message.
What should R do in the following events: information about D times out; neighbor M advertises a shorter path to D through M; N advertises a longer path to D than the one R has stored through N? 
Give a procedure for IS-IS for changing the area address of an area from A to B, with routers being configured one-by-one so as to cause minimal disruption to the area.
Give a procedure for IS-IS for splitting an area with area address A into two areas: one with area address A and one with area address B. Routers are configured oneby-one to cause minimal disruption to the area.
Design an automatic mechanism for detecting and repairing level 2 network partitions in IS-IS. 
Suppose that in IS-IS it were impossible to manually configure more than two area addresses into any single level 1 router. Would it then be possible for the area to have more than two area addresses?
In IS-IS, after all LSPs have been propagated through an area, is it possible for two level 1 routers in the area to have different opinions regarding the legal CLNP area addresses for the area?
In IS-IS, why is it necessary for all routers to agree on the value of maximum area addresses? When there are too many area addresses, why is it necessary to specify which subset of the area addresses a router should use?
Is there anything you can do with this variant that you can't do with the NLSP scheme?
Compare the LAN LSP distribution mechanisms in IS-IS and OSPF. Under what conditions would OSPF use less bandwidth?
Compare the memory requirements for storing link state information about IP destinations in OSPF and IS-IS
How would processing of DD packets differ if the sequence of DD packets were treated as a CSNP
What would the router's complete address be?
Come up with a potential BGP attribute that it would make sense to classify as optional and transitive
Give an example involving a single confederation. Give an example involving two confederations, with the constraint that the confederations must be physically intact
Invent a protocol for making distance vector routing reliable when it runs on top of a datagram service
Compare the hierarchies in IS-IS, PNNI, OSPF, and NLSP in terms of costs and benefits.
Why is database overload less serious for PNNI than for other link state protocols?
: Investigate interdomain routing. Compare BGP; a link state scheme combined with source-specified routes; and static routing with alternate paths and source-specified routes. Evaluate them in terms of attributes such as ease of configuration, likelihood of global disruption in the face of malicious or unintentional misconfiguration, range of useful policies that can be supported, bandwidth and memory overhead, and so on. 

Compare the maximum total aggregate bandwidth if everyone transmits all packets to a multicast layer 2 address rather than using unicast layer 2 addresses. What is the maximum aggregate bandwidth if everyone is sending unicast packets versus multicast packets? 
Compare the strategy of having S send n unicast packets, one to each of the n recipients, versus sending a single multicast packet for each data packet in S's data stream. How does multicast affect maximum aggregate bandwidth (considering all conversations going on in this LAN and not just S's data)? How does multicast affect the maximum bandwidth that S's data stream can achieve? 
What are the trade-offs of sending IGMP reply messages to the layer 2 multicast address corresponding to the layer 3 multicast group versus sending the IGMP reply message to a multicast address listened to only by routers? 
What are the trade-offs of having the switch forward based on the layer 2 multicast address derived from G versus looking at the layer 3 header and forwarding based on G?
Compare the overhead of multicast data delivery and the control traffic overhead necessary to support the following
Compare DVMRP, MOSPF, CBT, PIM-SM, MSDP, BGMP/MASC, and the variants of Simple Multicast (including Express) in terms of bandwidth, state, reliability, and so on. 
In DVMRP, what is the purpose of remembering that you received an (S,M) prune from neighbor N? What is the purpose of remembering that you sent an (S,M) prune to neighbor N?

What manual configuration is required in order to install a new node in a network? What if the addition of the new node causes the network to grow beyond the configured parameter N? What manual configuration is required to add a new public key distributor to the network?
Why is self-stabilization a significant defense against saboteurs even if the network cannot withstand Byzantine failures?
Compare the two strategies for dealing with multiple public key distributors ("majority rule" and "believe everything"). Consider such factors as the amount of memory and bandwidth that might be reserved for invalid nodes and the resilience of the network to multiple malicious public key distributor nodes.
In robust flooding, suppose that an ack gets lost. What happens as a result?
If a public key distributor has a Byzantine failure, what problems can it cause? Can such a failure be detected easily?
6. Suppose that a router has a Byzantine failure in its protocol for robust flooding. What problems can it cause? Can this sort of failure be detected easily?
7. Why does a route-setup packet not require a separate flag for each neighbor, as do public key list packets and LSPs? 
































Information theory

Find the entropy H (X) in bits
What is the (general) inequality relationship of H (X) and H (Y )
What is the minimum value of H (p1,...,pn) = H (p) as p ranges over the set of n-dimensional probability vectors?
Show that the entropy of a function of X is less than or equal to the entropy of X
Zero conditional entropy
Conditional mutual information vs. unconditional mutual information.
Find an upper bound on the number of coins n so that k weighings will find the counterfeit coin (if any) and correctly declare it to be heavier or lighter.
A function ρ(x, y) is a metric, Show that ρ(X, Y ) = H (X|Y ) + H (Y|X) satisfies the first, second, and fourth properties above
Find H (X) in terms of H (X1), H (X2), and α
Measure of correlation
Let X1 → X2 → X3 →···→ Xn form a Markov chain in this order. Reduce I (X1; X2,...,Xn) to its simplest form
Evaluate I (X1; X3) for k = 1, and conclude that no dependence can survive such a bottleneck.
Reorder the following ideas, strongest first, implications following
Find the mutual informations
Calculate the average entropy H (p) when the probability p is chosen uniformly in the range 0 ≤ p ≤ 1
Show that in general any transfer of probability that makes the distribution more uniform increases the entropy.
Evaluate Fano’s inequality for this problem and compare.
What is the entropy

How large, to first order in the exponent, is the piece of cake after n cuts?
Assuming that all codewords are the same length, find the minimum length required to provide codewords for all sequences with three or fewer 1’s.
Calculate the probability of observing a source sequence for which no codeword has been assigned.
Use Chebyshev’s inequality to bound the probability of observing a source sequence for which no codeword has been assigned
evaluate the limit of the log likelihood ratio

Show that a stationary distribution µ for a doubly stochastic matrix P is the uniform distribution.
prove that if the uniform distribution is a stationary distribution for a Markov transition matrix P, then P is doubly stochastic.
Find the entropy rate of the two-state Markov chain with transition matrix
Find the entropy rate of the dog. What is the expected number of steps that the dog takes before reversing direction?
Show that the set of constrained sequences is the same as the set of allowed paths on the following state diagram

Uniquely decodable and instantaneous codes
Find a binary Huffman code for X
Find the expected code length for this encoding
Give a good lower bound on the minimum average number of questions required.
Simple optimum compression of a Markov source
Give an example of a random variable for which the expected length of the optimal code is close to H (X) + 1
Show that a suffix condition code is uniquely decodable, and show that the minimum average length over all codes satisfying the suffix condition is the same as the average length of the Huffman code for that random variable.
Show that there exist two different sets of optimal lengths for the codewords
Conclude that there are optimal codes with codeword lengths for some symbols that exceed the Shannon code length 
Construct a binary Huffman code for the following distribution on five symbols
Construct a probability distribution p^i on five symbols for which the code that you constructed in part (a) has an average length (under p^i) equal to its entropy H (p^i).
Find an optimal set of binary codeword lengths l1, l2,... for an instantaneous code for each of the following probability mass functions
Prove or disprove: C has infinite decoding delay
Describe the optimal instantaneous binary code for this source and compute the average codeword length Lm.
Show that the code constructed by this process is prefix-free and that the average length satisfies
Argue that for any node in the tree, the probability of the left child is equal to the probability of the right child.
Give a heuristic argument why the encoded sequence of bits for any code that achieves the entropy bound cannot be compressible and therefore should have an entropy rate of 1 bit per symbol.
Give a simple example where the average length of the nonsingular code is less than the entropy.
What are the lengths of the binary Huffman codewords for X?
What is the smallest integer D such that the expected Shannon codeword length with a D-ary alphabet equals the expected Huffman codeword length with a D-ary alphabet?
Which of the following codeword lengths can be the word lengths of a 3-ary Huffman code?
Give the optimal uniquely decodable code (minimum expected number of symbols) for the probability distribution

What is the optimal strategy to divide your money among the various possible tickets so as to maximize your long-term growth rate?
What is the optimal growth rate that you can achieve in this game?

Find the channel capacity of the following discrete memoryless channel
If pushing a key results in printing the associated letter, what is the capacity C in bits?
What is the highest rate code with block length one that you can find that achieves zero probability of error for the channel?
Show that a cascade of n identical independent binary symmetric channels, each with raw error probability p, is equivalent to a single BSC with error probability
Find the capacity of the Z-channel and the maximizing input probability distribution.
Find a block code that shows that the zero-error capacity is greater than 1 bit.
Calculate the mutual information I (X1, X2; Y1, Y2) as a function of the input distribution on the four possible pairs of inputs.
Calculate H (X), H (Y ), H (X, Y ), and I (X; Y ) for the joint distribution above.
Calculate the crossover probability of this channel.
Find the best code of length 3 with four codewords for this channel. What is the probability of error for this code?
What is the minimum capacity over all choices for the Z alphabet?

Evaluate the differential entropy 

For what value of β does the channel stop acting like a single channel and start acting like a pair of channels?

Show that the optimum reproduction points for 1-bit quantization are and that the expected distortion for 1-bit quantization is 
Find the rate distortion function
Find the rate distortion function for this source with Hamming distortion
Find R(0), the rate necessary to describe the process with zero distortion.

Find the maximum entropy density
Find the maximum entropy spectrum for the processes in parts
What is the maximum entropy distribution p(x, y) that has the following marginals?
Find the maximum entropy rate binary stochastic process
Find a lower bound on the conditional variance
What is the parametric-form maximum entropy density f (x)

Find the the minimax regret
Find the minimum incremental cost of compression

Find the Fisher information for the following families

Find the Kolmogorov complexity of two sequences.
Give a rough estimate of the probability that the computer prints the following sequence
What is an upper bound on the complexity of a pattern on an m × m grid that has mirror-image symmetry about a vertical axis through the center of the grid and consists of horizontal line segments?
What is the (maximal) Kolmogorov complexity of the union of two rectangles on an n × n grid?
What is the Kolmogorov complexity of the encryption map?
Estimate the Kolmogorov complexity of the encrypted text

Find the capacity region.
Evaluate this region for the binary erasure multiple access channel. Compare to the noncooperative region.
Find and sketch the Slepian–Wolf rate region for the simultaneous data compression
What region of rates allows recovery of X, Y with probability of error tending to zero?
(a) Find the capacity region.
(b) Describe a coding scheme that achieves the capacity region.
What is the rate region
What is the maximum throughput 
What is the residual uncertainty (conditional entropy) that the receiver has
Find an expression for the capacity C(r) of a discrete memoryless channel with cost constraint r.

(a) Find the log optimal portfolio b∗.
(b) Find the growth rate W∗.
(c) Find the asymptotic behavior of
Find necessary and sufficient conditions on the distribution
Relate the growth rate W∗(p) to the entropy rate H (p).










Theory of computation

Examine the following formal descriptions of sets so that you understand which members they contain
Write formal descriptions of the following sets
If C is a set with c elements, how many elements are in the power set of C?
give a relation that satisfies the condition.
a. Reflexive and symmetric but not transitive
b. Reflexive and transitive but not symmetric
c. Symmetric and transitive but not reflexive
Draw the graph G. What are the degrees of each node? Indicate a path from node 3 to node 4 on your drawing of G.
Find the error in the following proof that 2 = 1.
Prove the following equalities by induction on n, to arrive at the curious conclusion
Find the error in the following proof that all horses are the same color

The following are the state diagrams of two DFAs, M1 and M2
a. What is the start state?
b. What is the set of accept states?
c. What sequence of states does the machine go through on input aabb?
d. Does the machine accept the string aabb?
e. Does the machine accept the string ε?
Give the formal description of the machines M1 and M2 
In each part, construct DFAs for the simpler languages, then combine them using the construction discussed in footnote 3 (page 46) to give the state diagram of a DFA for the language give
Give state diagrams of DFAs recognizing the following languages
Prove that every NFA can be converted to an equivalent one that has a single accept state.
Give a DFA with five states that recognizes D and a regular expression that generates D
Show that if M is a DFA that recognizes language B, swapping the accept and nonaccept states in M yields a new DFA recognizing the complement of B. 
convert the following two nondeterministic finite automata to equivalent deterministic finite automata.
Give an NFA recognizing the language
Convert this NFA to an equivalent DFA. Give only the portion of the DFA that is reachable from the start state.
Give regular expressions generating the languages
convert the following regular expressions to nondeterministic finite automata.
Show that B is regular
Show that for each n ≥ 1, the language Bn is regular.
Prove that all-NFAs recognize the class of regular languages
Show that the class of regular languages is closed under perfect shuffle.
a. Show that if L is recognized by a DFA with k states, L has index at most k.
b. Show that if the index of L is a finite number k, it is recognized by a DFA with k states.
c. Conclude that L is regular iff it has finite index. Moreover, its index is the size of the smallest DFA recognizing it.

Give parse trees and derivations for each string
show that the class of context-free languages is not closed under intersection.
show that the class of context-free languages is not closed under complementation.
Give context-free grammars that generate the following languages.
Give informal descriptions and state diagrams of pushdown automata for the languages
Give informal English descriptions of PDAs for the languages
Give an informal description of a pushdown automaton that recognizes the language A
Convert the following CFG into an equivalent CFG in Chomsky normal form
Show that the class of context-free languages is closed under the regular operations, union, concatenation, and star
Prove that the language C ∩ R is context free
a. Show that G is ambiguous.
b. Give a new unambiguous grammar for the same language.
What is the minimum value of p that works in the pumping lemma?
a. Give a PDA that recognizes B.
b. Give a CFG that generates B.
Show that the class of CFLs is closed under rotational closure.
Show that every DCFG is an unambiguous CFG
Show that every DCFG generates a prefix-free language

In each of the parts, give the sequence of configurations that M2 enters when started on the indicated input string.
show that a language is decidable iff some nondeterministic Turing machine decides it
Give a formal definition of an enumerator.
a. Can a Turing machine ever write the blank symbol on its tape?
b. Can the tape alphabet Γ be the same as the input alphabet Σ?
c. Can a Turing machine’s head ever be in the same location in two successive steps?
d. Can a Turing machine contain just a single state?
Give implementation-level descriptions of Turing machines that decide the following languages over the alphabet {0,1}.
a. Show that 2-PDAs are more powerful than 1-PDAs
write-once Turing machine. Show that this variant Turing machine model is equivalent to the ordinary Turing machine model
A Turing machine with doubly infinite tape. Show that this type of Turing machine recognizes the class of Turing-recognizable languages.
Turing machine with left reset. Show that Turing machines with left reset recognize the class of Turing-recognizable languages.
Turing machine with stay put instead of left. Show that this Turing machine variant is not equivalent to the usual version. What class of languages do these machines recognize?
Show that a language can be recognized by a deterministic queue automaton iff the language is Turing-recognizable
Show that the collection of decidable languages is closed under the operation of
Show that there is a decidable language C consisting of TM descriptions such that every machine described in B has an equivalent machine in C and vice versa.
Show that a language is decidable iff some enumerator enumerates the language in the standard string order.
Show that single-tape TMs that cannot write on the portion of the tape containing the input string recognize only regular languages
Show that every infinite Turing-recognizable language has an infinite decidable subset.

Consider the problem of determining whether a DFA and a regular expression are equivalent. Express this problem as a language and show that it is decidable
Show that INFINITEDFA is decidable.

Show that EQCFG is co-Turing-recognizable
Find a match in the following instance of the Post Correspondence Problem
Show that ATM is not mapping reducible to ETM.
Show that EQCFG is undecidable
Formulate this problem as a language and show that it is undecidable
Show that BB is not a computable function
Show that the Post Correspondence Problem is decidable over the unary alphabet

Give an example in the spirit of the recursion theorem of a program in a real programming language (or a reasonable approximation thereof ) that prints itself out.
Show that any infinite subset of MINTM is not Turing-recognizable
Show that ATM^i is undecidable relative to ATM.
Describe two different Turing machines
Give a model of the sentence
Show how to compute the descriptive complexity of strings K(x) with an oracle for ATM.
Show that the set of incompressible strings is undecidable.

Which of the following pairs of numbers are relatively prime?
Fill out the table described in the polynomial time algorithm for context-free language recognition 
Is the following formula satisfiable?
Show that P is closed under union, concatenation, and complement.
Analyze the algorithm given on page 185 to show that this language is in P.
Give a polynomial time algorithm to test whether a DFA recognizes a star-closed language
Show that CNF3 is NP-complete.
Formulate this problem as a language and show that this language is NP-complete.
show that all problems in NP are polynomial time reducible to D.
Show that if P = NP, you can factor integers in polynomial time.
Show that if P = NP, a polynomial time algorithm exists that takes an undirected graph as input and finds a largest clique contained in that graph.
Conclude that P != NP implies that NFAs cannot be minimized in polynomial time.
give a polynomial time algorithm that produces a parse tree for a string, given the string and a CFG, if that grammar generates the string.
Show that Z is complete for DP
Show that P is closed under homomorphism iff P = NP.

Show that for any function, the space complexity class SPACE(f(n)) is the same whether you define the class by using the singletape TM model or the two-tape read-only input TM model.
Show that PSPACE is closed under the operations union, complementation, and star.
Show that any PSPACE-hard language is also NP-hard
Show that ADFA ∈ L.
Show that TQBF restricted to formulas where the part following the quantifiers is in conjunctive normal form is still PSPACE-complete.
Show that ANFA is NL-complete
Give an example of an NL-complete context-free language.

Give a circuit that computes the parity function on three input variables and show how it computes on input 011.
Give regular expressions with exponentiation that generate the following languages over the alphabet {0,1}.

Show that a circuit family with depth O(log n) is also a polynomial size circuit family.
Show that 12 is not pseudoprime because it fails some Fermat test
Show that the parity function with n inputs can be computed by a branching program that has O(n) nodes.
Prove that if A ≤L B and B is in NC, then A is in NC.
Show that BPP ⊆ PSPACE
Show that A has size–depth complexity (O(n), O(log n)).
Prove that a language has a polynomial size family of formulas iff it is in NC^1 
give a log-space reduction from CIRCUIT-VALUE to CNFH to conclude that CNFH is P-complete.
Prove that if A is a regular language, a family of branching programs (B1, B2, . . .) exists wherein each Bn accepts exactly the strings in A of length n and is bounded in size by a constant times n.













































Computer Vision

If you are given more than two lines and want to find a point x˜ that minimizes the sum of squared distances to each line,
Show that the line passing through the centroid along the major axis of the covariance ellipsoid (largest eigenvector) minimizes the sum of squared distances to the points.
Why are these two algorithms so apparently different? Are they actually minimizing different objectives?
Write a program that lets you interactively create a set of rectangles and then modify their “pose” (2D transform)
Write a simple viewer for 3D points, lines, and polygons.
Figure out how the focus distance and depth of field indicators on a lens are determined.
Compute and plot the focus distance zo as a function of the distance traveled from the focal length Δzi = f − zi for a lens of focal length f (say, 100mm)
How do the depth of field indicators vary as a function of focal length? Can you reproduce a two-dimensional plot that mimics the curved depth of field lines seen on the lens in Figure 2.20b?
List the common f-numbers and shutter speeds that your camera provides.
Do these form geometric progressions; if so, what are the ratios? How do these relate to exposure values (EVs)?
Can you devise some way to measure exactly how the aperture affects how much light reaches the sensor and what the exact exposure times actually are?
Estimate the amount of noise in your camera by taking repeated shots of a scene with the camera mounted on a tripod
take a scene with constant color regions (such as a color checker chart) and estimate the variance by fitting a smooth function to each color region and then taking differences from the predicted function
Plot your estimated variance as a function of level for each of your color channels separately
Change the ISO setting on your camera; if you cannot do that, reduce the overall light in your scene (turn off lights, draw the curtains, wait until dusk). Does the amount of noise vary a lot with ISO/gain?
you want to adjust the RGB values so that they match along the seam line. Is it necessary to undo the gamma in the color values in order to achieve this?
Devise a simple skin color detector
calculate the xy chromaticity values for each pixel.
Crop the photos or otherwise indicate with a painting tool which pixels are likely to be skin
Calculate a color (chromaticity) distribution for these pixels.
Use your computed distribution to find the skin regions in an image
How sensitive is your algorithm to color balance (scene lighting)?
Does a simpler chromaticity measurement, such as a color ratio (2.116), work just as well?
Describe how you would adjust the RGB values in an image given a sample “white color” of (Rw, Gw, Bw) to make this color neutral (without changing the exposure too much).
Does your transformation involve a simple (per-channel) scaling of the RGB values or do you need a full 3 × 3 color twist matrix (or something else)?
Convert your RGB values to XYZ. Does the appropriate correction now only depend on the XY (or xy) values? If so, when you convert back to RGB space, do you need a full 3 × 3 color twist matrix to achieve the same effect?
If you used pure diagonal scaling in the direct RGB mode but end up with a twist if you work in XYZ space, how do you explain this apparent dichotomy?
infer what the camera is doing when it converts the RAW pixel values to the final color-corrected and gamma-compressed eight-bit JPEG pixel values.
Deduce the pattern in your color filter array from the correspondence between colocated RAW and color-mapped pixel values.
Evaluate the quality of the demosaicing algorithm by taking pictures of challenging scenes which contain strong color edges

Write a simple application to change the color balance of an image by multiplying each color value by a different user-specified constant.
Can you recover what the color balance ratios are between the different settings?
perform the demosaicing yourself (Section 10.3.1) or downsample the image resolution to get a “true” RGB image. Does your camera perform a simple linear mapping between RAW values and the colorbalanced values in a JPEG? 
Most captured images have gamma correction applied to them. Does this invalidate the basic compositing equation (3.8); if so, how should it be fixed?
The additive (pure reflection) model may have limitations. What happens if the glass is tinted, especially to a non-gray hue?
Pull the matte using the difference between each colored pixel and its assumed corresponding background pixel, using one of the techniques
Implement a difference keying algorithm
Compute the mean and variance (or median and robust variance) at each pixel in an “empty” video sequence.
For each new frame, classify each pixel as foreground or background
Compute the alpha channel and composite over a new background
Clean up the image using morphology (Section 3.3.1), label the connected components (Section 3.3.4), compute their centroids, and track them from frame to frame.
Write a variety of photo enhancement or effects filters: contrast, solarization (quantization), etc
Compute the gray level (luminance) histogram for an image and equalize it so that the tones look better
Convert the color image to luminance
Compute the histogram, the cumulative distribution, and the compensation transfer function
Try to increase the “punch” in the image by ensuring that a certain fraction of pixels (say, 5%) are mapped to pure black and white
Limit the local gain f^i(I) in the transfer function.
Compensate the luminance channel through the lookup table and re-generate the color image using color ratios 
Compute the gray level (luminance) histograms for each patch, but add to vertices based on distance (a spline).
Distribute values (counts) to adjacent vertices (bilinear)
3. Convert to CDF (look-up functions).
4. (Optional) Use low-pass filtering of CDFs.
5. Interpolate adjacent CDFs for final lookup
Write down the formulas for computing the padded pixel values ˜f(i, j) as a function of the original pixel values f(k,l) and the image width and height (M,N) for each of the padding modes 
Implement convolution with a separable kernel. Use Pietro Perona’s (1995) technique to approximate convolution as a sum of a number of separable kernelsz
Discuss the following issues with implementing a discrete Gaussian filter
Would it be preferable to take the original signal, interpolate it with a sinc, blur with a continuous Gaussian, then pre-filter with a sinc before re-sampling? Is there a simpler way to do this in the frequency domain?
Would it make more sense to produce a Gaussian frequency response in the Fourier domain and to then take an inverse FFT to obtain a discrete filter?
Implement some softening, sharpening, and non-linear diffusion (selective sharpening or noise removal) filters, such as Gaussian, median,and bilateral
Implement Freeman and Adelson’s (1991) steerable filter algorithm
Implement some (raster-scan) algorithms for city block and Euclidean distance transforms.
Implement one of the connected component algorithms
Threshold or quantize an image to obtain a variety of input labels and then compute the area statistics for the regions that you find.
Use the connected components that you have found to track or match regions in different images or video frames
Prove the properties of the Fourier transform listed in Table 3.1 and derive the formulas for the Fourier transforms listed in Tables 3.2 and 3.3
Estimate the frequency spectrum of your personal photo collection and use it to perform Wiener filtering on a few images with varying degrees of noise.
Collect a few hundred of your images by re-scaling them to fit within a 512 × 512 window and cropping them.
2. Take their Fourier transforms, throw away the phase information, and average together all of the spectra.
3. Pick two of your favorite images and add varying amounts of Gaussian noise, σn ∈ {1, 2, 5, 10, 20} gray levels.
4. For each combination of image and noise, determine by eye which width of a Gaussian blurring filter σs gives the best denoised result.
Compute the Wiener filtered version of all the noised images and compare them against your hand-tuned Gaussian-smoothed images.
Use Wiener filtering to deblur some images
compute the frequency response of the Wiener filter, and compare it to the unsharp mask.
Synthetically blur two of your sample images with Gaussian blur kernels of different radii, add noise, and then perform Wiener filtering.
Repeat the above experiment with a “pillbox” (disc) blurring kernel, which is characteristic of a finite aperture lens (Section 2.2.3). Compare these results to Gaussian blur kernels (be sure to inspect your frequency plots).
Implement several of the low-pass filters presented in Section 3.5.2 and also the discussion of the windowed sinc shown in Table 3.2 and Figure 3.29
Apply your filters to continuously resize an image, both magnifying (interpolating) and minifying (decimating) it; compare the resulting animations for several filters. Use both a synthetic chirp image (Figure 3.65a) and natural images with lots of high-frequency detail
Construct an image pyramid. The inputs should be a grayscale or color image, a separable filter kernel, and the number of desired levels. Implement at least the following kernels: 2 × 2 block filtering; Burt and Adelson’s binomial kernel 1/16(1, 4, 6, 4, 1) (Burt and Adelson 1983a); a high-quality seven- or nine-tap filter.
Write a program that takes as input two color images and a binary mask image and produces the Laplacian pyramid blend of the two images.
Construct the Gaussian pyramid for the two mask images
Multiply each Laplacian image by its corresponding mask and sum the images
Implement one of the wavelet families
Compute the entropy in each band for the different wavelet implementations, assuming a given quantization level. Quantize the wavelet coefficients and reconstruct the original images. Which technique performs better?
After computing the wavelets, suppress small values using coring, i.e., set small values to zero using a piecewise linear or other C0 function
Write the code to do affine and perspective image warps (optionally bilinear as well). Try a variety of interpolants and report on their visual quality
Open an image and deform its appearance in one of the following ways:
1. Click on a number of pixels and move (drag) them to new locations. Interpolate the resulting sparse displacement field to obtain a dense motion field
2. Draw a number of lines in the image. Move the endpoints of the lines to specify their new positions and use the Beier–Neely interpolation algorithm
to get a dense motion field
3. Overlay a spline control grid and move one grid point at a time
4. Have a dense per-pixel flow field and use a soft “paintbrush” to design a horizontal and vertical velocity field.
Prove whether the Beier–Neely warp does or does not reduce to a sparse point-based deformation as the line segments become shorter (reduce to points).
Given a displacement field from the previous exercise, write a forward warping algorithm:
1. Write a forward warper using splatting, either nearest neighbor or soft accumulation
2. Write a two-pass algorithm, which forward warps the displacement field, fills in small holes, and then uses inverse warping
Extend the warping code you wrote in Exercise 3.23 to import two different images and specify correspondences (point, line, or mesh-based) between the two images.
1. Create a morph by partially warping the images towards each other and cross-dissolving
2. Try using your morphing algorithm to perform an image rotation and discuss whether it behaves the way you want it to.
Extend the program you wrote in Exercise 2.2 to import images and let you create a “collage” of pictures.
Extend the viewer you created in Exercise 2.3 to include texture-mapped polygon rendering. Augment each polygon with (u, v, w) coordinates into an image.
Implement at least two of the various image denoising techniques and compare them on both synthetically noised image sequences and real-world (low-light) sequences.
enhance the strength (saturation) of the rainbow.
Draw an arc in the image delineating the extent of the rainbow.
Fit an additive rainbow function (explain why it is additive) to this arc (it is best to work with linearized pixel values), using the spectrum as the cross section, and estimating the width of the arc and the amount of color being added.
Amplify the rainbow signal and add it back into the image, re-applying the gamma function if necessary to produce the final image.
develop a technique to remove the blocking artifacts that occur with JPEG at high compression settings
Because the quantization occurs in the DCT transformed YCbCr space (2.115), it may be preferable to perform the analysis in this space
restore some of the lost high-frequency chrominance signal using one of the better restoration techniques
Write down the graphical model for a non-blind image deblurring problem, i.e., one where the blur kernel is known ahead of time.

Implement one or more keypoint detectors and compare their performance: Laplacian or Difference of Gaussian; Forstner–Harris Hessian; oriented/steerable filter, looking for either second-order high second response or two edges in a window
1. Compute the detections on a sub-octave pyramid and find 3D maxima.
2. Find local orientation estimates using steerable filter responses or a gradient histogramming method.
3. Implement non-maximal suppression, such as the adaptive technique of Brown, Szeliski, and Winder (2005).
4. Vary the window shape and size (pre-filter and aggregation).
Implement one or more descriptors (steered to local scale and orientation) and compare their performance: contrast-normalized patches; SIFT; GLOH; DAISY
Given a pair of curves (histograms) plotting the number of matching and non-matching features as a function of Euclidean distance d as shown in Figure 4.23b, derive an algorithm for plotting a ROC curve (Figure 4.23a)
Write down the equations for the ROC, i.e., TPR(FPR), and the AUC.
After extracting features from a collection of overlapping or distorted images,10 match them up by their descriptors either using nearest neighbor matching or a more efficient matching strategy such as a k-d tree.
See whether you can improve the accuracy of your matches using techniques such as the nearest neighbor distance ratio.
Instead of finding feature points independently in multiple images and then matching them, find features in the first image of a video or image sequence and then re-locate the corresponding points in the next frames using either search and gradient descent or learned feature detectors
Winnow out incorrect matches by estimating a homography (6.19–6.23) or fundamental matrix
Refine the accuracy of your matches using the iterative registration algorithm
Apply your feature tracker to tracking points on a person’s face, either manually initialized to interesting locations such as eye corners or automatically initialized at interest points. (Optional) Match features between two people and use these features to perform image morphing
Implement an edge detector of your choice
Blur the input image a little
Construct a Gaussian pyramid
Subtract an interpolated coarser-level pyramid image from the original resolution blurred imag
count the number of zero crossings along the four edges.
When there are exactly two zero crossings, compute their locations using (4.25) and store these edgel endpoints along with the midpoint in the edgel structure
For each edgel, compute the local gradient by taking the horizontal and vertical differences between the values of S along the zero crossing edges.
Store the magnitude of this gradient as the edge strength and either its orientation or that of the segment joining the edgel endpoints as the edge orientation
Add the edgel to a list of edgels or store it in a 2D array of edgels
Link up the edges computed in the previous exercise into chains and optionally perform thresholding with hysteresis.
1. Store the edgels either in a 2D array (say, an integer image with indices into the edgel list) or pre-sort the edgel list first by (integer) x coordinates and then y coordinates, for faster neighbor finding.
2. Pick up an edgel from the list of unlinked edgels and find its neighbors in both directions until no neighbor is found or a closed contour is obtained. Flag edgels as linked as you visit them and push them onto your list of linked edgels.
Perform hysteresis-based thresholding
Link together contours that have small gaps but whose endpoints have similar orientations.
Find junctions between adjacent contours, e.g., using some of the ideas
Convert a closed contour (linked edgel list) into its arc-length parameterization and use this to match object outlines.
1. Walk along the contour and create a list of (xi, yi, si) triplets, using the arc-length formula
2. Resample this list onto a regular set of (xj , yj , j) samples using linear interpolation of each segment
3. Compute the average values of x and y, i.e., x and y and subtract them from your sampled curve points.
4. Resample the original (xi, yi, si) piecewise-linear function onto a length-independent set of samples
5. Compute the Fourier transform of the curve, treating each (x, y) pair as a complex number.
6. To compare two curves, fit a linear equation to the phase difference between the two curves. 
Prove that the constant phase component corresponds to the temporal shift in s, while the linear component corresponds to rotation.
Write a program to automatically solve a jigsaw puzzle from a set of scanned puzzle pieces
Implement a line simplification algorithm to convert a hand-drawn curve (or linked edge image) into a small set of polylines. Re-render this curve using either an approximating or interpolating spline or Bezier curve
Implement a Hough transform for finding lines in images
Estimate the uncertainty (covariance) in your line fit using uncertainty analysis.
Compute the vanishing points in an image
Perform an uncertainty analysis on your estimated vanishing points

Prove that, in the absence of external forces, a snake will always shrink to a small circle and eventually a single point, regardless of whether first- or secondorder smoothness (or some combination) is used
Implement a snake-based contour tracker
1. Decide whether to use a large number of contour points or a smaller number interpolated with a B-spline.
2. Define your internal smoothness energy function and decide what image-based attractive forces to use.
3. At each iteration, set up the banded linear system of equations
Implement the intelligent scissors (live-wire) interactive segmentation algorithm
Implement one of the region segmentation algorithms described in this chapter
- k-means (Section 5.3.1);
• mixtures of Gaussians (Section 5.3.1);
• mean shift (Section 5.3.2) and Exercise 5.5;
• normalized cuts (Section 5.4);
• similarity graph-based segmentation (Section 5.2.4);
• binary Markov random fields solved using graph cuts (Section 5.5).
Apply your region segmentation to a video sequence and use it to track moving regions from frame to frame. Alternatively, test out your segmentation algorithm on the Berkeley segmentation database
Develop a mean-shift segmentation algorithm for color images
1. Convert your image to L*a*b* space, or keep the original RGB colors, and augment them with the pixel (x, y) locations.
2. For every pixel (L, a, b, x, y), compute the weighted mean of its neighbors using either a unit ball (Epanechnikov kernel) or finite-radius Gaussian, or some other kernel of your choosing
3. Replace the current value with this weighted mean and iterate until either the motion is below a threshold or a finite number of steps has been taken.
4. Cluster all final values (modes) that are within a threshold, i.e., find the connected components. 
5. (Optional) Use a random subset of the pixels as starting points and find which component each unlabeled pixel belongs to, either by finding its nearest neighbor or by iterating the mean shift until it finds a neighboring track of mean-shift values
Use an alternative step size estimation algorithm from the optimization literature to see if you can make the algorithm converge faster.

Take a set of photos of an action scene or portrait (preferably in motor-drive—continuous shooting—mode) and align them to make a composite or flip-book animation.
1. Extract features and feature descriptors 
2. Match your features using nearest neighbor matching with a nearest neighbor distance ratio test (4.18).
3. Compute an optimal 2D translation and rotation between the first image and all subsequent images, using least squares (Section 6.1.1) with optional RANSAC for robustness (Section 6.1.4).
4. Resample all of the images onto the first image’s coordinate frame (Section 3.6.1) using either bilinear or bicubic resampling and optionally crop them to their common area.
5. Convert the resulting images into an animated GIF (using software available from the Web) or optionally implement cross-dissolves to turn them into a “slo-mo” video.
6. (Optional) Combine this technique with feature-based (Exercise 3.25) morphing.
Create the kind of panograph
1. Take a series of interesting overlapping photos.
2. Use the feature detector, descriptor, and matcher to match features among the images
3. Turn each connected component of matching features into a track, i.e., assign a unique index i to each track
4. Compute a global translation for each image
5. Since your matches probably contain errors, turn the above least square metric into a robust metric (6.25) and re-solve your system using iteratively reweighted least squares.
6. Compute the size of the resulting composite canvas and resample each image into its final position on the canvas.
7. Average all of the images, or choose some kind of ordering and implement translucent over compositing (3.8).
8. (Optional) Extend your parametric motion model to include rotations and scale, i.e., the similarity transform
9. (Optional) Write a simple tool to let the user adjust the ordering and opacity, and add or remove images.
10. (Optional) Write down a different least squares problem that involves pairwise matching of images
1. Implement the various alternatives and compare their accuracy on synthetic data, i.e., random 2D point clouds with noisy feature positions.
Replace a picture in a magazine or a book with a different image or video.
Track a Rubik’s cube to implement a 3D joystick/mouse control.
1. Get out an old Rubik’s cube (or get one from your parents).
2. Write a program to detect the center of each colored square.
3. Group these centers into lines and then find the vanishing points for each face.
4. Estimate the rotation angle and focal length from the vanishing points.
5. Estimate the full 3D pose (including translation) by finding one or more 3×3 grids and recovering the plane’s full equation from this known homography using the technique developed by Zhang (2000).
6. Alternatively, since you already know the rotation, simply estimate the unknown translation from the known 3D corner points on the cube and their measured 2D locations using either linear or non-linear least squares.
7. Use the 3D rotation and position to control a VRML or 3D game viewer.
Take an outdoor or indoor sequence from a rotating camera with very little parallax and use it to calibrate the focal length of your camera 
Use a three-dimensional target to calibrate your camera.
1. Construct a three-dimensional calibration pattern with known 3D locations
2. Find the corners, e.g, using a line finder and intersecting the lines.
3. Implement one of the iterative calibration and pose estimation algorithms 
4. Take many pictures at different distances and orientations relative to the calibration target and report on both your re-projection errors and accuracy
Compare the three calibration techniques (plane-based, rotationbased, and 3D-target-based)
Implement a system to measure dimensions and reconstruct a 3D model from a single image of a man-made scene using visible vanishing directions 
1. Find the three orthogonal vanishing points from parallel lines and use them to establish the three coordinate axes (rotation matrix R of the camera relative to the scene).
2. Click on a ground plane point to establish your origin and click on a point a known distance away to establish the scene scale
3. Write a user interface that lets you click on ground plane points to recover their 3D locations.
4. Extend your system to let you draw quadrilaterals in the scene that correspond to axisaligned rectangles in the world
5. (Optional) Warp the pixels enclosed by the quadrilateral using the correct homography  to produce a texture map for each planar polygon.
Implement a plumb-line algorithm to determine the radial distortion parameters.
2. Extract the edges and link them into curves
3. Fit quadratic or elliptic curves to the linked edges using a generalization of the successive line approximation algorithm
4. For each curved segment, fit a straight line and minimize the perpendicular distance between the curve and the line while adjusting the radial distortion parameters.
5. Alternate between re-fitting the straight line and adjusting the radial distortion parameters until convergence.
Use a grid calibration target to determine the radial distortion parameters.
1. Print out a planar calibration target, mount it on a stiff board, and get it to fill your field of view.
2. Detect the squares, lines, or dots in your calibration target.
3. Estimate the homography mapping the target to the camera from the central portion of the image that does not have any radial distortion.
4. Predict the positions of the remaining targets and use the differences between the observed and predicted positions to estimate the radial distortion.
5. (Optional) Fit a general spline model (for severe distortion) instead of the quartic distortion model.
6. (Optional) Extend your technique to calibrate a fisheye lens.
Use the radial distortion estimates for each color channel computed in the previous exercise to clean up wide-angle lens images by warping all of the channels into alignment. (Optional) Straighten out the images at the same time.

Use the calibration pattern you built and tested in Exercise 6.7 to test your triangulation accuracy. As an alternative, generate synthetic 3D points and cameras and add noise to the 2D point measurements.
Use iterative non-linear minimization to improve your initial estimates and report on the improvement in accuracy.
Implement the two-frame E and F matrix estimation techniques , with suitable re-scaling for better noise immunity.
Implement automatic view morphing, i.e., compute two-frame structure from motion and then use these results to generate a smooth animation from one image to the next
Decide how to represent your 3D scene, e.g., compute a Delaunay triangulation of the matched point and decide what to do with the triangles near the border
2. Compute your in-between camera positions and orientations.
3. Warp each triangle to its new location, preferably using the correct perspective projection
Implement the factorization algorithm using point tracks 
Implement uncertainty rescaling
Implement a full bundle adjuster
1. Devise the internal data structures and external file representations to hold your camera parameters (position, orientation, and focal length), 3D point locations (Euclidean or homogeneous), and 2D point tracks (frame and point identifier as well as 2D locations).
2. Use some other technique, such as factorization, to initialize the 3D point and camera locations from your 2D tracks
3. Implement the code corresponding to the forward transformations
4. Take the residual error and compute its derivatives with respect to all the unknown motion and structure parameters, using backward chaining
5. Use a sparse least squares or linear system solver, e.g., MATLAB, SparseSuite, or SPARSKIT (see Appendix A.4 and A.5), to solve the corresponding linearized system, adding a small amount of diagonal preconditioning, as in Levenberg–Marquardt.
6. Update your parameters, make sure your rotation matrices are still orthonormal (e.g., by re-computing them from your quaternions), and continue iterating while monitoring your residual error.
7. (Optional) Use the “Schur complement trick” (7.56) to reduce the size of the system being solved
8. (Optional) Implement your own iterative sparse solver, e.g., conjugate gradient, and compare its performance to a direct method.
9. (Optional) Make your bundle adjuster robust to outliers, or try adding some of the other improvements
Use the results of the previous exercise to superimpose a rendered 3D model on top of video 
Augment the previously developed bundle adjuster to include lines, possibly with known 3D orientations. Optionally, use co-planar sets of points and lines to hypothesize planes and to enforce co-planarity
Design a bundle adjuster that allows for arbitrary chains of transformations and prior knowledge about the unknowns
Compute the camera pose and 3D structure of a scene from an arbitrary collection of photographs
Implement and compare the performance of the following correlation algorithm
1. When do you think that phase correlation will outperform regular correlation or SSD?
Implement a coarse-to-fine direct method for affine and projective image alignment.
Implement patch-based acceleration 
Write a program to stabilize an input video sequence
1. Compute the translation (and, optionally, rotation) between successive frames with robust outlier rejection.
2. Perform temporal high-pass filtering on the motion parameters to remove the lowfrequency component (smooth the motion).
3. Compensate for the high-frequency motion, zooming in slightly (a user-specified amount) to avoid missing edge pixels.
4. (Optional) Do not zoom in, but instead borrow pixels from previous or subsequent frames to fill in.
5. (Optional) Compensate for images that are blurry because of fast motion by “stealing” higher frequencies from adjacent frames.
Compute optical flow (spline-based or per-pixel) between two images
2. Visualize the quality of your results by generating in-between images using frame interpolation
Write a program to automatically morph between pairs of images.
1. Compute the flow both ways
2. For each intermediate (morphed) image, compute a set of flow vectors and which images should be used in the final composition.
3. Blend (cross-dissolve) the images and view with a sequence viewer
Write a program to compute a low-resolution motion field in order to interactively control a simple application 
1. Downsample each image using a pyramid and compute the optical flow (spline-based or pixel-based) from the previous frame.
2. Segment each training video sequence into different “actions” (e.g., hand moving inwards, moving up, no motion) and “learn” the velocity fields associated with each one.
3. Write a recognizer that finds successive actions of approximately the right duration and hook it up to an interactive application
1. Compute accurate per-pixel flow.
2. Determine which pixels in the reference image have good matches with other frames.
3. Either average all of the matched pixels or choose the sharpest image, if trying to compensate for blur. 
4. Devise a fall-back strategy for areas where you don’t think the flow estimates are accurate enough.
Write a program to segment an image into separately moving regions or to reliably find motion boundaries
Decompose into separate layers (Section 8.5) a video sequence of a scene taken with a moving camera:
1. Find the set of dominant (affine or planar perspective) motions, either by computing them in blocks or finding a robust estimate and then iteratively re-fitting outliers.
2. Determine which pixels go with each motion.
3. Construct the layers by blending pixels from different frames.
4. (Optional) Add per-pixel residual flows or depths.
5. (Optional) Refine your estimates using an iterative global optimization technique.
6. (Optional) Write an interactive renderer to generate in-between frames or view the scene from different viewpoints 
7. (Optional) Construct an unwrap mosaic from a more complex scene and use this to do some video editing
Take a video sequence looking through a window (or picture frame) and see if you can remove the reflection in order to better see what is inside.

Take a pair of images, compute a coarse-to-fine affine alignment (Exercise 8.2) and then blend them using either averaging (Exercise 6.2) or a Laplacian pyramid (Exercise 3.20). Extend your motion model from affine to perspective (homography) to better deal with rotational mosaics and planar surfaces seen under arbitrary motion
Extend your feature-based alignment technique from Exercise 6.2 to use a full perspective model and then blend the resulting mosaic using either averaging or more sophisticated distance-based feathering 
1. Estimate the amount of radial distortion by taking some pictures with lots of long straight lines near the edges of the image and then using the plumb-line method 
2. Compute the focal length either by using a ruler and paper
3. Convert each of your images to cylindrical coordinates using
4. Line up the images with a translational motion model using either a direct pixel-based technique, such as coarse-to-fine incremental or an FFT, or a feature-based technique.
5. (Optional) If doing a complete 360◦ panorama, align the first and last images. Compute the amount of accumulated vertical mis-registration and re-distribute this among the images.
6. Blend the resulting images using feathering or some other technique.
Use FFT or phase correlation (Section 8.1.2) to estimate the initial alignment between successive images.
Use feature-based alignment with four-point RANSAC for homographies (Section 6.1.3, Equations (6.19–6.23)) or three-point RANSAC for rotational motions (Brown, Hartley, and Nister 2007 ´ ) to match up all pairs of overlapping images. Merge these pairwise estimates together by finding a spanning tree of pairwise relations. Visualize the resulting global alignment, e.g., by displaying a blend of each image with all other images that overlap it.
Use the initialization from the previous algorithm to perform a full bundle adjustment over all of the camera rotations and focal lengths Optionally, estimate radial distortion parameters as well or support fisheye lenses
Use the results of the previous bundle adjustment to predict the location of each feature in a consensus geometry. Use the difference between the predicted and actual feature locations to correct for small mis-registrations
Choose a compositing surface (Section 9.3.1), e.g., a single reference image extended to a larger plane, a sphere represented using cylindrical or spherical coordinates, a stereographic “little planet” projection, or a cube map.
Compute a feather (distance) map for each warped source image and use these maps to blend the warped images. Alternatively, use Laplacian pyramid blending (Exercise 3.20) or gradient domain blending.
Implement a “PhotoMontage” system in which users can indicate desired or unwanted regions in pre-registered images using strokes or other primitives (such as bounding boxes).

Implement one of the multi-exposure radiometric calibration algorithms
3. Estimate the radiometric response function using one of the techniques cited above.
4. Estimate the high dynamic range radiance image by selecting or blending pixels from different exposures
5. Repeat your calibration experiments under different conditions
7. Develop an interactive viewer to change the exposure of an image based on the average exposure of a region around the mouse
8. Implement a tone mapping operator (Exercise 10.5) and use this to map your radiance image to a displayable gamut.
Determine your camera’s noise level function using either multiple shots or by analyzing smooth regions.
3. Fit a lower envelope to these measurements and use this as your noise level function.
4. (Optional) Using the same images, develop a technique that segments the image into near-constant regions
Compute the deviations for each region from a single image and use them to estimate the NLF
Estimate the amount of vignetting in some of your lenses
3. Analyze the radial gradients (especially in low-gradient regions) and fit the robust means of these gradients to the derivative of the vignetting function
Compute the optical PSF either using a known target (Figure 10.7) or by detecting and fitting step edges
1. Detect strong edges to sub-pixel precision.
2. Fit a local profile to each oriented edge and fill these pixels into an ideal target image, either at image resolution or at a higher resolution
3. Use least squares (10.1) at valid pixels to estimate the PSF kernel K, either globally or in locally overlapping sub-regions of the image.
4. Visualize the recovered PSFs and use them to remove chromatic aberration or de-blur the image.
Implement one of the tone mapping algorithms
Develop an algorithm to combine flash and non-flash photographs to best effect. 
Implement one or more super-resolution algorithms and compare their performance
2. Determine the PSF for the images you are trying to super-resolve
3. Alternatively, simulate a collection of lower-resolution images by taking a high-quality photograph (avoid those with compression artifacts) and applying your own pre-filter kernel and downsampling.
4. Estimate the relative motion between the images using a parametric translation and rotation motion estimation algorithm
5. Implement a basic least squares super-resolution algorithm by minimizing the difference between the observed and downsampled images
6. Add in a gradient image prior, either as another least squares term or as a robust term that can be minimized using iteratively reweighted least squares
7. (Optional) Implement one of the example-based super-resolution techniques, where matching against a set of exemplar images is used either to infer higher-frequency information to be added to the reconstruction 
8. (Optional) Use local edge statistic information to improve the quality of the superresolved image
Develop an algorithm for pulling a foreground matte from natural images
4. Use triangulation matting (Smith and Blinn 1996) to estimate the ground truth opacities α and pre-multiplied foreground colors αF for your objects
5. Implement one or more of the natural image matting algorithms
Extract smoke or shadow mattes from one scene and insert them into another
2. For each pixel, fit a line to the observed color values.
3. If performing smoke matting, robustly compute the intersection of these lines to obtain the smoke color estimate. Then, estimate the background color as the other extremum (unless you already took a smoke-free background image). If performing shadow matting, compute robust shadow (minimum) and lit  maximum) values for each pixel.
4. Extract the smoke or shadow mattes from each frame as the fraction between these two values (background and smoke or shadowed and lit).
Implement one of the texture synthesis or hole filling algorithms
1. Implement the basic Efros and Leung (1999) algorithm
2. Add in the Wei and Levoy (2000) extension of generating the pixels in a coarse-to-fine fashion,
3. Add in the Criminisi, Perez, and Toyama ´ (2004) idea of prioritizing pixels to be filled by some function of the local structure (gradient or orientation strength).
4. Extend any of the above algorithms by selecting sub-blocks in the source texture and using optimization to determine the seam between the new block and the existing image that it overlaps
5. (Optional) Implement one of the isophote (smooth continuation) inpainting algorithms
6. (Optional) Add the ability to supply a target (reference) image (Efros and Freeman 2001) or to provide sample filtered or unfiltered (reference and rendered) images
Implement the Levin, Lischinski, and Weiss(2004) colorization algorithm 
Write an interactive tool that lets you “pick” colors from a modern photo and paint over the old one.

1. Rotate both cameras so that they are looking perpendicular to the line joining the two camera centers c0 and c1
2. Twist the optical axes so that the horizontal axis of each camera looks in the direction of the other camera. 
3. If needed, scale up the smaller (less detailed) image so that it has the same resolution (and hence line-to-line correspondence) as the other image.
Modify your spline-based or optical flow motion estimator from Exercise 8.4 to use epipolar geometry, i.e. to only estimate disparity. (Optional) Extend your algorithm to simultaneously estimate the epipolar geometry (without first using point correspondences) by estimating a base homography corresponding to a reference plane for the dominant motion and then an epipole for the residual parallax (motion).
Reconstruct a surface model from a series of edge images
1. Extract edges and link them
2. Based on previously computed epipolar geometry, match up edges in triplets (or longer sets) of images.
3. Reconstruct the 3D locations of the curves using osculating circles
4. Render the resulting 3D surface model as a sparse mesh, i.e., drawing the reconstructed 3D profile curves and links between 3D points in neighboring images with similar osculating circles.
Implement a plane sweep algorithm
Implement one or more of the matching cost aggregation strategies 
 convolution with a box or Gaussian kernel;
• shifting window locations by applying a min filter
• picking a window that maximizes some match-reliability metric
• weighting pixels by their similarity to the central pixe
Compute the disparity space image (DSI) volume using one of the techniques 
implement one (or more) of the global optimization techniques to compute the depth map. Potential choices include
• dynamic programming or scanline optimization (relatively easy);
• semi-global optimization
• graph cuts using alpha expansions
• loopy belief propagation
Evaluate your algorithm by running it on the Middlebury stereo data sets.
Compute a dense depth map using one of the techniques you developed above and use it (or, better yet, a depth map for each source image) to generate smooth in-between views from a stereo data set.
Extend one of your previous techniques to use multiple input frames (Section 11.6) and try to improve the results you obtained with just two views.
If helpful, try using temporal selection (Kang and Szeliski 2004) to deal with the increased number of occlusions in multi-frame data sets. You can also try to simultaneously estimate multiple depth maps and make them consistent
Implement voxel coloring (Seitz and Dyer 1999) as a simple extension to the plane sweep algorithm
1. Instead of computing the complete DSI all at once, evaluate each plane one at a time from front to back.
2. Tag every voxel whose photoconsistency is below a certain threshold as being part of the object and remember its average (or robust) color
3. Erase the input pixels corresponding to tagged voxels in the input images, e.g., by setting their alpha value to 0 (or to some reduced number, depending on occupancy).
4. As you evaluate the next plane, use the source image alpha values to modify your photoconsistency score, e.g., only consider pixels that have full alpha or weight pixels by their alpha values.
5. If the cameras are not all on the same side of your plane sweeps, use space carving (Kutulakos and Seitz 2000) to cycle through different subsets of source images while carving away the volume from different directions
Use the technique you developed for multi-frame stereo in Exercise 11.8 or a different technique, such as the one described by Goesele, Snavely, Curless et al. (2007), to compute a depth map for every input image. Merge these depth maps into a coherent 3D model, e.g., using Poisson surface reconstruction
Build a silhouette-based volume reconstruction algorithm (Section 11.6.2). Use an octree or some other representation of your choosing.

Grab a series of focused images with a digital SLR set to manual focus (or get one that allows for programmatic focus control) and recover the depth of an object.
1. Take some calibration images, e.g., of a checkerboard, so you can compute a mapping between the amount of defocus and the focus setting.
2. Try both a fronto-parallel planar target and one which is slanted so that it covers the working range of the sensor
4. For each pixel, compute the local sharpness and fit a parabolic curve over focus settings to find the most in-focus setting.
5. Map these focus settings to depth and compare your result to ground truth
Implement the handheld shadow striping system of Bouguet and Perona (1999).
1. Set up two background planes behind the object of interest and calculate their orientation relative to the viewer, e.g., with fiducial marks
3. Estimate each light plane equation from the projections of the cast shadow against the two backgrounds.
4. Triangulate to the remaining points on each curve to get a 3D stripe and display the stripes using a 3D graphics engine.
5. (Optional) remove the requirement for a known second (vertical) plane and infer its location (or that of the light source)
Register two or more 3D datasets using either iterated closest points (ICP) or octree signed distance fields. Apply your technique to narrow-baseline stereo pairs, e.g., obtained by moving a camera around an object, using structure from motion to recover the camera poses, and using a standard stereo matching algorithm.
Merge the datasets that you registered in the previous exercise using signed distance fields
Extract a meshed surface model from the signed distance field using marching cubes and display the resulting model.
Use progressive meshes (Hoppe 1996) or some other technique from Section 12.3.2 to create a hierarchical simplification of your surface model.
Build a 3D interior or exterior model of some architectural structure, such as your house, from a series of handheld wide-angle photographs.
1. Extract lines and vanishing points (Exercises 4.11–4.15) to estimate the dominant directions in each image.
2. Use structure from motion to recover all of the camera poses and match up the vanishing points.
3. Let the user sketch the locations of the walls by drawing lines corresponding to wall bottoms, tops, and horizontal extents onto the images
4. Convert the resulting polygonal meshes into a 3D model (e.g., VRML) and optionally texture-map these surfaces from the images
Combine all of your previously developed techniques to produce a system that takes a series of photographs or a video and constructs a photorealistic texture-mapped 3D model.

Modify your view interpolation algorithm to perform morphs between views of a non-rigid object, such as a person changing expressions.
1. Instead of using a pure stereo algorithm, use a general flow algorithm to compute displacements, but separate them into a rigid displacement due to camera motion and a non-rigid deformation.
2. At render time, use the rigid geometry to determine the new pixel location but then add a fraction of the non-rigid displacement as well.
3. Alternatively, compute a stereo depth map but let the user specify additional correspondences or use a feature-based matching algorithm to provide them automatically.
4. (Optional) Take a single image, such as the Mona Lisa or a friend’s picture, and create an animated 3D view morph
Use a 3D model you created along with the original images to implement a view-dependent texture mapping system.
Extend your view interpolation algorithm (Exercise 13.2) to store more than one depth or color value per pixel (Shade, Gortler, He et al. 1998), i.e., a layered depth image (LDI). Modify your rendering algorithm accordingly. For your data, you can use synthetic ray tracing, a layered reconstructed model, or a volumetric reconstruction
Extend your view interpolation algorithm to handle multiple planes or sprites 
3. Determine a back-to-front order based on expected visibility or add a z-buffer to your rendering algorithm to handle occlusions.
4. Render and composite all of the resulting layers, with optional alpha matting to handle the edges of layers and sprites.
Derive the equations relating regular images to 4D light field coordinates.
1. Determine the mapping between the far plane (u, v) coordinates and a virtual camera’s (x, y) coordinates.
2. Write down a similar transformation for (s, t) to (x, y) coordinates.
3. Prove that if the virtual camera is actually on the (s, t) plane, the (s, t) value depends only on the camera’s optical center and is independent of  x, y).
4. Prove that an image taken by a regular orthographic or perspective camera, i.e., one that has a linear projective relationship between 3D points and (x, y) pixels (2.63), samples the (s, t, u, v) light field along a two-dimensional hyperplane.
Implement a light field or Lumigraph rendering system
2. Write an algorithm to synthesize a new view from this light field, using quadri-linear interpolation of (s, t, u, v) ray samples.
3. Try varying the focal plane corresponding to your desired view
4. Determine a 3D proxy for the objects in your scene. You can do this by running multiview stereo over one of your light fields to obtain a depth map per image.
5. Implement the Lumigraph rendering algorithm, which modifies the sampling of rays according to the 3D location of each surface element.
6. Collect a set of images yourself and determine their pose using structure from motion.
7. Implement the unstructured Lumigraph rendering algorithm
Construct a surface light field and see how well you can compress it.
2. Build a 3D model of the object using a multi-view stereo algorithm that is robust to outliers due to specularities.
3. Estimate the Lumisphere for each surface point on the object.
4. Estimate its diffuse components. Is the median the best way to do this? Why not use the minimum color value? What happens if there is Lambertian shading on the diffuse component?
5. Model and compress the remaining portion of the Lumisphere
6. Study how well your compression algorithm works and what artifacts it produces.
7. (Optional) Develop a system to edit and manipulate your surface light field.
Develop a system to navigate a handheld concentric mosaic.
Capture some videos of natural phenomena, such as a water fountain, fire, or smiling face, and loop the video seamlessly into an infinite length video

Build and test one of the face detectors
2. Generate your own negative examples by finding photographs that do not contain any people.
3. Implement one of the following face detectors (or devise one of your own):
• boosting (Algorithm 14.1) based on simple area features, with an optional cascade of detectors (Viola and Jones 2004);
• PCA face subspace (Moghaddam and Pentland 1997);
• distances to clustered face and non-face prototypes, followed by a neural network or SVM (Osuna, Freund, and Girosi 1997) classifier;
• a multi-resolution neural network trained directly on normalized gray-level patches (Rowley, Baluja, and Kanade 1998a).
4. Test the performance of your detector on the database by evaluating the detector at every location in a sub-octave pyramid
Collect a set of facial photographs and then build a recognition system to re-recognize the same people.
3. Compute the average image and a PCA subspace for the face images
5. Compare each new image to each database image and select the nearest one as the recognized identity. Verify that the distance in PCA space is close to the distance computed with a full SSD (sum of squared difference) measure.
compute separate covariance matrices ΣI and ΣE by looking at differences between all pairs of images
Build separate detectors for these three (or four) kinds of region, either using a subspace (PCA) approach
Build a system that recognizes the most important color areas in common photographs (sky, grass, skin) and color balances the image accordingly. 
Build and test one of the pedestrian detectors
Use the feature detection, matching, and alignment algorithms you developed in Exercises 4.1–4.4 and 9.2 to find matching images given a query image or region (Figure 14.26). Evaluate several feature detectors, descriptors, and robust geometric verification strategies,
Adapt the feature extraction and matching pipeline to category (class) recognition
2. Extract features from each of the training images, quantize them, and compute the tf-idf vectors (bag of words histograms).
3. As an option, consider not quantizing the features and using pyramid matching or using a spatial pyramid for greater selectivity
4. Choose a classification algorithm (e.g., nearest neighbor classification or support vector machine) and “train” your recognizer, i.e., build up the appropriate data structures (e.g., k-d trees) or set the appropriate classifier parameters.
Extend the classification algorithm developed in the previous exercise to localize the objects in an image by reporting a bounding box around each detected object.
Choose one or more of the techniques described in Section 14.4.2 and implement a part-based recognition system
Choose one or more of the techniques described in Section 14.4.3 and implement a simultaneous recognition and segmentation system.
Implement one or more of the context and scene understanding systems
build a classifier based on comparing your test images directly against all of the labeled training images. 

























Deep Learning

Formulate the problem as a learning problem.

Show that the logistic function σ satisfies the inequality
Let S(x) and H(x) denote the bipolar step function and the Heaviside function, respectively. Show that
Show that the softplus function, sp(x), satisfies the following properties:
Show that the softmax function is invariant with respect to addition of constant vectors
Show that the function is a squashing function
Show that any squashing function is a sigmoidal function;

Show that the cross-entropy satisfies the following properties:
Show that the symmetric relative entropy reaches its minimum for p = q, and the minimum is equal to zero.
Verify the nonsymmetry relation
Show that the Shannon entropy can be retrieved from the Renyi entropy
Find the maximum mean discrepancy between p and q.

Show that f is a harmonic function;
Find the maxima and minima for the function f.
Write the gradient descent iteration
Find the Hessian
Write the iteration given by Newton’s formula and compute its limit
Show that the sequence (an)n is bounded from above
Show that the convolution of two Gaussians is also a Gaussian

Show that a single perceptron can learn the Boolean function with x
Show that a perceptron with one Boolean input, x, can learn the negation function. What about the linear neuron?
Show that two finite linearly separable sets A and B can be separated by a perceptron with rational weights
Assume the inputs to a linear neuron are independent and normally distributed, Find the optimal weights
Write the cost function and find the optimal parameters
Use Newton’s method to obtain the optimal parameters of a linear neuron
Explain the equivalence between the linear regression algorithm and the learning of a linear neuron.
Modify the perceptron learning algorithm
Show that the function implements XOR
Show that the XOR function can be implemented by a linear combinations of two perceptrons.
Show that if all input vectors xk have the same length, then the α-LMS algorithm minimizes the mean square error and in this case the updating rule (5.6.6) becomes the gradient descent rule.
Find the weights of a Madaline with two Adaline units which implements the XNOR function.

Draw the multi-perceptron neural network
Can a single perceptron learn the following mapping\
Draw a multi-perceptron neural network that learns the previous mapping. State the weights and biases of all perceptrons in the network.
Write an explicit formula for the output of the multi-perceptron neural network 
(b) Assume the input X is noisy. Discuss the effect of weights regularization on noise removal;
(c) Discuss the choice of the activation function in the noise removal. Which choice will denoise better: the logistic sigmoid or the tangent hyperbolic?
(b) Use backpropagation to find the gradient
State a formula relating the batch size, N, the current iteration, k and the number of epochs, p, during a neural network training.

Show that the family F is uniformly bounded.
(a) Show that the family F is equicontinuous and uniformly bounded;
(b) What can be the application of part (a) for the Adaline neuron?
Show that F is equicontinuous
Show that A is a subalgebra of S

Show that the following relations hold in the generalized derivative sense
Equation (8.1.1) shows that any simple function can be written as a linear combination of Heaviside functions. Find the coefficients ci in terms of αi.
Use Dini’s theorem

Formulate the previous result in terms of machine learning terminology
Show that there is a bounded linear functional L on X
show that there is a unique finite signed Borel measure on [a, b] 
Prove that there is a finite, signed Baire measure
Is the tangent hyperbolic function discriminatory in the L2-sense? What about in the L1-sense?
Show that the function is discriminatory
(a) Write a formula for the output of a two-hidden layer FNN having N1 and N2 number of neurons in the hidden layers, respectively.
(b) Show that the outputs of all possible two-hidden layer FNNs with the same input form a linear space of functions.
(a) Show that if σ is strong discriminatory then it is discriminatory
(b) Assume the activation functions of a two-layer FNN are continuous and strong discriminatory with respect to any signed measure. Show that this FNN can learn any continuous function in C(In).
Show that the metric dμ defined by (9.3.3) satisfies the triangle inequality

Show that a multi-perceptron neural network with one hidden layer and 2 computing units in the hidden layer can implement exactly the XOR function
Show that there is a multi-perceptron neural neural network with one hidden layer that can implement exactly the following mapping:
Draw the network and state the weights and biases of all perceptrons in the network
Write the Irie-Miyake formula for the exponential function
Construct a continuous function f ∈ C[0, 1] that cannot be learned exactly by a neural network with a logistic sigmoid activation function.
Prove a similar result to Lemma 10.6.5 for deep networks with n hidden layers.
Find a simple function c(x), which learns exactly the given data;
Show that there is a neural network, having activation function φ, which can represent the composed function

Show the strict inclusion
Show the identity of sigma-fields
Show that the smallest S-field that contains two measurable sets, A and B has 16 elements and it is given by
How many elements does the S-field generated by three sets have?
Show that: (a) FE1,E2 is a recoverable information;
(b) FE1 is not a maximal recoverable information.
Prove that the input information S(X) is the S-algebra generated by events of the form
(a) Show that L ⊂ L˜.
(b) Formulate a similar result for the case when the neuron is dropped from the lth layer.
(a) Show that L⊂L ˜ ;
(b) Formulate a similar result for the case when the neuron is added to the lth layer.
What is the minimal number of neurons that need to be used in the hidden layer for each of the aforementioned cases?
Show that operator ∨ on sigma-fields is associative, i.e., for any three sigma-fields, F, G, H, we have
Show that the hidden layer of the neural network given by Fig.11.14 a is efficient
Prove that it is not possible to place E between a maximal recovery information field, F, and a minimal non-recovery information field, H, namely, we cannot have the double inclusion
(i) If E is contained into a maximal recoverable information field, then E does not contain any minimal non-recoverable information fields;
(ii) If we assume that E contains a minimal non-recoverable information field, then E is not contained into a maximal recoverable information field.
Show that any subfield of a recoverable information field is also recoverable.

Find the dimension of the associated output manifold. 
Show that the number of hidden layers for which the output manifold has a maximum dimension is
Find the range of the number of hidden neurons, N, for which the network overfits the training data.
Find the range of the number h, for which the network overfits the training data.
Show that v and u are orthogonal in Rn if and only if; Any geodesic in S is a straight line in Rn; S is an affine subspace of Rn;
Show that the length and energy of a curve are invariant under curve parametrizations.
(a) Find the embedding curvature of the 2-dimensional unit sphere, S2, in the 3-dimensional Euclidean space, R3
Consider the model combination of two sigmoid neurons. Write the output of the combination and specify the dimension of the associated output manifold.
List a few effects of dropping neurons from a network on the associated output manifold

If G is an n×n symmetric matrix, show that G = On (the n-dimensional zero matrix).
(a) Find the Fisher metric of a sigmoid neuron with the activation function
Find the Fisher metric coefficients for a one-hidden layer neural network with the activation function
(a) Show that ˆμ(x1,...,xn) is an unbiased estimator of the mean, μ;
(b) Find the Fisher information of X;
(c) Show that ˆμ(x1,...,xn) is Fisher-efficient.
Construct a Fisher-efficient estimator for the parameter λ
Show that the information contained in X about μ is the sum of the information of each individual variable about μ, i.e., I(X) = N I(X), where I denotes the Fisher information of a one-dimensional random variable.
Prove that the Fisher information contained in the pair (X1, X2) is the sum of individual Fisher informations

Explain this procedure in the light of a max-pooling process.
(a) Assume all layers of a neural network are max-pooling layers. Show that the final output of the net is the largest input.
(b) Assume all layers of a neural network are average-pooling layers. Show that the final output of the net is the average of the input
(c) If all layers of a neural network are min-pooling layers, show that the final output of the net is the min of the input.
(a) Show that the network output change if we switch the order of these pooling layers.
(b) Does the result still hold if the min-pooling layer is replaced by an averagepooling layer?

1 Compute the following matrix convolution:
Show that the convolution of an image with the 3 × 3 kernel emphasizes horizontal edge detection. (b) Show that the convolution with the transpose kernel, KT , filters the vertical edges.
Show that the convolution of an image with the following 3 × 3 kernels blur the image a) (box blur) b) (Gaussian blur)
Show arguments supporting that the effect of convolution with these kernels is edge detection.
Write a 3 × 3 kernel which does this operation.
9 If one would like to regularize the CNN given in Fig. 16.7, in which layer should the dropout technique be used?
Explain why between two networks with the same input and the same depth and width, a CNN is less prone to overfitting than a fully-connected neural network.

Find the equations of the backpropagation through time algorithm in this case.
Find the hidden state of the system in the long run
Show that the long run behavior of the dynamical system depends on the parameter θ and initial state h0.

(a) Show that S is a transitive relation;
(b) Is S an equivalence relation?
Show that k points are in a general position if an only if there is a unique (k − 1)-hyperplane containing the points.
Show that there is a unique affine function
(a) Show that hull(G) is a convex set;
(b) Prove that hull(G) is the smallest convex set in Rn which contains G;
Show that Φ(G1) and Φ(G2) are linearly separable. In other words, affine functions preserve linear separability.

(i) Write the system update.
(ii) Write the system state (xn, yn) in terms of (x0, y0).
(iii) Is the sequence (xn, yn) convergent?
(i) Write the differential system of the learning dynamics given by the simultaneous gradient decent with infinitesimal learning rate and solve for the learning trajectory.
(ii) Show that there is no equilibrium solution.
(iii) Show that if the divergence of the learning flow is zero, then there are no equilibrium points along that flow.
Show that the optimum discriminator satisfies

show that the Boltzmann machine can learn exactly the distribution q if and only if
(a) Prove that the Boltzmann distribution is a fixed point for Pt
Find the explicit formula for the Fisher information matrix in the case of a Boltzmann machine with 2 neurons.
(a) Show that the hidden states, hj ∈ H, are conditional independent given the visible states;
(c) Compute the conditional log-likelihood function
provide a learning rule for the weights and biasses





























Machine learning

Show that the coefficients w = {wi} that minimize this error function are given by the solution to the following set of linear equations
Write down the set of coupled linear equations, analogous to (1.122), satisfied by the coefficients wi which minimize the regularized sum-of-squares error function
Verify that, in the case of a linear transformation, the location of the maximum transforms in the same way as the variable itself.
Show that if two variables x and y are independent, then their covariance is zero
Show that this estimator has the property that its expectation is given by the true variance σ^2.
if the decision regions of a two-class classification problem are chosen to minimize the probability of misclassification, this probability will satisfy
What is the interpretation of this form of loss matrix?
Derive the criterion for minimizing the expected loss when there is a general loss matrix and general prior probabilities for the classes.
Find the decision criterion that will give the minimum expected loss. Verify that this reduces to the reject criterion
show that the function y(x) that minimizes the expected squared loss for the case of a vector t of target variables is again given by the conditional expectation of t.
Evaluate the Kullback-Leibler divergence (1.113) between two Gaussians
Show that the differential entropy of this pair of variables satisfies

Verify that the Bernoulli distribution (2.2) satisfies the following properties
Show that the entropy H[x] of a Bernoulli distributed random binary variable x is given by
Show that the distribution (2.261) is normalized, and evaluate its mean, variance, and entropy.
show that the binomial distribution is normalized
Show that the mean of the binomial distribution is given by
prove that the beta distribution, given by (2.13), is correctly normalized
how that the mean, variance, and mode of the beta distribution (2.13) are given respectively by
Show that the posterior mean value of x lies between the prior mean and the maximum likelihood estimate for µ
show that the posterior mean can be written as λ times the prior mean plus (1 − λ) times the maximum likelihood estimate
prove the normalization of the Dirichlet distribution (2.38) using induction
derive the following results for the mean, variance, and covariance of the Dirichlet distribution 
demonstrate that the multivariate distribution with maximum entropy, for a given covariance, is a Gaussian.
show that the maximum likelihood distribution is given by the Gaussian
Show the entropy of the multivariate Gaussian
Derive an expression for the differential entropy of the variable
show that the anti-symmetric term does not appear in the exponent of the Gaussian, and hence that the precision matrix may be taken to be symmetric without loss of generality.
show that the eigenvalues λi are real
Show that a real, symmetric matrix Σ having the eigenvector equation (2.45) can be expressed as an expansion in the eigenvectors, with coefficients given by the eigenvalues, of the form (2.48)
Show that a necessary and sufficient condition for Σ to be positive definite is that all of the eigenvalues λi of Σ, defined by (2.45), are positive.
Show that the inverse of a symmetric matrix is itself symmetric.
show that the volume contained within the hyperellipsoid corresponding to a constant Mahalanobis distance ∆ is given by
Using the partitioned matrix inversion formula (2.76), show that the inverse of the precision matrix (2.104) is given by the covariance matrix
Use the results (2.109) and (2.110) to find an expression for the marginal distribution p(y) by considering the linear-Gaussian model comprising the product of the marginal distribution p(x) and the conditional distribution p(y|x).
find expressions for the mean and covariance of the marginal distribution p(y) in which the variable x has been integrated out.
find expressions for the mean and covariance of the conditional distribution p(x|y)
find the maximum likelihood solution for the covariance matrix of a multivariate Gaussian
derive an expression for the sequential estimation of the variance of a univariate Gaussian distribution, by starting with the maximum likelihood expression. Verify that substituting the expression for a Gaussian distribution into the RobbinsMonro sequential estimation formula (2.135) gives a result of the same form
dissect out the contributions from the first N − 1 data points and hence obtain expressions for the sequential update
infer the mean µ from a set of observations X, find the corresponding posterior distribution p(µ|X)
show that the gamma distribution (2.146) is normalized.
Show that the posterior distribution is also a Gaussian-gamma distribution of the same functional form as the prior
Verify that the Wishart distribution defined by (2.155) is indeed a conjugate prior for the precision matrix of a multivariate Gaussian.
show by exchanging integration variables that the multivariate t-distribution is correctly normalized.
show that as m → ∞, the von Mises distribution tends to a Gaussian
Express the beta distribution (2.13), the gamma distribution (2.146), and the von Mises distribution (2.179) as members of the exponential family (2.194) and thereby identify their natural parameters.
Verify that the multivariate Gaussian distribution can be cast in exponential family form
Using a Lagrange multiplier to enforce the normalization constraint on the density, derive an expression for the maximum likelihood estimator for the {hi}.
Show that the K-nearest-neighbour density model defines an improper distribution whose integral over all space is divergent.

Show that the ‘tanh’ function and the logistic sigmoid function (3.6) are related. Hence show that a general linear combination of logistic sigmoid functions of the form. find expressions to relate the new parameters {u1,...,uM} to the original parameters {w1,...,wM}
Show that the matrix takes any vector v and projects it onto the space spanned by the columns of Φ
Find an expression for the solution w* that minimizes this error function. Give two alternative interpretations of the weighted sum-of-squares error function in terms of (i) data dependent noise variance and (ii) replicated data points.
show that minimizing ED averaged over the noise distribution is equivalent to minimizing the sum-of-squares error for noise-free input variables with the addition of a weight-decay regularization term, in which the bias parameter w0 is omitted from the regularizer.
Show that the maximum likelihood solution WML for the parameter matrix W has the property that each column is given by an expression of the form (3.15), which was the solution for an isotropic noise distribution. 
Show that the predictive distribution p(t|x, t) for the model discussed in Exercise 3.12 is given by a Student’s t-distribution of the form
Show that the evidence function for the Bayesian linear regression model can be written in the form (3.78) 
By completing the square over w, show that the error function (3.79) in Bayesian linear regression can be written in the form (3.80).
Show that the integration over w in the Bayesian linear regression model gives the result (3.85). Hence show that the log marginal likelihood is given by (3.86).
verify all of the steps needed to show that maximization of the log marginal likelihood function (3.86) with respect to α leads to the re-estimation equation (3.92).
Prove this identity by considering the eigenvalue expansion of a real, symmetric matrix A, and making use of the standard results for the determinant and trace of A expressed in terms of its eigenvalues 
Show that the marginal probability of the data, in other words the model evidence, for the model described in Exercise 3.12 is given by

. Show that if their convex hulls intersect, the two sets of points cannot be linearly separable, and conversely that if they are linearly separable, their convex hulls do not intersect.
Show that as a consequence of this constraint, the elements of the model prediction y(x) given by the least-squares solution (4.17) also satisfy this constraint
show that if multiple linear constraints are satisfied simultaneously by the target vectors, then the same constraints will also be satisfied by the least-squares prediction of a linear model
Show that maximization of the class separation criterion given by (4.23) with respect to w, using a Lagrange multiplier to enforce the constraint wTw = 1, leads to the result that w ∝ (m2 − m1).
show that the Fisher criterion (4.25) can be written in the form (4.26).
show that the expression (4.33) that minimizes the sum-of-squares error function can be written in the form (4.37).
Show that the logistic sigmoid function (4.59) satisfies the property
derive the result (4.65) for the posterior class probability in the two-class generative model with Gaussian densities, and verify the results (4.66) and (4.67) for the parameters w and w0.
show that the maximum-likelihood solution for the prior probabilities is given by
Show that the maximum likelihood solution for the mean of the Gaussian distribution for class Ck is given by
show that the maximum likelihood solution for the shared covariance matrix is given by
Show that the quantities ak given by (4.63), which appear in the argument to the softmax function describing the posterior class probabilities, are linear functions of the components of φ
Verify the relation (4.88) for the derivative of the logistic sigmoid function defined by (4.59)
show that the derivative of the error function (4.90) for the logistic regression model is given by (4.91).
Show that for a linearly separable data set, the maximum likelihood solution for the logistic regression model is obtained by finding a vector w whose decision boundary wTφ(x)=0 separates the classes and then taking the magnitude of w to infinity.
Show that the Hessian matrix H for the logistic regression model, given by (4.97), is positive definite.
show that the error function is a concave function of w and that it has a unique minimum.
show that the gradients of the cross-entropy error are given
Write down expressions for the gradient of the log likelihood, as well as the corresponding Hessian matrix, for the probit regression model
Show that the Hessian matrix for the multiclass logistic regression problem, defined by (4.110), is positive semidefinite.
Show that the probit function (4.114) and the erf function (4.115) are related 
derive the expression (4.137) for the log model evidence under the Laplace approximation.

Show that there exists an equivalent network, which computes exactly the same function, but with hidden unit activation functions given by tanh(a) where the tanh function is defined
Show that maximizing the likelihood function under the conditional distribution (5.16) for a multioutput neural network is equivalent to minimizing the sum-of-squares error function (5.11).
write down an expression for the maximum likelihood solution for Σ. 
write down the error function corresponding to the negative log likelihood.
Show that maximizing likelihood for a multiclass neural network model in which the network outputs have the interpretation is equivalent to the minimization of the cross-entropy error function 
Show the derivative of the error function (5.21) with respect to the activation ak for an output unit having a logistic sigmoid activation function satisfies
Derive the corresponding result for the ‘tanh’ activation function 
Derive the corresponding error function 
Show that the contours of constant error are ellipses whose axes are aligned with the eigenvectors ui, with lengths that are inversely proportional to the square root of the corresponding eigenvalues λi.
show that the necessary and sufficient condition for the stationary point to be a local minimum of the error function is that the Hessian matrix H, 
Derive an alternative formalism for finding the Jacobian based on forward propagation equations.
write down the equations for the derivatives of the error function with respect to these additional parameters.
Derive the expression (5.85) for the outer product approximation to the Hessian matrix for a network having a single output with a logistic sigmoid output-unit activation function and a cross-entropy error function, corresponding to the result (5.84) for the sum-of-squares error function.
Derive an expression for the outer product approximation to the Hessian matrix for a network having K outputs with a softmax output-unit activation function and a cross-entropy error function, corresponding to the result (5.84) for the sum-ofsquares error function.
Extend the expression (5.86) for the outer product approximation of the Hessian matrix to the case of K > 1 output units
Extend the results of Section 5.4.5 for the exact Hessian of a two-layer network to include skip-layer connections that go directly from inputs to outputs.
Discuss how the standard backpropagation algorithm must be modified in order to ensure that such constraints are satisfied when evaluating the derivatives of an error function with respect to the adjustable parameters in the network
Write down a pair of equations that express the Cartesian coordinates (x1, x2) for the robot arm s
Derive the result (5.157) for the derivative of the error function with respect to the network output activations controlling the component variances in the mixture density network.
derive the predictive distribution (5.172) for the Laplace approximation to the Bayesian neural network model.
Make use of the Laplace approximation result (4.135) to show that the evidence function for the hyperparameters α and β in the Bayesian neural network model can be approximated by (5.175).
derive the result (5.183) for the marginal likelihood in the case of a network having a cross-entropy error function and logistic-sigmoid output-unit activation function.

Show that the solution for the components an of the vector a can be expressed as a linear combination of the elements of the vector φ(xn).
formulate the nearest-neighbour classifier for a general nonlinear kernel.
Find an example of the converse property, namely a 2 × 2 matrix with positive eigenvalues yet that has at least one negative element.
Verify the results (6.13) and (6.14) for constructing valid kernels
Show that an excellent choice of kernel for learning a function
show that the Gaussian kernel (6.23) can be expressed as the inner product of an infinite-dimensional feature vector.
Show that the Fisher kernel, defined by (6.33), remains invariant if we make a nonlinear transformation of the parameter vector θ → ψ(θ), where the function ψ(·) is invertible and differentiable.
show that a positivedefinite kernel function k(x, xi) satisfies the Cauchy-Schwartz inequality
how that the value of w that minimizes J(w) takes the form of a linear combination of the basis functions 
Use the calculus of variations to minimize this error function with respect to the function y(x), and hence show that the optimal solution is given by an expansion of the form (6.40) in which the basis functions are given by (6.41).
Write down expressions for the conditional density p(t|x) and for the conditional mean E[t|x] and variance var[t|x], in terms of the kernel function k(x, xn).
show that optimal solution for y(x) is given by a Nadaraya-Watson kernel regression solution of the form (6.45) with a kernel of the form
Show that the predictive distribution is identical to the result (3.58) obtained in Section 3.3.2 for the Bayesian linear regression model. 
Derive an expression for the joint predictive distribution
Show that a diagonal matrix W whose elements satisfy 0 < Wii < 1 is positive definite. Show that the sum of two positive definite matrices is itself positive definite.
Using the Newton-Raphson formula (4.92), derive the iterative update formula (6.83) for finding the mode a N of the posterior distribution in the Gaussian process classification model.
derive the expressions (6.87) and (6.88) for the mean and variance of the posterior distribution p(aN+1|tN ) in the Gaussian process classification mode
Derive the result (6.90) for the log likelihood function in the Laplace approximation framework for Gaussian process classification. Similarly, derive the results (6.91), (6.92), and (6.94) for the terms in the gradient of the log likelihood.

Write down the minimum misclassification-rate decision rule assuming the two classes have equal prior probability. Show also that, if the kernel is chosen to be k(x, x ) = xTx, then the classification rule reduces to simply assigning a new input vector to the class having the closest mean. Finally, show that, if the kernel takes the form k(x, x ) = φ(x)Tφ(x ), that the classification is based on the closest mean in the feature space φ(x).
Show that, if the 1 on the right-hand side of the constraint (7.5) is replaced by some arbitrary constant γ > 0, the solution for the maximum margin hyperplane is unchanged.
Show that, irrespective of the dimensionality of the data space, a data set consisting of just two data points, one from each class, is sufficient to determine the location of the maximum-margin hyperplane.
Show that the value ρ of the margin for the maximum-margin hyperplane is given by
show that the negative log likelihood, with the addition of a quadratic regularization term, takes the form
show that the dual Lagrangian is given by (7.61).
Verify the results (7.82) and (7.83) for the mean and covariance of the posterior distribution over weights in the regression RVM.
Derive the result (7.85) for the marginal likelihood function in the regression RVM, by performing the Gaussian integral over w in (7.84) using the technique of completing the square in the exponential.
Extend this approach by inclusion of hyperpriors given by gamma distributions of the form (B.26) and obtain the corresponding re-estimation formulae for α and β by maximizing the corresponding posterior probability p(t, α, β|X) with respect to α and β.
Derive the result (7.90) for the predictive distribution in the relevance vector machine for regression. 
Show that the gradient vector and Hessian matrix of the log posterior distribution (7.109) for the classification relevance vector machine are given by (7.110) and (7.111).
Verify that maximization of the approximate log marginal likelihood function (7.114) for the classification relevance vector machine leads to the result (7.116) for re-estimation of the hyperparameters.

show that the representation (8.5) for the joint distribution of a directed graph is correctly normalized, provided each of the conditional distributions is normalized
show that the property of there being no directed cycles in a directed graph follows from the statement that there exists an ordered numbering of the nodes such that for each node there are no links going to a lower-numbered node.
Evaluate the distributions p(a), p(b|c), and p(c|a) corresponding to the joint distribution
Draw a directed probabilistic graphical model corresponding to the relevance vector machine 
Show that this can be interpreted as a ‘soft’ (probabilistic) form of the logical OR function
show that the mean and covariance of the joint distribution for the graph
Using the d-separation criterion, show that the conditional distribution for a node x in a directed graph, conditioned on all of the nodes in the Markov blanket, is independent of the remaining variables in the graph.
Show that a ⊥⊥ b | ∅. Suppose we now observe the variable d.  Show that in general a⊥  ⊥ b | d.
Show that there are 2M(M−1)/2 distinct undirected graphs over a set of M distinct random variables
Consider the use of iterated conditional modes (ICM) to minimize the energy function given by (8.42). Write down an expression for the difference in the values of the energy associated with the two states of a particular variable xj , with all other variables held fixed, and show that it depends only on quantities that are local to xj in the graph.
Consider the inference problem of evaluating p(xn|xN ) for the graph shown in Figure 8.38, for all nodes n ∈ {1,...,N − 1}. Show that the message passing algorithm discussed in Section 8.4.1 can be used to solve this efficiently, and discuss which messages are modified and in what way
Show that a distribution represented by a directed tree can trivially be written as an equivalent distribution over the corresponding undirected tree. Also show that a distribution expressed as an undirected tree can, by suitable normalization of the clique potentials, be written as a directed tree. Calculate the number of distinct directed trees that can be constructed from a given undirected tree.
Apply the sum-product algorithm derived in Section 8.4.4 to the chain-ofnodes model discussed in Section 8.4.1 and show that the results (8.54), (8.55), and (8.57) are recovered as a special case.
Show how the sum-product algorithm can be used to compute the marginal distribution over that subset.
Show that the marginal p(xi) can also be written as the product of the incoming message along any one of the links with the outgoing message along the same link.
Define a procedure for using the sumproduct algorithm to evaluate this joint distribution in which one of the variables is successively clamped to each of its allowed values.
Show that if the graph has one or more cycles, there will always be at least one pending message irrespective of how long the algorithm runs.
Show that if the sum-product algorithm is run on a factor graph with a tree structure (no loops), then after a finite number of messages have been sent, there will be no pending messages.

Show that as a consequence of there being a finite number of possible assignments for the set of discrete indicator variables rnk, and that for each such assignment there is a unique optimum for the {µk}, the K-means algorithm must converge after a finite number of iterations.
Apply the Robbins-Monro sequential estimation procedure described in Section 2.3.5 to the problem of finding the roots of the regression function given by the derivatives of J in (9.1) with respect to µk. Show that this leads to a stochastic K-means algorithm in which, for each data point xn, the nearest prototype µk is updated using (9.5)
Show that the marginal distribution p(x), obtained by summing p(z)p(x|z) over all possible values of z, is a Gaussian mixture of the form (9.7)
Derive the EM equations for maximizing the likelihood function under such a model
Verify that maximization of the complete-data log likelihood (9.36) for a Gaussian mixture model leads to the result that the means and covariances of each component are fitted independently to the corresponding group of data points, and the mixing coefficients are given by the fractions of points in each group.
Show that the conditional density p(xb|xa) is itself a mixture distribution and find expressions for the mixing coefficients and for the component densities.
show that a mixture of Bernoulli distributions, with its parameters set to values corresponding to a maximum of the likelihood function, has the property that
Show that if we maximize the expected complete-data log likelihood function (9.55) for a mixture of Bernoulli distributions with respect to µk, we obtain the M step equation (9.59).
Derive the EM algorithm for maximizing the posterior probability p(µ,π|X).
derive the E and M step equations of the EM algorithm for optimizing the mixing coefficients πk and the component parameters µkij of this distribution by maximum likelihood
derive the M step equations (9.67) and (9.68) for re-estimating the hyperparameters of the relevance vector machine for regression
Derive M-step formulae for updating the covariance matrices and mixing coefficients in a Gaussian mixture model when the responsibilities are updated incrementally, analogous to the result (9.78) for updating the means




KNN classifier on shuffled MNIST data: Run mnist1NNdemo and verify that the misclassification rate (on the first 1000 test cases) of MNIST of a
1-NN classifier is 3.8%. (If you run it all on all 10,000 test cases, the error rate is 3.09%.) Modify the code so that you first randomly permute the features (columns of the training and test design matrices), as in shuffledDigitsDemo, and then apply the classifier. Verify that the error rate is not changed.
Approximate KNN classifiers: Use the Matlab/C++ code at http://people.cs.ubc.ca/~mariusm/index.php/FLANN/FLANN to perform approximate nearest neighbor search, and combine it with mnist1NNdemo to classify the MNIST data set. How much speedup do you get, and what is the drop (if any) in accuracy?
CV for KNN: Use knnClassifyDemo to plot the CV estimate of the misclassification rate on the test set









1. How would you define Machine Learning?
2. Can you name four types of problems where it shines?
3. What is a labeled training set?
4. What are the two most common supervised tasks?
5. Can you name four common unsupervised tasks?
6. What type of Machine Learning algorithm would you use to allow a robot to walk in various unknown terrains?
7. What type of algorithm would you use to segment your customers into multiple groups?
8. Would you frame the problem of spam detection as a supervised learning prob‐lem or an unsupervised learning problem?
9. What is an online learning system?
10. What is out-of-core learning?
11. What type of learning algorithm relies on a similarity measure to make predic‐ tions?
12. What is the difference between a model parameter and a learning algorithm’s hyperparameter?
13. What do model-based learning algorithms search for? What is the most common strategy they use to succeed? How do they make predictions?
14. Can you name four of the main challenges in Machine Learning?
15. If your model performs great on the training data but generalizes poorly to new instances, what is happening? Can you name three possible solutions?
16. What is a test set, and why would you want to use it?
17. What is the purpose of a validation set?
18. What is the train-dev set, when do you need it, and how do you use it?
19. What can go wrong if you tune hyperparameters using the test set?

1. Try a Support Vector Machine regressor (sklearn.svm.SVR) with various hyper‐ parameters, such as kernel="linear" (with various values for the C hyperpara‐ meter) or kernel="rbf" (with various values for the C and gamma hyperparameters). Don’t worry about what these hyperparameters mean for now. How does the best SVR predictor perform?
2. Try replacing GridSearchCV with RandomizedSearchCV.
3. Try adding a transformer in the preparation pipeline to select only the most important attributes.
4. Try creating a single pipeline that does the full data preparation plus the final prediction.
5. Automatically explore some preparation options using GridSearchCV

1. Try to build a classifier for the MNIST dataset that achieves over 97% accuracy on the test set
2. Write a function that can shift an MNIST image in any direction (left, right, up, or down) by one pixel.5 Then, for each image in the training set, create four shif‐ ted copies (one per direction) and add them to the training set. Finally, train your best model on this expanded training set and measure its accuracy on the test set.
3. Tackle the Titanic dataset. A great place to start is on Kaggle.
4. Build a spam classifier (a more challenging exercise):
• Download examples of spam and ham from Apache SpamAssassin’s public
datasets.
• Unzip the datasets and familiarize yourself with the data format.
• Split the datasets into a training set and a test set.
• Write a data preparation pipeline to convert each email into a feature vector.
Your preparation pipeline should transform an email into a (sparse) vector that
indicates the presence or absence of each possible word. For example, if all
emails only ever contain four words, “Hello,” “how,” “are,” “you,” then the email
“Hello you Hello Hello you” would be converted into a vector [1, 0, 0, 1]
(meaning [“Hello” is present, “how” is absent, “are” is absent, “you” is
present]), or [3, 0, 0, 2] if you prefer to count the number of occurrences of
each word.
You may want to add hyperparameters to your preparation pipeline to control
whether or not to strip off email headers, convert each email to lowercase,
remove punctuation, replace all URLs with “URL,” replace all numbers with
“NUMBER,” or even perform stemming (i.e., trim off word endings; there are
Python libraries available to do this).
Finally, try out several classifiers and see if you can build a great spam classi‐
fier, with both high recall and high precision.

1. Which Linear Regression training algorithm can you use if you have a training set with millions of features?
2. Suppose the features in your training set have very different scales. Which algo‐ rithms might suffer from this, and how? What can you do about it?
3. Can Gradient Descent get stuck in a local minimum when training a Logistic Regression model?
4. Do all Gradient Descent algorithms lead to the same model, provided you let them run long enough?
5. Suppose you use Batch Gradient Descent and you plot the validation error at every epoch. If you notice that the validation error consistently goes up, what is likely going on? How can you fix this?
6. Is it a good idea to stop Mini-batch Gradient Descent immediately when the vali‐dation error goes up?
7. Which Gradient Descent algorithm (among those we discussed) will reach the vicinity of the optimal solution the fastest? Which will actually converge? How can you make the others converge as well?
8. Suppose you are using Polynomial Regression. You plot the learning curves and you notice that there is a large gap between the training error and the validation error. What is happening? What are three ways to solve this?
9. Suppose you are using Ridge Regression and you notice that the training error and the validation error are almost equal and fairly high. Would you say that the model suffers from high bias or high variance? Should you increase the regulari‐ zation hyperparameter α or reduce it?
10. Why would you want to use: 
a. Ridge Regression instead of plain Linear Regression (i.e., without any regula‐ rization)?
b. Lasso instead of Ridge Regression?
c. Elastic Net instead of Lasso?
11. Suppose you want to classify pictures as outdoor/indoor and daytime/nighttime. Should you implement two Logistic Regression classifiers or one Softmax Regres‐ sion classifier?
12. Implement Batch Gradient Descent with early stopping for Softmax Regression (without using Scikit-Learn).

1. What is the fundamental idea behind Support Vector Machines?
2. What is a support vector?
3. Why is it important to scale the inputs when using SVMs?
4. Can an SVM classifier output a confidence score when it classifies an instance? What about a probability?
5. Should you use the primal or the dual form of the SVM problem to train a model on a training set with millions of instances and hundreds of features?
6. Say you’ve trained an SVM classifier with an RBF kernel, but it seems to underfit the training set. Should you increase or decrease γ (gamma)? What about C?
7. How should you set the QP parameters (H, f, A, and b) to solve the soft margin linear SVM classifier problem using an off-the-shelf QP solver?
8. Train a LinearSVC on a linearly separable dataset. Then train an SVC and a SGDClassifier on the same dataset. See if you can get them to produce roughly the same model.
9. Train an SVM classifier on the MNIST dataset. Since SVM classifiers are binary classifiers, you will need to use one-versus-the-rest to classify all 10 digits. You may want to tune the hyperparameters using small validation sets to speed up the process. What accuracy can you reach?
10. Train an SVM regressor on the California housing dataset

1. What is the approximate depth of a Decision Tree trained (without restrictions)
on a training set with one million instances?
2. Is a node’s Gini impurity generally lower or greater than its parent’s? Is it gener‐
ally lower/greater, or always lower/greater?
3. If a Decision Tree is overfitting the training set, is it a good idea to try decreasing
max_depth?
4. If a Decision Tree is underfitting the training set, is it a good idea to try scaling
the input features?
5. If it takes one hour to train a Decision Tree on a training set containing 1 million
instances, roughly how much time will it take to train another Decision Tree on a
training set containing 10 million instances?
6. If your training set contains 100,000 instances, will setting presort=True speed
up training?
7. Train and fine-tune a Decision Tree for the moons dataset by following these
steps:
a. Use make_moons(n_samples=10000, noise=0.4) to generate a moons dataset.
b. Use train_test_split() to split the dataset into a training set and a test set.
186 | Chapter 6: Decision Trees
c. Use grid search with cross-validation (with the help of the GridSearchCV
class) to find good hyperparameter values for a DecisionTreeClassifier.
Hint: try various values for max_leaf_nodes.
d. Train it on the full training set using these hyperparameters, and measure
your model’s performance on the test set. You should get roughly 85% to 87%
accuracy.
8. Grow a forest by following these steps:
a. Continuing the previous exercise, generate 1,000 subsets of the training set,
each containing 100 instances selected randomly. Hint: you can use ScikitLearn’s ShuffleSplit class for this.
b. Train one Decision Tree on each subset, using the best hyperparameter values
found in the previous exercise. Evaluate these 1,000 Decision Trees on the test
set. Since they were trained on smaller sets, these Decision Trees will likely
perform worse than the first Decision Tree, achieving only about 80%
accuracy.
c. Now comes the magic. For each test set instance, generate the predictions of
the 1,000 Decision Trees, and keep only the most frequent prediction (you can
use SciPy’s mode() function for this). This approach gives you majority-vote
predictions over the test set.
d. Evaluate these predictions on the test set: you should obtain a slightly higher
accuracy than your first model (about 0.5 to 1.5% higher). Congratulations,
you have trained a Random Forest classifier!

1. If you have trained five different models on the exact same training data, and
they all achieve 95% precision, is there any chance that you can combine these
models to get better results? If so, how? If not, why?
2. What is the difference between hard and soft voting classifiers?
3. Is it possible to speed up training of a bagging ensemble by distributing it across
multiple servers? What about pasting ensembles, boosting ensembles, Random
Forests, or stacking ensembles?
4. What is the benefit of out-of-bag evaluation?
5. What makes Extra-Trees more random than regular Random Forests? How can
this extra randomness help? Are Extra-Trees slower or faster than regular Ran‐
dom Forests?
6. If your AdaBoost ensemble underfits the training data, which hyperparameters
should you tweak and how?
7. If your Gradient Boosting ensemble overfits the training set, should you increase
or decrease the learning rate?
8. Load the MNIST data (introduced in Chapter 3), and split it into a training set, a
validation set, and a test set (e.g., use 50,000 instances for training, 10,000 for val‐
idation, and 10,000 for testing). Then train various classifiers, such as a Random
Forest classifier, an Extra-Trees classifier, and an SVM classifier. Next, try to com‐
bine them into an ensemble that outperforms each individual classifier on the
validation set, using soft or hard voting. Once you have found one, try it on the
test set. How much better does it perform compared to the individual classifiers?
9. Run the individual classifiers from the previous exercise to make predictions on
the validation set, and create a new training set with the resulting predictions:
each training instance is a vector containing the set of predictions from all your
classifiers for an image, and the target is the image’s class. Train a classifier on
this new training set. Congratulations, you have just trained a blender, and
together with the classifiers it forms a stacking ensemble! Now evaluate the
ensemble on the test set. For each image in the test set, make predictions with all
your classifiers, then feed the predictions to the blender to get the ensemble’s pre‐
dictions. How does it compare to the voting classifier you trained earlier?

1. What are the main motivations for reducing a dataset’s dimensionality? What are
the main drawbacks?
2. What is the curse of dimensionality
3. Once a dataset’s dimensionality has been reduced, is it possible to reverse the
operation? If so, how? If not, why?
4. Can PCA be used to reduce the dimensionality of a highly nonlinear dataset?
5. Suppose you perform PCA on a 1,000-dimensional dataset, setting the explained
variance ratio to 95%. How many dimensions will the resulting dataset have?
6. In what cases would you use vanilla PCA, Incremental PCA, Randomized PCA,
or Kernel PCA?
7. How can you evaluate the performance of a dimensionality reduction algorithm
on your dataset?
8. Does it make any sense to chain two different dimensionality reduction algo‐
rithms?
9. Load the MNIST dataset (introduced in Chapter 3) and split it into a training set
and a test set (take the first 60,000 instances for training, and the remaining
10,000 for testing). Train a Random Forest classifier on the dataset and time how
long it takes, then evaluate the resulting model on the test set. Next, use PCA to
reduce the dataset’s dimensionality, with an explained variance ratio of 95%.
Train a new Random Forest classifier on the reduced dataset and see how long it
takes. Was training much faster? Next, evaluate the classifier on the test set. How
does it compare to the previous classifier?
10. Use t-SNE to reduce the MNIST dataset down to two dimensions and plot the
result using Matplotlib. You can use a scatterplot using 10 different colors to rep‐
resent each image’s target class. Alternatively, you can replace each dot in the
scatterplot with the corresponding instance’s class (a digit from 0 to 9), or even
plot scaled-down versions of the digit images themselves (if you plot all digits,
the visualization will be too cluttered, so you should either draw a random sam‐
ple or plot an instance only if no other instance has already been plotted at a
close distance). You should get a nice visualization with well-separated clusters of
digits. Try using other dimensionality reduction algorithms such as PCA, LLE, or
MDS and compare the resulting visualizations

1. How would you define clustering? Can you name a few clustering algorithms?
2. What are some of the main applications of clustering algorithms?
3. Describe two techniques to select the right number of clusters when using
K-Means.
4. What is label propagation? Why would you implement it, and how?
5. Can you name two clustering algorithms that can scale to large datasets? And
two that look for regions of high density?
6. Can you think of a use case where active learning would be useful? How would
you implement it?
7. What is the difference between anomaly detection and novelty detection?
8. What is a Gaussian mixture? What tasks can you use it for?
9. Can you name two techniques to find the right number of clusters when using a
Gaussian mixture model?
10. The classic Olivetti faces dataset contains 400 grayscale 64 × 64–pixel images of
faces. Each image is flattened to a 1D vector of size 4,096. 40 different people
were photographed (10 times each), and the usual task is to train a model that
can predict which person is represented in each picture. Load the dataset using
the sklearn.datasets.fetch_olivetti_faces() function, then split it into a
training set, a validation set, and a test set (note that the dataset is already scaled
between 0 and 1). Since the dataset is quite small, you probably want to use strati‐
fied sampling to ensure that there are the same number of images per person in
each set. Next, cluster the images using K-Means, and ensure that you have a
Exercises | 275
good number of clusters (using one of the techniques discussed in this chapter).
Visualize the clusters: do you see similar faces in each cluster?
11. Continuing with the Olivetti faces dataset, train a classifier to predict which per‐
son is represented in each picture, and evaluate it on the validation set. Next, use
K-Means as a dimensionality reduction tool, and train a classifier on the reduced
set. Search for the number of clusters that allows the classifier to get the best per‐
formance: what performance can you reach? What if you append the features
from the reduced set to the original features (again, searching for the best num‐
ber of clusters)?
12. Train a Gaussian mixture model on the Olivetti faces dataset. To speed up the
algorithm, you should probably reduce the dataset’s dimensionality (e.g., use
PCA, preserving 99% of the variance). Use the model to generate some new faces
(using the sample() method), and visualize them (if you used PCA, you will need
to use its inverse_transform() method). Try to modify some images (e.g.,
rotate, flip, darken) and see if the model can detect the anomalies (i.e., compare
the output of the score_samples() method for normal images and for anoma‐
lies).
13. Some dimensionality reduction techniques can also be used for anomaly detec‐
tion. For example, take the Olivetti faces dataset and reduce it with PCA, preserv‐
ing 99% of the variance. Then compute the reconstruction error for each image.
Next, take some of the modified images you built in the previous exercise, and
look at their reconstruction error: notice how much larger the reconstruction
error is. If you plot a reconstructed image, you will see why: it tries to reconstruct
a normal face.




































NLP

2.1 Write regular expressions for the following languages.
Write regular expressions for the following languages. By “word”, we mean an alphabetic string separated from other words by whitespace, any relevant punctuation, line breaks, and so forth.
Implement an ELIZA-like program, using substitutions such as those described on page 11
Compute the edit distance (using insertion cost 1, deletion cost 1, substitution cost 1) of “leda” to “deal”.
Figure out whether drive is closer to brief or to divers and what the edit distance is to each. Y
Now implement a minimum edit distance algorithm and use your hand-computed results to check your code.
Augment the minimum edit distance algorithm to output an alignment;

Write out the equation for trigram probability estimation
Now write out all the non-zero trigram probabilities for the I am Sam corpus on page 32.
Calculate the probability of the sentence i want chinese food. Give two probabilities, one using Fig. 3.2 and the ‘useful probabilities’ just below it on page 34, and another using the add-1 smoothed table in Fig. 3.7
Which of the two probabilities you computed in the previous exercise is higher, unsmoothed or smoothed? 
Using a bigram language model with add-one smoothing, what is P(Sam | am)? Include <s> and </s> in your counts just like any other token.
Train an unsmoothed bigram grammar on the following training corpus without using the end-symbol </s>:
Express a formula for estimating P(w3|w1,w2), where w3 is a word which follows the bigram (w1,w2), in terms of various n-gram counts and V. 
Write a program to compute unsmoothed unigrams and bigrams
Run your n-gram program on two different small corpora of your choice. What are the differences in the most common unigrams between the two? 
Add an option to your program to generate random sentences.
Add an option to your program to compute the perplexity of a test set
What is the unigram perplexity

What class will Naive bayes assign to the sentence “I always like foreign films.”?
compute the most likely class for D. Assume a naive Bayes classifier and use add-1 smoothing for the likelihoods.
Train two models, multinomial naive Bayes and binarized naive Bayes, both with add-1 smoothing, on the following document counts for key sentiment words, with positive or negative class assigned as noted. Use both naive Bayes models to assign a class (pos or neg) to this sentence

Find one tagging error in each of the following sentences that are tagged with the Penn Treebank tagse
Use the Penn Treebank tagset to tag each word in the following sentences from Damon Runyon’s short stories.
Implement the “most likely tag” baseline. Find a POS-tagged training set, and use it to compute for each word the tag that maximizes p(t|w)
Build a bigram HMM tagger. You will need a part-of-speech-tagged corpus.
Do an error analysis of your tagger. Build a confusion matrix and investigate the most frequent errors
Develop a set of regular expressions to recognize the character shape features
Propose a new set of BIO tags for use with your NER system
Develop an NER system specific to the category of names that you collected in the last exercise. Evaluate your system on a collection of text likely to contain instances of these named entities.

Compute by hand the chrF2,2 score for HYP2

Draw tree structures for the following ATIS phrases:
Draw tree structures for the following ATIS sentences
How would the rule for postnominal relative clauses (12.4) need to be modified if we wanted to deal properly with examples like the earliest flight that you have?
Does your solution to the previous problem correctly model the NP the earliest flight that I can get? How about the earliest flight that I think my mother wants me to book for her?
Write rules expressing the verbal subcategory of English auxiliaries
Write grammar rules for English possessives. 
The Wh-words what and which can be determiners: which four will you have?, what credit do you have with the Duke? Write rules for the different types of Wh-NPs
Write an algorithm for converting an arbitrary context-free grammar into Chomsky normal form.

Implement the algorithm to convert arbitrary context-free grammars to CNF. Apply your program to the L1 grammar.
Implement the CKY algorithm and test it with your converted L1 grammar.
Rewrite the CKY algorithm given in Fig. 13.5 on page 270 so that it can accept grammars that contain unit productions.
Discuss the relative advantages and disadvantages of partial versus full parsing.
Discuss how to augment a parser to deal with input that may be incorrect,
Implement the PARSEVAL metrics described in Section 13.4. Next, use a parser and a treebank, compare your metrics against a standard implementation. 

Peruse your daily newspaper for three examples of ambiguous sentences or headlines
Give arguments as to which of the following uses of coffee are ambiguous and which are vague
Give a FOL rule that better defines vegetarian restaurants in terms of what they serve
Give FOL translations for the following sentences
Give a set of facts and inferences necessary to prove the following assertions
Give FOL translations that capture the temporal relationships between the events
Critique this truthconditional approach with respect to the meaning of words like near.

Develop a system based on the relation analysis approaches described in this chapter to populate a database of acronym expansions. I
Acquire the CMU seminar corpus and develop a template-filling system

Using WordNet or any standard dictionary, determine how many senses there are for each of the open-class words in each sentence. How many distinct combinations of senses are there for each sentence? How does this number seem to vary with sentence length?
Using WordNet or a standard reference dictionary, tag each open-class word in your corpus with its correct tag
simulate the original Lesk word overlap disambiguation algorithm 
Using WordNet, implement the original Lesk word overlap disambiguation algorithm 

Show that the relationship between a word w and a category c in the Potts Score in Eq. 20.6 is a variant of the pointwise mutual information pmi(w, c) without the log term.

Finish the Centering Theory processing of the last two utterances of (22.30), and show how (22.29) would be processed.
determine the discourse structure for a 10–20 sentence portion. Were you helped by superficial cues the speaker included (e.g., discourse connectives) in any places?

1 Write a finite-state automaton for a dialogue manager for checking your bank balance and withdrawing money at an automated teller machine
What are some other cues in the response that a system might use to detect a dispreferred response? Consider non-verbal cues like eye gaze and body gestures.
Implement a small air-travel help system based on text input. Your system should get constraints from users about a particular flight that they want to take, expressed in natural language, and display possible flights on a screen.

Find the mistakes in the ARPAbet transcriptions of the following words
Transcribe into the ARPAbet both pronunciations of each of these three words.
Download the Praat software, and use it to transcribe the wavefiles at the word level and into ARPAbet phones, using Praat to help you play pieces of each wavefile and to look at the wavefile and the spectrogram.
Find F1 and F2 for each of your vowels.

For each one, give your best guess as to whether you think it is caused by a problem in signal processing, pronunciation modeling, lexicon size, language model, or pruning in the decoding search.




regex
trigram equation
probability
naive Bayes classifier
tagging
tree structures
grammar rules for english possessives
context free grammar to CNF, L1 grammar
FOL rule
wordnet, word sense
pmi
arpabet
praat
9




Try to think of some other cases of noncategorical phenomena in language, perhaps related to language change. 
Show that Mandelbrot’s law simplifies to Zipf’s law for = 1 and = 0.
Construct a table like table 1.3 for the random character generator described above on page 29 (which generates the letters a through z and blank with equal probability of 27).
Think about ways of identifying collocations that might be better than the methods used in this chapter.
Write a program to produce KWIC displays from a text file. Have the user be able to select the word of interest and the size of the surrounding context.

Take a (short) piece of text and compute the relative frequencies of the letters in the text. Assume these are the true probabilities. What is the entropy of this distribution?
Take another piece of text and compute a second probability distribution over letters by the same method. What is the KL divergence between the two distributions?
Cast the problem of word sense disambiguation as a noisy channel model, in analogy to the examples in table 2.2
Show that the KL divergence is not symmetric by finding an example of two distributions p and q for which
Reproduce Shannon’s experiment. Write a program that shows you a text one letter at a time. Run it on a text you have not seen. Can you confirm Shannon’s estimate of the entropy of English?

What are the parts of speech of the words in the following paragraph?
Think of five examples of noun-noun compounds.
Identify subject, direct object and indirect object in the following sentence.
What is the standard word order in the English sentence (a) for declaratives, for imperatives, for interrogatives?
What are the comparative and superlative forms for the following adjectives and adverbs?
Give base form, third singular present tense form, past tense, past participle, and present participle for the following verbs.
Transform the following sentences into the passive voice.
What is the difference between a preposition and a particle? What grammatical function does in have in the following sentences?
Give three examples each of transitive verbs and intransitive verbs.
What is the difference between a complement and an adjunct? Are the italicized phrases in the following sentences complements or adjuncts? What type of complements or adjuncts?
The italicized phrases in the following sentences are examples of attachment ambiguity. What are the two possible interpretations?
Are the following phrases compositional or non-compositional?
In the following sentence, either a few actors or everybody can take wide scope over the sentence. What is the difference in meaning?

Find hyphenated forms in a corpus and suggest some basis for which forms we would want to treat as words and which we would not. What are the reasons for your decision
Take some linguistic problem that you are interested in (non-constituent coordination, ellipsis, idioms, heavy NP shift, pied-piping, verb class alternations, etc.). Could one hope to find useful data pertaining to this problem in a general corpus?  If you think it might be possible, is there a reasonable way to search for examples of the phenomenon in either a raw corpus or one that shows syntactic structures
Develop a sentence boundary detection algorith

Add part-of-speech patterns useful for collocation discovery to table 5.2, including patterns longer than two tags. 
Does Justeson and Katz's filter identify your name as a collocation?
Identify the most significantly non-independent according to the t test in a corpus of your choice
Show this by computing the t value of new companies for a corpus with the following counts
Compute the t statistic in equation (5.3)for possible collocations by substituting mean and variance as computed
Verify that there is a large proportion of bigrams that occur less often than chance if we do not filter out function words.
Apply the t test of differences to a corpus of your choice
Find terms that distinguish best between the first and second part of a corpus of your choice.
Compute a measure of corpus similarity between two corpora of your choice. 
Applu Kilgarriff and Rose's corpus similarity measure
Apply Justeson and Katz's part-of-speech filter
Design and implement a collocation discovery tool for a translator's workbench
Design and implement a collocation discovery tool for a lexicographer's workbench.
Design and implement a collocation discovery tool for finding company names.

Explore figures for the percentage of unseen n-grams in test data (that differs from the training data
work out probability estimates using Laplace’s law given that 100 samples have been seen from a potential vocabulary of 1000 items, and in that sample 9 items were seen 10 times, 2 items were seen 5 times and the remaining 989 items were unseen.
confirm the ELE estimate for the test clause
Show that Good-Turing estimation is well-founded
Build language models for a corpus using the software pointed to on the site
Get two corpora drawn from different domains, and divide each into a training and a test set. Build language models based on the training data for each domain. Then calculate the cross-entropy figures for the test sets using both the language model trained on that domain, and the other language model. How much do the cross-entropy estimates differ?
Write a program that learns word n-gram models of some text (perhaps doing smoothing, but it is not really necessary for this exercise). Train separate models on articles from several usenet newsgroups or other text from different genres and then generate some random text based on the models
Write a program that tries to identify the language in which a short segment of text is written, based on training itself on text written in known languages. 

Describe a situation in which the lower bound could be lower than the performance that results from classifying all occurrences of a word as instances of its most frequent sense.
Create an artificial training and test set using pseudowords. Evaluate one of the supervised algorithms on it
Download a version of Roget’s thesaurus from the web (see the website), and implement and evaluate a thesaurus-based algorithm.
How would one design a Bayes classifier that uses only one feature and an information-theoretic method that uses many features?
In light of the discussion on closely related and ‘co-activated’ senses, discuss to what extent pseudowords model ambiguity well.
Try to come up with refinements of Lesk’s algorithm that would weight words according to their expected value in discrimination.
Two approaches use only one feature: information-theoretic disambiguation and Yarowsky’s (1995) algorithm. Discuss differences and other similarities between the two approaches.
Discuss the validity of the “one sense per discourse” constraint for different types of ambiguity (types of usages, homonyms etc.). 
Evaluate the one sense per discourse constraint on a corpus. Find sections or articles with multiple uses of an ambiguous word, and work out how often they have different senses.
find three cases of an ambiguous word in the first language for which the senses translate into different words and three cases of an ambiguous words for which at least two senses translate to the same word.
Is it important to evaluate unsupervised disambiguation on a separate test set or does the unsupervised nature of the method make a distinction between training and test set unnecessary?
Several of the senses of discussed in the beginning of the chapter are related by systematic polysemy. Find other words with the same systematic polysemy.
Pick one of the disambiguation algorithms and apply it to sentence boundary identification.

A potential problem with the inclusion of low-reliability cues is that they ‘water down’ the effectiveness of high-reliability cues if we combine all cues in one regular expression pattern, resulting in lower recall. How can we modify the hypothesis test to address this problem?
Suppose a subcategorization frame for a verb is very rare. Discuss the difficulty of detecting such a frame with Brent and Manning’s methods.
how would you combine probabilistic parses and priors into a posterior estimate of the probability of subcategorization frames?
As is usually the case with maximum likelihood estimates, they suffer in accuracy if data are sparse. Modify the estimation procedure
Hindle and Rooth (1993) used a partially parsed corpus to determine and C( p). Discuss whether we could use an unparsed corpus and what additional problems we would have to grapple with.
Develop a model that makes consistent decisions for sentences with two PPs headed by different prepositions.
Develop a model that resolves the attachment of the second PP in a sequence of the form: V . . N . PP PP. 
How could one use selectional preferences to discover senses of nouns whose senses we don’t know
How can the model be used to disambiguate verbs?
How could one make use of the information present in the hierarchy
Verbs can be organized into a hierarchy too. How could one use hierarchical information about verbs for better parameter estimation?
What types of words would you expect fire to be similar to for the following definitions of occurrence
How could one measure the (semantic?) similarity between trees? How might such an approach lead to a better measure of semantic similarity between words than ‘flat’ structures?
Select two words heading columns in figure 8.3 and compute similarities using each of the measures 
Show that dice and cosine coefficients are identical if the two vectors compared have the same number of non-zero entries.
Discuss to what extent similarity is context-dependent and when this can hinder correct generalization.
Show that divergence to the average (IRAD) is bounded by 2 log 2
Select two words heading columns in figure 8.3 and compute the three measures of dissimilarity

Build a Markov Model s
What is the probability of seeing the output sequence (col,lem) if the machine always starts off in the ice tea preferring state?
If one continued running the Baum-Welch algorithm on this HMM and this training sequence, what value would each parameter reach in the limit? 
Note that the parameter that is zero in stays zero. Is that a chance occurrence? What would be the value of the parameter that becomes zero in B if we did another iteration of Baum-Welch reestimation? What generalization can one make about Baum-Welch reestimation of zero parameters?

What are other linguistic phenomena that are not modeled correctly by Markov chains?
Why is Time Invariance problematic for modeling language?
Give two examples each of phenomena where independence of words (10.4) and independence from previous and following tags (10.5) don W hold.
compute maximum likelihood estimates
Compute the following two probabilities:
Based on the probability estimates from the previous set of exercises, tag the following sentence using the Viterbi algorithm.
The EM algorithm improves the log likelihood of the model given the data in each iteration. How is this compatible with Elworthy V and Merialdo V results that tagging accuracy often decreases with further training?
Transformation-based learning is a form of greedy search. Is greedy search expected to find the optimal sequence of transformations? What would be alternatives?
Most of the triggering environments in Brill refer to preceding context. Why?
Could we integrate sentence-boundary detection into the tagging methods introduced in this chapter

Consider the probability of a (partial) syntactic parse tree giving part of the structure of a sentence, how reasonable is it to assume independence between the probability distributions of these local subtrees? Use a parsed corpus (e.g., the Penn Treebank) and find for some common subtrees whether the independence assumption seems justified or not
Using a parse triangle as in figure 11.3, calculate the outside probabilities for the sentence astronomers saw stars with ears according to the grammar
Using the inside and outside probabilities for the sentence astronomers saw stars with ears worked out in figure 11.3 and exercise 11.2, reestimate the probabilities of the grammar in table 11.2 by working through one iteration of the Inside-Outside algorithm. 
What would the rule probabilities converge to with continued iterations of the Inside-Outside algorithm? Why?
Write a CKY PCFG parser
Extend a PCFG parser so it works with word lattices

Find at least five well-formed syntactic structures for this sentence
Write a context-free grammar parser, which takes a grammar of rewrite rules, and uses it to find all the parses of a sentence
What PCFG would one get from the treebank (using MLE as discussed in the text)? What is the most likely parse of the string a using that grammar
Can one combine a leftmost derivation of a with an n-gram model to produce a probabilistically sound language model that uses phrase structure?

For two languages you know, find an example where the basic assumption of the length-based approach breaks down, that is a short and a long sentence are translations of each other.
Gale and Church (1993) argue that measuring length in number of characters is preferable because the variance in number of words is greater. Do you agree that word-based length is more variable?
The dotplot figure is actually incorrect: it is not symmetric with respect to the main diagonal. (Verify this!)
Would you expect there to be significant differences between the Viterbi translation and the best translation according to equation
Construct a small training example for EM and compute at least two iterations

Construct an example data set for which the K-means algorithm takes more than one iteration to converge.
Compute the percentage of pairs of words that are in the same cluster in all 10 clusterings, in 9 clusterings,
Discuss the trade-off between time and the quality of clustering that needs to be made when choosing one of the three agglomerative algorithms or K-means.
Show that K-means converges if there are no ties. Compute as a goodness measure of the clustering the sum squared error that is incurred when each object is replaced by its cluster V center. Then show that this goodness measure decreases (or stays the same) in both the reassignment and the recomputation steps.

Try to find out the characteristics of various search engines. Do they use a stop list? Try to search for stop words. Can you search for the phrase the the? Do the engines use stemming? Do they normalize words to lowercase?
Show that Katz V K mixture satisfies the fit of the estimate to the actual count is always perfect for the number of documents with zero occurrences.
Compute Residual IDF for the words
Select a non-content word, a content word and a word which you are not sure how to classify and compute the following quantities for them: (a) document frequency and collection frequency, (b) (c) RIDF, and (d) and of the K mixture. (You can use any reasonable size corpus of your choice.)
Compute the SVD decomposition of the term-by-document matrix i

What is the classification accuracy of the trivial tree with one leaf node for the Harnings category?
we introduced upper and lower bounds as a way to assess how hard a particular classification problem is. What are upper and lower bounds for the Harnings category?
Try to collect at least a hundred spam messages and non-spam messages, divide them into training and test sets and build a decision tree that detects spam. Finding the right features is paramount for this task, so design your feature set carefully.
Collect training and test sets of adult and non-adult material from the World Wide Web and build a decision tree that can block access to adult material.
Build a decision tree that automatically determines whether you are the author of a piece of text
Build a decision tree that can distinguish between English and non-English texts
What are the classification decisions for the distribution
Show that the distribution in table 16.6 is a fixed point for iterative generalized scaling. That is, computing one iteration should leave the distribution unchanged
Compute a number of iterations of generalized iterative scaling for the data in table 16.7
Select one of exercises 16.3 through 16.6 and build a maximum entropy model for the corresponding text categorization task.
Build an animated visualization that shows how the perceptron V decision boundary moves during training and run it for a two-dimensional classification
problem.
How can one show that a set of data points from two classes is not linearly separable?
Select one of exercises 16.3 through 16.6 and build a perceptron for the corresponding text categorization task.
Two of the classifiers we have introduced in this chapter have a linear decision boundary. Which?
Select one of exercises 16.3 through 16.6 and build a nearest neighbors classifier for the corresponding text categorization task.

















How many hundred-letter strings are possible?
What happens when you type ['Monty', 'Python'] * 20, or 3 * sent1?
How many words are there in text2? How many distinct words are there?
Produce a dispersion plot of the four main protagonists in Sense and Sensibility: Elinor, Marianne, Edward, and Willoughby.
Find the collocations in text5.
len(set(text4)). State the purpose of this expression
a. Use ' '.join(my_sent) to convert this into a string.
b. Use split() to split the string back into the list form you had to start with.
Join them together in various combinations (using the plus operator) to form whole sentences
What does sent1[2][2] do?
Find all words in the Chat Corpus (text5) starting with the letter b. Show them in alphabetical order.
Use text9.index() to find the index of the word sunset
Using list addition, and the set and sorted operations, compute the vocabulary of the sentences sent1 ... sent8.
Write the slice expression that extracts the last two words of text2
Find all the four-letter words in the Chat Corpus (text5). With the help of a frequency distribution (FreqDist), show these words in decreasing order of frequency
Write expressions for finding all words in text6 that meet the following conditions:
a. Ending in ize
b. Containing the letter z
c. Containing the sequence of letters pt
d. All lowercase letters except for an initial capital (i.e., titlecase)
Now write code to perform the following tasks:
a. Print all words beginning with sh.
b. Print all words longer than four characters
What does the following Python code do? sum([len(w) for w in text1])
Define a function called vocab_size(text) that has a single parameter for the text, and which returns the vocabulary size of the text.
◑ Define a function percent(word, text) that calculates how often a given word occurs in a text and expresses the result as a percentage.
Try the following Python expression: set(sent3) < set(text1).

How many word tokens does this book have? How many word types?
Use the Brown Corpus reader nltk.corpus.brown.words() or the Web Text Corpus reader nltk.corpus.webtext.words() to access some sample text in two different genres.
Read in the texts of the State of the Union addresses, using the state_union corpus reader. Count occurrences of men, women, and people in each document
Investigate the holonym-meronym relations for some nouns. you need to use member_mer onyms(), part_meronyms(), substance_meronyms(), member_holonyms(), part_holonyms(), and substance_holonyms().
Define a conditional frequency distribution over the Names Corpus that allows you to see which initial letters are more frequent for males versus females 
◑ Investigate the table of modal distributions and look for other patterns
How many distinct words does it contain? What fraction of words in this dictionary have more than one possible pronunciation?
What percentage of noun synsets have no hyponyms? Y
14. ◑ Define a function supergloss(s) that takes a synset s as its argument and returns a string consisting of the concatenation of the definition of s, and the definitions of all the hypernyms and hyponyms of s.
15. ◑ Write a program to find all words that occur at least three times in the Brown Corpus.0
16. ◑ Write a program to generate a table of lexical diversity scores (i.e., token/type ratios
17. ◑ Write a function that finds the 50 most frequently occurring words of a text that are not stopwords.
18. ◑ Write a program to print the 50 most frequent bigrams (pairs of adjacent words) of a text, omitting bigrams that contain stopwords.
19. ◑ Write a program to create a table of word frequencies by genre
20. ◑ Write a function word_freq() that takes a word and the name of a section of the Brown Corpus as arguments, and computes the frequency of the word in that section of the corpus.
21. ◑ Write a program to guess the number of syllables contained in a text, making use of the CMU Pronouncing Dictionary.
22. ◑ Define a function hedge(text) that processes a text and produces a new version with the word 'like' between every third word.
a. Write a function to process a large text and plot word frequency against word rank using pylab.plot. Do you confirm Zipf’s law?
b. Generate random text, e.g., using random.choice("abcdefg "), taking care to include the space character
a. Store the n most likely words in a list words, then randomly choose a word from the list using random.choice().
b. Select a particular genre, such as a section of the Brown Corpus or a Genesis translation, one of the Gutenberg texts, or one of the Web texts. Train the model on this corpus and get it to generate random text.
c. Now train your system using two distinct genres and experiment with generating text in the hybrid genre
25. ● Define a function find_language() that takes a string as its argument and returns a list of languages that have that string as a word
What is the branching factor of the noun hypernym hierarchy?
Compute the average polysemy of nouns, verbs, adjectives, and adverbs according to WordNet.
Use one of the predefined similarity measures to score the similarity of each of the following pairs of words. Rank the pairs in order of decreasing similarity

Define a string s = 'colorless'. Write a Python statement that changes this to “colourless” using only the slice and concatenation operations.
Write regular expressions to match the following classes of string
Write a utility function that takes a URL as its argument, and returns the contents of the URL, with all HTML markup removed. Use urllib.urlopen to access the contents of the URL
Save some text into a file corpus.txt. Define a function load(f) that reads from the file named in its sole argument, and returns a string containing the text of the file.
Use nltk.regexp_tokenize() to create a tokenizer that tokenizes the various kinds of punctuation in this text. Use one multiline regular expression inline comments, using the verbose flag (?x)
Rewrite the following loop as a list comprehension
Read the article on normalization of non-standard words (Sproat et al., 2001), and implement a similar system for text normalization.
Write a program that processes a text and discovers cases where a word has been used with a novel sense. For each word, compute the WordNet similarity between all synsets of the word and all synsets of the words in its context
With the help of a multilingual corpus such as the Universal Declaration of Human Rights Corpus (nltk.corpus.udhr), along with NLTK’s frequency distribution and rank correlation functionality (nltk.FreqDist, nltk.spearman_correla tion), develop a system that guesses the language of a previously unseen text.
● Use WordNet to create a semantic index for a text collection.
● Obtain raw texts from two or more genres and compute their respective reading difficulty scores as in the earlier exercise on reading difficult
Read the Wikipedia entry on Soundex. Implement this algorithm in Python
a. Write a regular expression that identifies words that are hyphenated at a linebreak. The expression will need to include the \n character.
b. Use re.sub() to remove the \n character from these words.
c. How might you identify words that should not remain hyphenated once the newline is removed,
Use re.sub in writing code to remove HTML tags from an HTML file, and to normalize whitespace.
Define regular expressions to convert English words into corresponding lolspeak words.
Write code to convert nationality adjectives such as Canadian and Australian to their corresponding nouns Canada and Australia
a. What happens when you look up a substring, e.g., 'inexpressi ble'.index('re')?
b. Define a variable words containing a list of words. Now use words.index() to look up the position of an individual word.
c. Define a variable silly as in Exercise 32. Use the index() function in combination with list slicing to build a list phrase consisting of all the words up to (but not including) in in silly.

a. Split silly into a list of strings, one per word, using Python’s split() operation, and save this to a variable called bland.
b. Extract the second letter of each word in silly and join them into a string, to get 'eoldrnnnna'.
c. Combine the words in bland back into a single string, using join(). 
Process the list using a for loop, and store the result in a new list lengths
Use the Porter Stemmer to normalize some tokenized text, calling the stemmer on each word. 
Write a generator expression that produces a sequence of 500 randomly chosen letters drawn from the string "aehh ", and put this expression inside a call to the ''.join() function, to concatenate them into one long string
Download some text from a language that has vowel harmony (e.g., Hungarian), extract the vowel sequences of words, and create a vowel bigram table.
a. Write a function to convert a word to Pig Latin.
b. Write code that converts text, instead of individual words.
Write a function unknown() that takes a URL as its argument, and returns a list of unknown words that occur on that web page.
Write code to access a favorite web page and extract some text from it. For example, access a weather site and extract the forecast top temperature for your town or city today.
Read in some text from a corpus, tokenize it, and print the list of all wh-word types that occur.

Write a program to implement a brute-force algorithm for discovering word squares, a kind of n × n: crossword in which the entry in the nth row is the same as the entry in the nth column
Design an algorithm to find the “statistically improbable phrases” of a document collection
Read the following article on semantic orientation of adjectives. Use the NetworkX package to visualize a network of adjectives with edges to indicate same versus different semantic orientation 
Develop your own NgramTagger class that inherits from NLTK’s class, and which encapsulates the method of collapsing the vocabulary of the tagged training and testing data
Develop a simple extractive summarization tool, that prints the sentences of a document which contain the highest total word frequency. Use FreqDist() to count word frequencies, and use sum to sum the frequencies of the words in each sentence. Rank the sentences according to their score. Finally, print the n highest-scoring sentences in document order.
Obtain some raw text, in the form of a single, long string. Use Python’s text wrap module to break it up into multiple lines. Now write code to add extra spaces between words, in order to justify the output. Each line must have the same width, and spaces must be approximately evenly distributed across each line
With the help of the trie data structure, write a recursive function that processes text, locating the uniqueness point in each word, and discarding the remainder of each word
Write a recursive function that pretty prints a trie in alphabetically sorted order
Study gender-specific lexical choice, and see if you can reproduce some of the results of http://www.clintoneast.com/articles/words.php.
Reproduce some of the results of (Zhao & Zobel, 2007) concerning authorship identification.
a. Write a recursive function to compute nth Catalan number Cn
b. Now write another function that does this computation using dynamic programming.
c. Use the timeit module to compare the performance of these functions as n increases
Read about string edit distance and the Levenshtein Algorithm. Try the implementation provided in nltk.edit_dist()
Extract keywords from NLTK’s Shakespeare Corpus and using the NetworkX package, plot keyword linkage networks.
Write a recursive function lookup(trie, key) that looks up a key in a trie, and returns the value it finds. Extend the function to return a word when it is uniquely determined by its prefix
◑ Import the itemgetter() function from the operator module in Python’s standard library (i.e., from operator import itemgetter).
Write a function that takes a text and a vocabulary as its arguments and returns the set of words that appear in the text but not in the vocabulary. Both arguments can be represented as lists of string
Write a function that takes a list of words (containing duplicates) and returns a list of words (with no duplicates) sorted by decreasing frequency
Write a list comprehension that sorts a list of WordNet synsets for proximity to a given synset.
Write code to print out an index for a lexicon, allowing someone to look up words according to their meanings
Write a function shorten(text, n) to process a text, omitting the n most frequently occurring words of the text. H
Write a program that takes a sentence expressed as a single string, splits it, and counts up the words

Investigate three different ways to define the split between training and testing data when developing a tagger using the Brown Corpus: genre (category), source (fileid), and sentence. Compare their relative performance and discuss which method is the most legitimate.
Develop an n-gram backoff tagger that permits “anti-n-grams” such as ["the", "the"] to be specified when a tagger is initialized. An anti-n-gram is assigned a count of zero and is used to prevent backoff for this n-gram
create your own version of the Brill tagger
Use some of the estimation techniques in nltk.probability, such as Lidstone or Laplace estimation, to develop a statistical tagger that does a better job than ngram backoff taggers in cases where contexts encountered during testing were not seen during training.
a. Create a new kind of unigram tagger that looks at the tag of the previous word, and ignores the current word.
b. Add this tagger to the sequence of backoff taggers (including ordinary trigram and bigram taggers that look at words), right before the usual default tagger.
c. Evaluate the contribution of this new unigram tagger.
Create a regular expression tagger and various unigram and n-gram taggers, incorporating backoff, and train them on part of the Brown Corpus.
Write a program to classify contexts involving the word must according to the tag of the following word
a. Print a table with the integers 1..10 in one column, and the number of distinct words in the corpus having 1..10 distinct tags in the other column.
b. For the word with the greatest number of distinct tags, print out sentences from the corpus containing the word, one for each possible tag.
Write code that builds a dictionary of dictionaries of sets. Use it to store the set of POS tags that can follow a given word having a given POS tag
Preprocess the Brown News data by replacing low-frequency words with UNK, but leaving the tags untouched. Now train and evaluate a bigram tagger on this data. How much does this help?
◑ Inspect the confusion matrix for the bigram tagger t2 and identify one or more sets of tags to collapse. Define a dictionary to do the mapping, and evaluate the tagger on the simplified data.
Plot the performance curve for a unigram tagger, as the amount of training data is varied.
Obtain some tagged data for another language, and train and evaluate a variety of taggers on it
Evaluate the tagger using its accuracy() method, and try to come up with ways to improve its performance
Define a regular expression tagger (using RegexpTagger()) that tests for at least five other patterns in the spelling of words. (Use inline documentation to explain the rules.)
Investigate the full range of qualifiers (Brown tag QL) that appear before these four verbs.
a. Produce an alphabetically sorted list of the distinct words tagged as MD.
b. Identify words that can be plural nouns or third person singular verbs (e.g., deals, flies).
c. Identify three-word prepositional phrases of the form IN + DET + NN (e.g., in the lab).
d. What is the ratio of masculine to feminine pronouns?
a. What proportion of word types are always assigned the same part-of-speech tag?
b. How many words are ambiguous, in the sense that they appear with at least two tags?
c. What percentage of word tokens in the Brown Corpus involve these ambiguous words?
What is the upper limit of performance for a lookup tagger, assuming no limit to the size of its table? (
a. What happens to the tagger performance for the various model sizes when a backoff tagger is omitted?
a. Which nouns are more common in their plural form, rather than their singular form? (Only consider regular plurals, formed with the -s suffix.)
b. Which word has the greatest number of distinct tags? What are they, and what do they represent?
c. List tags in order of decreasing frequency. What do the 20 most frequent tags represent?
d. Which tags are nouns most commonly found after? What do these tags represent?
Use sorted() and set() to get a sorted list of tags used in the Brown Corpus, removing duplicates.

build a classifier that attempts to predict which preposition is used to connect a given pair of nouns. F
Using the WordNet lexicon, augment the movie review document classifier presented in this chapter to use features that generalize the words that appear in a document, making it more likely that they will match words found in the training data.
Make use of this fact to build a consecutive classifier for labeling dialogue acts. Be sure to consider what features might be useful.
build the best name gender classifier you can
build a classifier that predicts the correct sense tag for a given instance
generate a list of the 30 features that the classifier finds to be most informative.
Build a classifier that predicts when each word should be used.
Using the same training and test data, and the same feature extractor, build three classifiers for the task: a decision tree, a naive Bayes classifier, and a Maximum Entropy classifier

An n-gram chunker can use information other than the current part-of-speech tag and the n-1 previous chunk tags. Investigate other models of the context, such as the n-1 previous part-of-speech tags, or some combination of previous chunk tags along with previous and following part-of-speech tags.
Develop an NP chunker that converts POS tagged text into a list of tuples, where each tuple consists of a verb followed by a sequence of noun phrases and prepositions
a. The functions nltk.tree.pprint() and nltk.chunk.tree2conllstr() can be used to create Treebank and IOB strings from a tree. Write functions chunk2brackets() and chunk2iob() that take a single chunk tree as their sole argument, and return the required multiline string representation.
b. Write command-line conversion utilities bracket2iob.py and iob2bracket.py that take a file in Treebank or CoNLL format (respectively) and convert it to the other format.
Write a program that finds which of these chunk-internal tags typically occur at the start of a chunk, then devise one or more rules that will split up these chunks.
a. List all the tag sequences that occur with each instance of this chunk type.
b. Count the frequency of each tag sequence, and produce a ranked list in order of decreasing frequency; each line should consist of an integer (the frequency) and the tag sequence.
c. Inspect the high-frequency tag sequences. Use these as the basis for developing a better chunker
Apply the same method to determine an upper bound on the performance of an n-gram chunker
Apply the n-gram and Brill tagging methods to IOB chunk tagging
Develop a chunker for one of the chunk types in the CoNLL Chunking Corpus using a regular expression–based chunk grammar RegexpChunk. Use any combination of rules for chunking, chinking, merging, or splitting.
a. Evaluate your chunker on 100 sentences from a chunked corpus, and report the precision, recall, and F-measure.
b. Use the chunkscore.missed() and chunkscore.incorrect() methods to identify the errors made by your chunker. Discuss.
c. Compare the performance of your chunker to the baseline chunker discussed in the evaluation section of this chapter
Write one or more tag patterns to handle coordinated noun phrases
Write a tag pattern to cover noun phrases that contain gerund
Write a tag pattern to match noun phrases containing plural head nouns
Develop a chunker that starts by putting the whole sentence in a single chunk, and then does the rest of its work solely by chinking. Determine which tags (or tag sequences) are most likely to make up chinks with the help of your own utility program

Modify the functions init_wfst() and complete_wfst() so that when a nonterminal symbol is added to a cell in the WFST, it includes a record of the cells from which it was derived. Implement a function that will convert a WFST in this form to a parse tree.
Extend NLTK’s shift-reduce parser to incorporate backtracking, so that it is guaranteed to find all parses that exist (i.e., it is complete).
Develop a left-corner parser based on the recursive descent parser, and inheriting from ParseI.
Implement a version of the shift-reduce parser using backtracking, so that it finds all possible parses for a sentence, what might be called a “recursive ascent parser.”
Write a function that takes a grammar (such as the one defined in Example 8-1) and returns a random sentence generated by the grammar.
Write a function that takes the tree for a sentence and returns the subtree corresponding to the subject of the sentence
◑ Write a recursive function that produces a nested bracketing for a tree, leaving out the leaf nodes and displaying the non-terminal labels after their subtrees
Write a program to compare the efficiency of a top-down chart parser compared with a recursive descent parser
Write a recursive function to traverse a tree and return the depth of the tree, such that a tree with a single node would have depth zero.
Write code to produce two trees, one for each reading of the phrase old men and women.

Pick some grammatical constructions described in (Huddleston & Pullum, 2002), and develop a feature-based grammar to account for them.
Extend NLTK’s treatment of feature structures to allow typed feature structures.
Extend NLTK’s treatment of feature structures to allow productions with underspecified categories
Extend NLTK’s treatment of feature structures to allow unification into listvalued features, and use this to implement an HPSG-style analysis of subcategorization, whereby the SUBCAT of a head category is the concatenation of its complements’ categories with the SUBCAT value of its immediate parent.
Extend the German grammar in Example 9-4 so that it can handle so-called verbsecond structures like the following

Taking (Warren & Pereira, 1982) as a starting point, develop a technique for converting a natural language query into a form that can be evaluated more efficiently in a model.
Develop a grammar that will allow your sentences to be translated into first-order logic, and build a model that will allow those translations to be checked for truth or falsity.
Carry out the preceding exercise, but use DRT as the meaning representation.
Modify the sem.evaluate code so that it will give a helpful error message if an expression is not in the domain of a model’s valuation function.
Develop a method for translating English sentences into formulas with binary generalized quantifiers.
Translate the following verb phrases using λ-abstracts and quantified formulas of first-order logic

Construct a conditional frequency distribution which records the word length for each speech in The Merchant of Venice
◑ Index the words of Shakespeare’s plays, with the help of nltk.Index
Create a spreadsheet using office software, containing one lexical entry per row, consisting of a headword, a part of speech, and a gloss. Save the spreadsheet in CSV format. Write Python code to read the CSV file and print it in Toolbox format, using lx for the headword, ps for the part of speech, and gl for the gloss.
Write a function that takes a lexicon and finds which pairs of consecutive fields are most frequent (e.g., ps is often followed by pt).
Write a function which displays the complete entry for a lexeme
Write a function to add a new field syl which gives a count of the number of syllables in the word
Write a program to find any parts-of-speech (ps field) that occurred less than 10 times
Write a program that scans an HTML dictionary file to find entries having an illegal part-of-speech field, and then reports the headword for each entry.
Write a function that deletes a specified field from a lexical entry
Write a recursive function to convert an arbitrary NLTK tree into an XML counterpart, with non-terminals represented as XML elements, and leaves represented as text content
Obtain a comparative wordlist in CSV format, and write a program that prints those cognates having an edit-distance of at least three from each other
Build an index of those lexemes which appear in example sentences












































Robotics

1. What element of a robot is used to monitor its environment?
2. What type of robot element do motors represent?
3. What are the three elements of a robotic system?
4. Where have robots been operating the longest in regular usage?
5. Why are wheels used more often than legs?
6. What is the principle connecting output, input, and control in a loop?
7. Why might a household washing machine be considered more robotic than a UK Robot Wars entry?

1. What is an IO pin?
2. What tools do you need to make a block diagram?
3. What are the drawbacks of the laser ranging sensor versus the ultrasonic distance sensor?
4. What type of system is a microphone?
5. What kind of IO pin is correct for measuring varying resistance?
6. What type of IO pin would be suitable for detecting an on/off signal?

1. What is the name of the software we will be using on our Raspberry Pi?
2. What did we use to make the SD card?
3. What is the CSI connector on the Raspberry Pi for?
4. Which versions of the Raspberry Pi are recommended for use in this book?

1. What are the major items you would not leave attached to a headless computer?
2. If you gave your robot the hostname awesomegiantrobot, what address would you use to reach it in PuTTY?
3. Why is it advisable to expand the filesystem on your Raspberry Pi?
4. How do you properly shut down the Raspberry Pi?

1. For what reasons would you use source control?
2. What would you use branching for?
3. Why keep SD card copies?
4. What reasons are there for editing files on another computer and uploading them to the Raspberry Pi?

Why is it a good idea when using multiple Raspberry Pi "hats" or "bonnets" to look at the pin usage?
Why have we chosen to power the Pi separately from the motors?
What are the consequences of too small a motor controller?
Why do I recommend test fitting before buying any parts?

1. Why do we use the atexit.register mechanism?
2. How can we correct a motor going the wrong way?
3. What are the main advantages of a common interface for a Robot object?
4. How must the motors move relative to each other to make this robot turn?

1. What can happen if the test track is too shiny or not dark enough?
2. What are the other names for the GND or G pin?
3. Why would strong sunlight interfere with the sensor?
4. In event-driven programming, like we've used in this chapter, what do you call the section of code that will be called when an event is triggered?

1. When soldering, do you heat the pad, the pin, or the solder?
2. Why do you not connect the LED strip directly to the Raspberry Pi?
3. Why are we using fractions of the number of LED's in the LED class for our ranges?
4. What is the difference between a HSV color with a saturation of 0 and a saturation at the full range?

1. What does the acronym PWM mean?
2. In terms of the servo motor's internal mechanism, from what components is the error calculated?
3. What is a servo horn?
4. What could result from a servo being impeded when trying to reach a requested position?

1. What might interfere with a light-based distance sensor?
2. Why do we divide the speed of sound by two?
3. Why, in the more complicated behavior, has a variable delay been introduced?
4. Why could the robot still reverse into things?

1. What are the edge types we are counting with our encoder code?
2. Why should we not drive motors at 100% for these control systems?
3. What are some factors that encoders on the wheels/motors like this cannot account for?

1. We used the HSV color system when tracking colored objects. Why would the RGB color system not work for this?
2. PID controllers (or PI control) were used for both behaviors. To the color-tracking behavior, we added an anti-windup measure—what would happen without this limit?
3. When performing computer vision, we use a low resolution for the images. What are some of the reasons for choosing a low resolution?
4. Why do we use queues to send data between the processes in our system?
5. In the color-tracking behavior, what step is needed in between using color filters to make a masked image, and generating enclosing circles for the remaining blobs?

Why would the user define multiple variations for each vocabulary part?
Similarly, why would they do this for the dialog?
Why did we wrap our intent with try/catch?
What is the significance of the en-us string in the vocabulary/dialog file
structures?
How did we make the Pi start the pulseaudio system when it boots?

1. What is a static file?
2. What does the path: prefix mean for a section of a Flask route?
3. What is the unit vw in CSS, and why do we use it?
4. How do you get events when a screen is touched in JavaScript?
5. What do the selectors .button and #video mean for CSS/jQuery?
6. In the systemd service file, what does the statement After=network.target intend?
















1. You don't have the correct resistor value. Can you just substitute another value resistor that you have lying around?
2. The GPIOZero package is a compete GPIO library. Is it all you'll ever need?
3. Should you always use the built-in Python packages for networking wherever possible?
4. True or false: an LED is unbiased, meaning it can be plugged into a circuit any way around and still work.
5. You are building an IoT application that interacts with other existing networked devices and it times out. What could be the problem?
6. What Python module and function can be used to stop a program exiting?

1. What feature of the Flask-RESTful extension can we use to help to validate a client's input data?
2. What communication protocol can be used to provide real-time full-duplex communication between a client and a server?
3. How do we perform request data validation with Flask-SocketIO?
4. What is the Flask templates folder?
5. When using jQuery, where should we create component event listeners and initialize our web page content?
6. What command-line tool can be used to make requests to a RESTful API service?
7. What happens to the physical LED when we change the value property of a PWMLED instance?

1. What is MQTT?
2. Your retained MQTT messages never get delivered. What should you check?
3. Under what condition will an MQTT broker publish a Will message?
4. You choose to use MQTT as your IoT application's messaging layer and must ensure that messages are sent and received. What is the minimum QoS level required?
5. You develop an application using MQTT and use the Mosquitto broker, but now you need to use a different broker. What does this mean for your code base and deployment configuration?
6. Where in code (hint: which handler method) should you subscribe to MQTT topics and why?

1. What serial communication interface allows devices to be daisy-chained?
2. You have an I2C device but do not know its address. How can you find it?
3. You have started using a new GPIO Python library for the first time but can't seem to get any GPIO pins to work. What do you need to check?
4. You are using PiGPIO on Windows with Remote GPIO to drive a remote Raspberry Pi. Now, you try to install a third-party device driver library but it's failing to install under Windows However, you find it installed successfully on the Raspberry Pi. What is the likely problem?
5. True or false: The Raspberry Pi has pins for both 3.3 volts and 5 volts, so you can use either voltage when working with GPIO pins?
6. You have created a robot that uses servos. During simple testing, everything seemed fine. However, now that you have finished, you notice the servos
randomly twitch. Why?
7. When the robot's servos move, you notice a lightning bolt icon on your monitor or display is going blank. Why could this be happening?

1. You have a circuit that requires a 200Ω resistor, but you only have a 330Ω resistor available. It is safe to use this value?
2. You substitute a higher value resistor in a circuit but the circuit does not work. With respect to Ohm's Law, what could be the problem?
3. You calculated a suitable resistor value for a circuit using Ohm's Law, but when you applied power to the circuit, the resistor started to discolor and let off smoke. Why?
4. Assuming GPIO 21 is configured via Python as an input pin and it is connected by a wire directly to the +3.3-volt pin, what value will pi.read(21) return?
5. You have a push button set up so that when it's pressed, it connects GPIO 21 to a GND pin. When the button is not pressed, you notice that your program is erratic and appears to receive a phantom button press. What could the problem be?
6. You want to connect a device that operates its output pins at 5 volts to a Raspberry Pi GPIO input pin. How can you do this safely?
7. True or false – A resistor voltage divider circuit can be used to convert a 3.3-volt input into 5 volts for use with a 5-volt logic input device.

1. When it comes to controlling a transistor, how do MOSFET and BJT differ?
2. You are controlling a motor using a MOSFET, however, you switch off the MOSFET (for example, making the GPIO pin low), but the motor does not turn off promptly but instead spins down. Why?
3. You have selected a random MOSFET that you want to control from a Raspberry Pi 3.3-volt GPIO but it does not work. What is some possible cause of the problem?
4. Other than switching, what common feature do optocouplers and relays share that transistors do not?
5. What is the difference between an active low and active high GPIO?
6. Why do we prefer a physical pull-down resistor for the MOSFET's Gate leg over an in-code activated pull-down?
7. For a DC motor, what does the stall current represent?
8. For a DC motor, what is the difference between continuous and free current?

1. Your APA102 LED strip is set to show all LEDs as white, but instead, all of the LEDs look reddish. What could be the problem?
2. What limitation does the APA102 place on SPI?
3. Your APA102 does not work when you use a logic level converter but appears to work when you connect it directly to the MOSI and SCK pins on your Raspberry Pi (hence bypassing the logic level converter). What are some possible causes of the problem?
4. What is the basic process for creating and displaying an image on an OLED display using the Luma OLED library?
5. What is RTTTL?

1. Can you list two differences between a DHT11 and DHT22 temperature and humidity sensor?
2. Why is the external 10kΩ pull-up resistor optional in our DHT11/22 circuit?
3. Describe the basic electronic principle used with an LDR to measure light.
4. How can you make an LDR more or less sensitive to certain lighting conditions?
5. You have created an LDR circuit and calibrated the Python code. Now, you change the LDR and find that the voltages readings and in-code trigger point
behave slightly differently. Why?
6. Why does placing two wires in water work as a basic moisture detector when used with a voltage divider and ADS1115 circuit?

1. Your servo does not rotate fully to the left or right. Why is this and how can you fix this?
2. Your servo is groaning at one or both of its extreme left/right positions. Why?
3. What advantage does an H-Bridge provide over a single transistor when controlling DC motors?
4. You are using an L293D H-Bridge IC. You follow the instructions as per the datasheet but cannot get your motor to brake. Why?
5. Why do your 5-volt motors spin slower when connected to an H-Bridge using an L293D compared to connecting the motor directly to a 5-volt source?
6. You have a stepper motor that will not work – it vibrates, but will not turn. What could be the problem?
7. Can you drive a stepper motor directly from four Raspberry Pis' GPIO pins?

1. Can a PIR sensor detect the direction that an object is moving?
2. What are some factors that can affect the measurement accuracy of an ultrasonic distance sensor?
3. How does the output of a latching or non-latching Hall-effect sensor differ from the output of a ratiometric Hall-effect sensor?
4. In relation to this PiGPIO function call, callback = pi.callback(GPIO, pigpio.EITHER_EDGE, callback_handler), what does the pigpio.EITHER_EDGE parameter mean?
5. In a 5-volt to 3.3-volt resistor-based voltage divider consisting of a 1k Ω and 2k Ω resistor, why is important to connect the two resistor values the correct way around in a circuit?
6. Both the HC-SR04 ultrasonic distance sensor and the HC-SR501 PIR sensor were powered using 5 volts connected to their respective Vcc pins. Why did we use a voltage divider with the HC-SR04 to drop the output from 5 volts to 3.3 volts, but not with the HC-SR501?

1. When is a publisher-subscriber model a good design approach?
2. What is the Python GIL, and what implication does it present for classic threading?
3. Why is a pure event-loop usually a poor choice for complex applications?
4. Is an event-loop approach a bad idea? Why or why not?
5. What is the purpose of the thread.join() function call?
6. You have used a thread to poll your new analog component via an analog-todigital converter. However, you find that your code behaves sluggishly to changes in the component. What could be the problem?
7. Which is the superior approach to designing an IoT or electronic interfacing application in Python – using an event-loop, a thread/callback, the publishersubscriber model, or an AsyncIO-based approach?

1. With our first IFTTT Applet, where we monitored the temperature, why did we use a different high and low temperature value to trigger our Applet and send an email?
2. What was the advantage of using an intermediary service such as dweet.io with our IFTTT Webhook service?
3. What are some of the core differences between IFTTT and Zapier?
4. Can you control your Raspberry Pi from a ThingSpeak dashboard?
5. In relation to data, what is the limitation of the IFTTT Webhook service when used as an action (that is, on the That side of an applet)?
6. You want to prototype the switching on and off of an over-the-counter smart light bulb based on a Raspberry Pi's GPIO pin state. What platforms could you use?

1. Why, in our MQTT service example, did we use PyPubSub to re-dispatch MQTT messages?
2. Why is using the Google Assistant app on a phone (or tablet) useful during development when integrating with or debugging an IFTTT Google Assistant Applet?
3. You are working on an existing weather monitoring project that uses MQTT as its network transport layer to connect many distributed devices. You have been asked to integrate the application with an IFTTT service. How do you do this?
4. You want to build multiple IoTrees and have them all work together in unison. What are two approaches you can take to achieve this outcome?
5. Why did we use the free dweet.io service in this chapter? Would you use this approach in a commercial IoT project?
6. We want to test a RESTful API service from the command line. What commandline tool can we use?
7. What feature of MQTT can you use to have IoTrees initialize automatically when their Raspberry Pis are powered on or rebooted?
8. Further to Question 7, what are some of the considerations you will need to make regarding the Mosquitto MQTT broker setup and deployments to achieve this outcome?





Indicate how many of these dof are translational and how many are rotational. Describe the topology of the C-space
Find the number of degrees of freedom of your arm, from your torso to your palm? ? How many constraints were placed on your arm when you placed your palm at a fixed configuration on the table?
Model your arm, from your shoulder to your palm, as a mechanism with joints and calculate the number of degrees of freedom using Gr¨ubler’s formula
How many degrees of freedom does your arms-plus-steering wheel system have?
Determine the number of degrees of freedom of the chain formed by the human arm and the robot
Ignoring the multi-fingered hand, describe the configuration space of the mobile manipulator.
Use the planar version of Gr¨ubler’s formula to determine the number of degrees of freedom of the mechanisms
Use the spatial version of Gr¨ubler’s formula to determine the number of degrees of freedom of the mechanisms
Construct a physical model of the 3×UPU platform to see if it indeed has three degrees of freedom
Assuming that a reference frame is attached to the center link, describe its workspace.
What is the free C-space of the robot
Describe the task space for a robot arm writing on a blackboard.
Describe an algorithm that drives the rolling coin of Figure 2.11 from any arbitrary initial configuration in its four-dimensional C-space to any arbitrary goal configuration, despite the two nonholonomic constraints
write down the vector differential equation
Write the corresponding Pfaffian constraints A(q) ˙q = 0 for this system. How many Pfaffian constraints are there?
(c) Are the constraints holonomic or nonholonomic?

Draw by hand the three frames, at different locations so that they are easy to see
Write down the rotation matrices
By hand, calculate the matrix logarithm
Calculate the matrix exponential corresponding to the exponential coordinates of rotation
Find, if it exists, the rotation R for the three input–output pairs












































Reinforcement learning

Suppose, instead of playing against a random opponent, the reinforcement learning algorithm described above played against itself, with both sides learning. What do you think would happen in this case? 
Many tic-tac-toe positions appear di↵erent but are really the same because of symmetries. How might we amend the learning process described above to take advantage of this?
Suppose the reinforcement learning player was greedy, that is, it always played the move that brought it to the position that it rated the best. Might it
learn to play better, or worse, than a nongreedy player?
What (conceptually) are the two sets of probabilities computed when we do, and when we do not, learn from exploratory moves?

In e-greedy action selection, for the case of two actions and e= 0.5, what is the probability that the greedy action is selected?
On some of these time steps the e case may have occurred, causing an action to be selected at random. On which time steps did this definitely occur? On which time steps could this possibly have occurred?
which method will perform best in the long run in terms of cumulative reward and probability of selecting the best action?
What is the weighting on each prior reward for the general case, analogous to (2.6), in terms of the sequence of step-size parameters?
Design and conduct an experiment to demonstrate the diculties that sample-average methods have for nonstationary problems. Use a modified version of the 10-armed testbed in which all the q⇤(a) start out equal and then take independent random walks (say by adding a normally distributed increment with mean 0 and standard deviation 0.01 to all the q⇤(a) on each step).
Why, then, are there oscillations and spikes in the early part of the curve for the optimistic method? In other words, what might make this method perform particularly better or worse, on average, on particular early steps?
Is it possible to avoid the bias of constant step sizes while retaining their advantages on nonstationary problems?
show that Qn is an exponential recency-weighted average without initial bias.
In Figure 2.4 the UCB algorithm shows a distinct spike in performance on the 11th step. Why is this?
If you are not able to tell which case you face at any step, what is the best expected reward you can achieve and how should you behave to achieve it?

Suppose you treated pole-balancing as an episodic task but also used discounting, with all rewards zero except for 1 upon failure. What then would the return be at each time? How does this return di↵er from that in the discounted, continuing formulation of this task?
After running the learning agent for a while, you find that it is showing no improvement in escaping from the maze. What is going wrong? Have you e↵ectively communicated to the agent what you want it to achieve? 
Suppose  = 0.9 and the reward sequence is R1 = 2 followed by an infinite sequence of 7s. What are G1 and G0?
Give an equation for q⇡ in terms of v⇡ and the four-argument p
What is the Bellman equation for action values, that is, for q⇡?
Give the equation corresponding to this intuition and diagram for the action value, q⇡(s, a), in terms of the expected next reward, Rt+1, and the expected next state value, v⇡(St+1), given that St =s and At =a
Draw or describe the optimal state-value function for the golf example
What policy is optimal if  = 0? If  = 0.9? If  = 0.5?
Give the Bellman equation for q⇤ for the recycling robot
Rewrite the four Bellman equations for the four value functions (v⇡, v⇤, q⇡, and q⇤) in terms of the three argument function p (3.4) and the two-argument function r (3.5).

if ⇡ is the equiprobable random policy, what is q⇡(11, down)? What is q⇡(7, down)?
Assume that the transitions from the original states are unchanged. What, then, is v⇡(15) for the equiprobable random policy?
What are the equations analogous to (4.3), (4.4), and (4.5), but for actionvalue functions instead of state-value functions? 
How would policy iteration be defined for action values?
Describe qualitatively the changes that would be required in each of the steps 3, 2, and 1, in that order, of the policy iteration algorithm for v⇤ on page 80.
Why does the optimal policy for the gambler’s problem have such a curious form?
Implement value iteration for the gambler’s problem and solve it for ph = 0.25 and ph = 0.55.
What is the analog of the value iteration update (4.10) for action values

Why does the estimated value function jump up for the last two rows in the rear? 
Suppose every-visit MC was used instead of first-visit MC on the blackjack task. Would you expect the results to be very di↵erent?
What is the backup diagram for Monte Carlo estimation of q⇡?
What are the first-visit and every-visit estimators of the value of the nonterminal state?
What is the equation analogous to (5.6) for action values Q(s, a) instead of state values V (s), again given returns generated using b?
In learning curves such as those shown in Figure 5.3 error generally decreases with training, as indeed happened for the ordinary importance-sampling method. But for the weighted importance-sampling method error first increased and then decreased. Why do you think this happened?
Suppose that instead an every-visit MC method was used on the same problem. Would the variance of the estimator still be infinite? 
Modify the algorithm for first-visit MC policy evaluation (Section 5.1) to use the incremental implementation for sample averages 
Derive the weighted-average update rule (5.8) from (5.7). Follow the pattern of the derivation of the unweighted rule (2.3).
Apply a Monte Carlo control method to this task to compute the optimal policy from each starting state. Exhibit several trajectories following the optimal policy (but turn the noise o↵ for these trajectories).
Modify the algorithm for o↵-policy Monte Carlo control (page 111) to use the idea of the truncated weighted-average estimator (5.10).

If V changes during the episode, then (6.6) only holds approximately; what would the di↵erence be between the two sides? Redo the derivation above to determine the additional amount that must be added to the sum of TD errors in order to equal the Monte Carlo error.
Can you imagine a scenario in which a TD update would be better on average than a Monte Carlo update?
What does this tell you about what happened on the first episode? Why was only the estimate for this one state changed? By exactly how much was it changed?
the RMS error of the TD method seems to go down and then up again, particularly at high ↵’s. What could have caused this?
Design an o↵-policy version of the TD(0) update that can be used with arbitrary target policy ⇡ and covering behavior policy b, using at each step t the importance sampling ratio ⇢t:t (5.3).
Show that an action-value version of (6.6) holds for the action-value form of the TD error t = Rt+1 + Q(St+1, At+1)  Q(St, At), again assuming that the values don’t change from step to step.
Re-solve the windy gridworld assuming eight possible actions, including the diagonal moves, rather than four. How much better can you do with the extra actions?
Re-solve the windy gridworld task with King’s moves, assuming that the e↵ect of the wind, if there is any, is stochastic, sometimes varying by 1 from the mean values given for each column
Why is Q-learning considered an o↵-policy control method?
Suppose action selection is greedy. Is Q-learning then exactly the same algorithm as Sarsa? a? Will they make exactly the same action selections and weight updates?
What are the update equations for Double Expected Sarsa with an" e-greedy target policy?
Describe how the task of Jack’s Car Rental (Example 4.2) could be reformulated in terms of afterstates. Why, in terms of this specific task, would such a reformulation be likely to speed convergence? 

Show that the n-step error used in (7.2) can also be written as a sum TD errors (again if the value estimates don’t change) generalizing the earlier result.
Why do you think a larger random walk task (19 states instead of 5) was used in the examples of this chapter? Would a smaller walk have shifted the advantage to a di↵erent value of n?
Prove that the n-step return of Sarsa (7.4) can be written exactly in terms of a novel TD error, as
Write the pseudocode for the o↵-policy state-value prediction algorithm described above.
Prove that the control variate in the above equations does not change the expected value of the return
Show that the general (o↵-policy) version of the n-step return (7.13) can still be written exactly and compactly as the sum of state-based TD errors (6.5) if the approximate state value function does not change.
Repeat the above exercise for the action version of the o↵-policy n-step return (7.14) and the Expected Sarsa TD error (the quantity in brackets in Equation 6.9).

The nonplanning method looks particularly poor in Figure 8.3 because it isa one-step method; a method using multi-step bootstrapping would do better. Do you think one of the multi-step bootstrapping methods from Chapter 7 could do as well as the Dyna method? Explain why or why not.
Why did the Dyna agent with exploration bonus, Dyna-Q+, perform better in the first phase as well as in the second phase of the blocking and shortcut experiments?
How might the tabular Dyna-Q algorithm shown on page 164 be modified to handle stochastic environments?
Suppose instead that the distribution was highly skewed, that some of the b states were much more likely to occur than most. Would this strengthen or weaken the case for sample updates over expected updates?
Some of the graphs in Figure 8.8 seem to be scalloped in their early portions, particularly the upper graph for b = 1 and the uniform distribution. Why do you think this is? 
Heuristic search can be implemented as a sequence of one-step updates (shown here outlined in blue) backing up values from the leaf nodes toward the root. The ordering shown here is for a selective depth-first search.

Show that tabular methods such as presented in Part I of this book are a special case of linear function approximation. What would the feature vectors be?
Why does (9.17) define (n + 1)k distinct features for dimension k?
Suppose we believe that one of two state dimensions is more likely to have an e↵ect on the value function than is the other, that generalization should be primarily across this dimension rather than along it. What kind of tilings could be used to take advantage of this prior knowledge?
Given these feature vectors, you suspect that you still have to average out some noise, so you decide that you want learning to be gradual, taking about 10 presentations with the same feature vector before learning nears its asymptote. What step-size parameter ↵ should you use? Why?
Derive the learning algorithm for this case, from (9.7), such that no gradient notation appears.
Repeat the derivation in Section 9.3, using the cross-entropy loss instead of the squared error in (9.4), all the way to an explicit form with no gradient or logarithm notation in it. Is your final form more complex, or simpler, than that you obtained in the preceding exercise?

We have not explicitly considered or given pseudocode for any Monte Carlo methods in this chapter. What would they be like? Why is it reasonable not to give pseudocode for them? How would they perform on the Mountain Car task? 
Give pseudocode for semi-gradient one-step Expected Sarsa for control
Why do the results shown in Figure 10.4 have higher standard errors at large n than at small n?
Give pseudocode for a di↵erential version of semi-gradient Q-learning.
What equations are needed (beyond 10.10) to specify the di↵erential version of TD(0)? 
What are the di↵erential values of the three states
Suppose it was already there and was held stuck there. What would the sequence of Rt+1  R¯t errors be? What would the sequence of t errors be (using Equation 10.10)? Which error sequence would produce a more stable estimate of the average reward if the estimate were allowed to change in response to the errors? Why?
Describe the specific changes needed to the boxed algorithm for di↵erential semi-gradient n-step Sarsa to use this trick.

Convert the equation of n-step o↵-policy TD (7.9) to semi-gradient form. Give accompanying definitions of the return for both the episodic and continuing cases
Convert the equations of n-step Q() (7.11 and 7.17) to semi-gradient form. Give definitions that cover both the episodic and continuing cases.
Apply one-step semi-gradient Q-learning to Baird’s counterexample and show empirically that its weights diverge. 

Just as the return can be written recursively in terms of the first reward and itself one-step later (3.9), so can the -return. Derive the analogous recursive relationship
What is the equation relating  and the half-life, ⌧, the time by which the weighting sequence will have fallen to half of its initial value?
Some insight into how TD() can closely approximate the o↵-line -return algorithm can be gained by seeing that the latter’s error term (in brackets in (12.4)) can be written as the sum of TD errors (12.6) for a single fixed w.  Show this, following the pattern of (6.6), and using the recursive relationship for the -return you obtained
show that, if the weight updates over an episode were computed on each step but not actually used to change the weights (w remained fixed), then the sum of TD()’s weight updates would be the same as the sum of the o↵-line -return algorithm’s updates.
Several times in this book (often in exercises) we have established that returns can be written as sums of TD errors if the value function is held constant. Why is (12.10) another instance of this?
Modify the pseudocode for Sarsa() to use dutch traces (12.11) without the other distinctive features of a true online algorithm. Assume linear function approximation and binary features.
Generalize the three recursive equations above to their truncated versions
Prove that (12.24) becomes exact if the value function does not change
What are the dutch-trace and replacing-trace versions of o↵-policy eligibility traces for state-value and action-value methods?
How might Double Expected Sarsa be extended to eligibility traces? ⇤

Use your knowledge of the gridworld and its dynamics to determine an exact symbolic expression for the optimal probability of selecting the right action
Generalize the box on page 199, the policy gradient theorem (13.5), the proof of the policy gradient theorem (page 325), and the steps leading to the REINFORCE update equation (13.8), so that (13.8) ends up with a factor of t and thus aligns with the general algorithm given in the pseudocode
For this parameterization, prove that the eligibility vector 
Show that for the gaussian policy parameterization (Equations 13.19 and 13.20) the eligibility vector has the following two parts:
Show that if the exponential soft-max distribution (13.2) is used to convert action preferences to policies, then
Express the eligibility r ln ⇡(a|s, ✓) for a Bernoulli-logistic unit, in terms of a, x(s), and ⇡(a|s, ✓) by calculating the gradient.

What is the natural Bellman equation for a hierarchical policy, analogous to (17.4), but for the average reward setting (Section 10.3)? What are the two parts of the option model, analogous to (17.2) and (17.3), for the average reward setting?










































Data Science

For each of these data sources, explain what you must do to turn this data into a usable format on your computer for analysis.
Write a program to scrape the best-seller rank for a book on Amazon.com. Use this to plot the rank of all of Skiena’s books over time.
For your favorite sport (baseball, football, basketball, cricket, or soccer) identify a data set with the historical statistical records for all major participants. Devise and implement a ranking system to identify the best player at each position.
(a) How many piano tuners are there in the entire world?
(b) How much does the ice in a hockey rink weigh?
(c) How many gas stations are there in the United States?
(d) How many people fly in and out of LaGuardia Airport every day?
(e) How many gallons of ice cream are sold in the United States each year?
(f) How many basketballs are purchased by the National Basketball Association (NBA) each year?
(g) How many fish are there in all the world’s oceans?
(h) How many people are flying in the air right now, all over the world?
(i) How many ping-pong balls can fit in a large commercial jet?
(j) How many miles of paved road are there in your favorite country
(k) How many dollar bills are sitting in the wallets of all people at Stony Brook University?
(l) How many gallons of gasoline does a typical gas station sell per day?
(m) How many words are there in this book?
(n) How many cats live in New York city?
(o) How much would it cost to fill a typical car’s gas tank with Starbuck’s coffee?
(p) How much tea is there in China?
(q) How many checking accounts are there in the United States?
What is the difference between regression and classification?
How would you build a data-driven recommendation system? What are the limitations of this approach?

Suppose that 80% of people like peanut butter, 89% like jelly, and 78% like both. Given that a randomly sampled person likes peanut butter, what is the probability that she also likes jelly?
Prove that the cumulative distribution function of the maximum of a pair of values drawn from random variable X is the square of the original cumulative distribution function of X
If two binary random variables X and Y are independent, are X¯ (the complement of X) and Y also independent?
Compare each pair of distributions to decide which one has the greater mean and the greater standard deviation
Construct a probability distribution where none of the mass lies within one σ of the mean.
How does the arithmetic and geometric mean compare on random integers?
Show that the arithmetic mean equals the geometric mean when all terms are the same
a correlation coefficient of −0.9 indicates a stronger linear relationship than a correlation coefficient of 0.5. Explain why
Use data or literature found in a Google search to estimate/measure the strength of the correlation between
Compute the Pearson and Spearman Rank correlations for uniformly drawn samples of points (x, xk)
Show that the logarithm of zero is undefined
Find some interesting data sets, and compare how similar their means and medians are. What are the distributions where the mean and median differ on the most?
What is the probability of getting exactly k heads on n tosses, where the coin has a probability of p in coming up heads on each toss? What about k or more heads?
Tossing a coin ten times resulted in eight heads and two tails. How would you analyze whether a coin is fair? What is the p-value?
A person randomly types an eight-digit number into a pocket calculator. What is the probability that the number looks the same even if the calculator is turned upside down?
What is A/B testing and how does it work?
What is the difference between statistical independence and correlation?
What is the difference between a skewed distribution and a uniform one?

Construct a data set of n human heights, with p% of them recording in English (feet) and the rest with metric (meter) measurements. Use statistical tests to test whether this distribution is distinguishable from one properly recorded in meters. What is the boundary as a function of n and p where it becomes clear there is a problem?
Find a table of storage prices over time. Analyze this data, and make a projection about the cost/volume of data storage five years from now.
For one or more of the following The Quant Shop challenges, find relevant data sources and assess their quality
What types of outliers might you expect to occur in the following data sets
A health sensor produces a stream of twenty different values, including blood pressure, heart rate, and body temperature. Describe two or more techniques you could use to check whether the stream of data coming from the sensor is valid.
Implement a function that extracts the set of hashtags from a data frame of tweets. Hashtags begin with the “#” character and contain any combination of upper and lowercase characters and digits. 
The laws governing voter registration records differ from state to state in the United States. Identify one or more states with very lax rules, and see what you must do to get your hands on the data.
Suppose you built a system to predict stock prices. How would you evaluate it?
Why does data cleaning play a vital role in analysis?
During analysis, how do you treat missing values?
How do you efficiently scrape web data?

Find the Z-score of x, and determine how many standard deviations away from the mean that x is
What percentage of the standard normal distribution (µ = 0, σ = 1) is found in each region?
Identify three successful and well-used scoring functions in areas of personal interest to you. For each, explain what makes it a good scoring function and how it is used by others.
Produce two substantially different but sensible scoring functions on the same set of items. How different are the resulting rankings? Does the fact that both have to be sensible constrain rankings to be grossly similar?
Use Elo ratings to rank all the teams in a sport such as baseball, football, or basketball, which adjusts the rating in response to each new game outcome. How accurately do these Elo ratings predict the results of future contests?
Evaluate the robustness of Borda’s method by applying k random swaps to each of m distinct copies of the permutation p = {1, 2, . . . , n}. What is the threshold where Borda’s method fails to reconstruct p, as a function of n, k, and m?
What makes a data set a gold standard?
How can you test whether a new credit risk scoring model works?
How would you forecast sales for a particular book, based on Amazon public data?

Explain which distribution seems most appropriate for the following phenomenon: binomial, normal, Poisson, or power law?
Assuming that the relevant distribution is normal, estimate the probability of the following events:That a randomly selected person will weight over 300 lbs?
Which of the following events are likely independent and which are not?
Prove that the permutation generation algorithm of page 147 generates permutations correctly, meaning uniformly at random
Obtain data on the heights of m men and w women.
(a) Use a t-test to establish the significance of whether the men are on average taller than the women.
(b) Perform a permutation test to establish the same thing: whether the men are on average taller than the women.
February 2 is Groundhog Day in the United States, when it is said that six more weeks of winter follows if the groundhog sees its shadow. Taking whether
it is sunny on February 2 as a proxy for the groundhog’s input, is there any predictive power to this tradition? Do a study based on weather records, and report the accuracy of the beast’s forecasts along with its statistical significance
How would you improve a spam detection algorithm that uses a naive Bayes classifier?
An ant is placed on an infinitely long twig. The ant can move one step backward or one step forward with the same probability, during discrete time steps. What is the probability that the ant will return to its starting point after 2n steps?

(a) Who constructed it, when, and why?
(b) How big is it?
(c) What do the fields mean?
(d) Identify a few familiar or interpretable records.
(e) Provide Tukey’s five number summary for each column.
(f) Construct a pairwise correlation matrix for each pair of columns.
(g) Construct a pairwise distribution plot for each interesting pair of columns.
(a) Does it do a good job or a bad job of presenting the data?
(b) Does the presentation appear to be biased, either deliberately or accidentally?
(c) Is there chartjunk in the figure?
(d) Are the axes labeled in a clear and informative way?
(e) Is the color used effectively?
(f) How can we make the graphic better?
Construct a revealing visualization of some aspect of your favorite data set, using:
(a) A well-designed table.
(b) A dot and/or line plot.
(c) A scatter plot.
(d) A heatmap.
(e) A bar plot or pie chart.
(f) A histogram.
(g) A data map.
Create ten different versions of line charts for a particular set of (x, y) points. Which ones are best and which ones worst? 
Experiment with different color scales to construct scatter plots for a particular set of (x, y, z) points, where color is used to represent the z dimension. Which color schemes work best?
Build an interactive exploration widget for your favorite data set, using appropriate libraries and tools.
Create a data video/movie, by recording/filming an interactive data exploration. It should not be long, but how interesting/revealing can you make it?
Explain Tufte’s concept of chart junk
How would you to determine whether the statistics published in an article are either wrong or presented to support a biased view?

Quantum physics is much more complicated than Newtonian physics. Which model passes the Occam’s Razor test, and why?
For each of these, decide which properties these models have:
(a) Are they discrete or continuous?
(b) Are they linear or non-linear?
(c) Are they blackbox or descriptive?
(d) Are they general or ad hoc?
(e) Are they data driven or first principle?
partition the full problem into subproblems that can be independently modeled:
Suppose you build a classifier that answers yes on every possible input. What precision and recall will this classifier achieve?
Explain what precision and recall are. How do they relate to the ROC curve?
Explain what overfitting is, and how you would control for it.
What is the probability p that the monkey should guess positive, as a function of f, in order to maximize the specific evaluation metric below?
a) Accuracy.
(b) Precision.
(c) Recall.
(d) F-score.
What is cross-validation? How might we pick the right value of k for k-fold cross validation?
How might we know whether we have collected enough data to train a model?
Suppose we want to train a binary classifier where one class is very rare. Give an example of such a problem. How should we train this model? What metrics should we use to measure performance?
Build a model to forecast the outcomes of one of the following types of betable events, and rigorously analyze it through back testing:
(a) Sports like football, basketball, and horse racing.
(b) Pooled bets involving multiple events, like soccer pools or the NCAA basketball tournament.
(c) Games of chance like particular lotteries, fantasy sports, and poker.
(d) Election forecasts for local and congressional elections.
(e) Stock or commodity price prediction/trading.
Build a general model evaluation system in your favorite programming language, and set it up with the right data to assess models for a particular problem. Your environment should report performance statistics, error distributions and/or confusion matrices as appropriate.
Estimate prior probabilities for the following events
What do we mean when we talk about the bias–variance trade-off?
What do you think about the idea of injecting noise into your data set to test the sensitivity of your models?
How would you define and measure the predictive power of a metric?

Give a pair of square matrices A and B such that:
(a) AB = BA (it commutes).
(b) AB 6= BA (does not commute).
Prove that AB = BA, if A and B are diagonal matrices of the same order
Is the LU factorization of a matrix unique?
Show that if M is a square matrix which is not invertible, then either L or U in the LU-decomposition M = L · U has a zero in its diagonal.
Find all eigenvalues of M. Does M have two linearly independent eigenvectors?
Compare the speed of a library function for matrix multiplication to your own implementation of the nested loops algorithm.
Implement Gaussian elimination for solving systems of equations, C ·X = Y . Compare your implementation against a popular library routine for
(a) Speed: How does the run time compare, for both dense and sparse coefficient matrices?
(b) Accuracy: What are the size of the numerical residuals CX − Y , particularly as the condition number of the matrix increases.
(c) Stability: Does your program crash on a singular matrix? What about almost singular matrices, created by adding a little random noise to a singular matrix?
Why is vectorization considered a powerful method for optimizing numerical code?
8-21. [3] What is singular value decomposition? What is a singular value? And what is a singular vector?
8-22. [5] Explain the difference between “long” and “wide” format data. When might each arise in practice?

Construct an example on n ≥ 6 points where the optimal regression line is y = x, even though none of the input points lie directly on this line.
Suppose we want to find the best-fitting function y = f(x) where y = w(^2)x + wx. How can we use linear regression to find the best value of w?
Suppose we have the opportunity to pick between using the best fitting model of the form y = f(x) where y = w(^2)x or y = wx, for constant coefficient w. Which of these is more general, or are they identical?
Explain what a long-tailed distribution is, and provide three examples of relevant phenomena that have long tails
Establish the effect that different values for the constant c of the logit function have on the probability of classification being 0.01, 1, 2, and 10 units from the boundary.
Experiment with the effects of fitting non-linear functions with linear regression. For a given (x, y) data set, construct the best fitting line where the set of variables are {1, x, . . . , xk}, for a range of different k
Experiment with the effects of feature scaling in linear regression. For a given data set with at least two features (dimensions), multiply all the values
of one feature by 10k , for −10 ≤ k ≤ 10. 
Experiment with the effects of highly correlated features in linear regression. For a given (x, y) data set, replicate the value of x with small but increasing amounts of random noise. What is returned when the new column is perfectly correlated with the original?
Experiment with the effects of outliers on linear regression. For a given (x, y) data set, construct the best fitting line. Repeatedly delete the point with the largest residual, and refit.
Experiment with the effects of regularization on linear/logistic regression. For a given multi-dimensional data set, construct the best fitting line with (a) no regularization, (b) ridge regression, and (c) LASSO regression; the latter two with a range of constraint values. How does the accuracy of the model change as we reduce the size and number of parameters?
Use linear/logistic regression to build a model for one of the following
Implement such a logistic regression classifier, and extend it to other sports like football.
Suppose we are training a model using stochastic gradient descent. How do we know if we are converging to a solution?
Do gradient descent methods always converge to the same point?
What assumptions are required for linear regression? What if some of these assumptions are violated?
How do we train a logistic regression model? How do we interpret its coefficients?

Prove that Euclidean distance is in fact a metric.
Prove that dimension-weighted Lp distance is a metric for all p ≥ 1
Experiment with data to convince yourself that (a) cosine distance is not a true distance metric, and that (b) angular distance is a distance metric.
Prove that edit distance on text strings defines a metric.
Show that the expected distance between two points chosen uniformly and independently from a line of length 1 is 1/3. Establish convincing upper and lower bounds on this expected distance for partial credit
What is the maximum number of nearest neighbors that a given point p can have in two dimensions, assuming the possibility of ties?
Construct a two-class point set on n ≥ 10 points in two dimensions, where every point would be misclassified according to its nearest neighbor.
Repeat the previous question, but where we now classify each point according to its three nearest neighbors (k = 3).
Suppose a two-class, k = 1 nearest-neighbor classifier is trained with at least three positive points and at least three negative points.
(a) Might it possible this classifier could label all new examples as positive?
(b) What if k = 3?
Give explanations for what the nodes with the largest in-degree and outdegree might be in the following graphs
For each of the following graphs, suggest what their vertex degree distribution is, and if they are power law distributed describe what the preferential attachment mechanism might be.
For each of the following graph-theoretic properties, give an example of a real-world network that satisfies the property, and a second network which does not
Prove that in any simple graph, there are always an even number of vertices with odd vertex degree
Implement a simple version of the PageRank algorithm, and test it on your favorite network. Which vertices get highlighted as most central?
show the clustering that results from
(a) Single-linkage clustering
(b) Average-linkage clustering
(c) Furthest-neighbor (complete linkage) clustering.
propose available data that might make it feasible to employ nearest-neighbor/analogical methods to the task:
Perform k-means clustering manually on the following points, for k = 2: Plot the points and the final clusters.
Implement two versions of a simple k-means algorithm: one of which uses numerical centroids as centers, the other of which restricts centers to be input
points from the data set. Then experiment. Which algorithm converges faster on average? Which algorithm produces clusterings with lower absolute and mean-squared error, and by how much?
Suppose s1 and s2 are randomly selected subsets from a universal set with n items. What is the expected value of the Jaccard similarity
What is the agglomerative clustering tree for these points under
(a) Single-link clustering
(b) Average-link clustering
(c) Complete-link/furthest-neighbor clustering
Do experiments studying the impact of merging criteria (single-link, centroid, average-link, furthest link) on the properties of the resulting cluster tree. Which leads to the tallest trees? The most balanced? How do their running times compare? Which method produces results most consistent with k-means clustering?
Experiment with the performance of different algorithms/data structures for finding the nearest neighbor of a query point q among n points in d dimensions. What is the maximum d for which each method remains viable? How much faster are heuristic methods based on LSH than methods that guarantee the exact nearest neighbor, at what loss of accuracy?
What is curse of dimensionality? How does it affect distance and similarity measures? 
How might we be able to estimate the right number of clusters to use with a given data set
How can you deal with correlated features in your data set by reducing the dimensionality of the data.
Explain what a local optimum is. Why is it important in k-means clustering?

Using the naive Bayes classifier of Figure 11.2, decide whether (Cloudy,High, Normal) and (Sunny,Low,High) are beach days.
Apply the naive Bayes technique for multiclass text classification. Then, using the simple Bernoulli model for word presence, implement a classifier which, given the text of an article from The New York Times, predicts which section the article belongs to.
What is regularization, and what kind of problems with machine learning does it solve?
Give decision trees to represent the following Boolean functions:
(a) Does there always exist a decision tree classifier which perfectly separates A from B?
(b) Does there always exist a decision tree classifier which perfectly separates A from B if the n feature vectors are all distinct?
(c) Does there always exist a logistic regression classifier which perfectly separates A from B?
(d) Does there always exist a logistic regression classifier which perfectly separates A from B if the n feature vectors are all distinct?
Consider a set of n labeled points in two dimensions. Is it possible to build a finite-sized decision tree classifier with tests of the form “is x > c?”, “is x < c?”, “is y > c?”, and “is y < c?” which classifies each possible query exactly like a nearest neighbor classifier?
Give a linear-time algorithm to find the maximum-width separating line in one dimension.
find the maximum-width separating line in k dimensions.
Suppose we use support vector machines to find a perfect separating line between a given set of n red and blue points. Now suppose we delete all the
points which are not support vectors, and use SVM to find the best separator of what remains. Might this separating line be different than the one before?
Specify the network structure and node activation functions to enable a neural network model to implement linear regression
Find a data set involving an interesting sequence of symbols: perhaps text, color sequences in images, or event logs from some device. Use word2vec to construct symbol embeddings from them, and explore through nearest neighbor analysis. What interesting structures do the embeddings capture?
Experiment with different discounting methods estimating the frequency of words in English. In particular, evaluate the degree to which frequencies on
short text files (1000 words, 10,000 words, 100,000 words, and 1,000,000 words) reflect the frequencies over a large text corpora, say, 10,000,000 words.
When would you use random forests vs. SVMs, and why?
How would you come up with a program to identify plagiarism in documents?

What is the difference between parallel processing and distributed processing?
What are the benefits of MapReduce?
Design MapReduce algorithms to take large files of integers and compute:
• The largest integer.
• The average of all the integers.
• The number of distinct integers in the input.
• The mode of the integers.
• The median of the integers
Would we expect map skew to be a bigger problem when there are ten reducers or a hundred reducers?
What are five practical ways one can go about protecting privacy in big data?
For what tasks would you trust human judgment more than an algorithm? Why?
Do the stream sampling methods we discussed really produce uniform random samples from the desired distribution? Implement them, draw samples, and run them through the appropriate statistical test.
12-11. [5] Set up a Hadoop or Spark cluster that spans two or more machines. Run a basic task like word counting. Does it really run faster than a simple job on one machine? How many machines/cores do you need in order to win?
12-12. [5] Find a big enough data source which you have access to, that you can justify processing with more than a single machine. Do something interesting with it.
Give five predictions about what will happen in the world over the next twenty years?
How might you detect bogus reviews, or bogus Facebook accounts used for bad purposes?
What are hash table collisions? How can they be avoided? How frequently do they occur?


































(a) Using visualizations, explore the predictor variables to understand their distributions as well as the relationships between predictors.
(b) Do there appear to be any outliers in the data? Are any predictors skewed?
(c) Are there any relevant transformations of one or more predictors that might improve the classification model?
(a) Investigate the frequency distributions for the categorical predictors. Are any of the distributions degenerate in the ways discussed earlier in this chapter?
(b) Roughly 18 % of the data are missing. Are there particular predictors that are more likely to be missing? Is the pattern of missing data related to the classes?
(c) Develop a strategy for handling missing data, either by eliminating predictors or imputation.
(b) Do any of the individual predictors have degenerate distributions?
(c) Generally speaking, are there strong relationships between the predictor data? If so, how could correlations in the predictor set be reduced? Does this have a dramatic effect on the number of predictors available for modeling?

Use PCA to determine the effective dimension of these data. What is the effective dimension?
Split the data into a training and a test set, pre-process the data, and build each variety of models described in this chapter. For those models with tuning parameters, what are the optimal values of the tuning parameter(s)?
(d) Which model has the best predictive ability? Is any model significantly better or worse than the others?
(e) Explain which model you would use for predicting the fat content of a sample.
Filter out the predictors that have low frequencies using the nearZeroVar function from the caret package. How many predictors are left for modeling?
(c) Split the data into a training and a test set, pre-process the data, and tune a PLS model. How many latent variables are optimal and what is the corresponding resampled estimate of R2?
(d) Predict the response for the test set. What is the test set estimate of R2?
(e) Try building other models discussed in this chapter. Do any have better predictive performance?
(f) Would you recommend any of your models to replace the permeability laboratory experiment?
Use an imputation function to fill in these missing values
(c) Split the data into a training and a test set, pre-process the data, and tune a model of your choice from this chapter. What is the optimal value of the performance metric?
(d) Predict the response for the test set. What is the value of the performance metric and how does this compare with the resampled performance metric on the training set?
(e) Which predictors are most important in the model you have trained? Do either the biological or process predictors dominate the list?
(f) Explore the relationships between each of the top predictors and the response. How could this information be helpful in improving yield in future runs of the manufacturing process?

Simulate a single predictor and a nonlinear relationship, such as a sin wave shown in Fig. 7.7, and investigate the relationship between the cost, e, and kernel parameters for a support vector machine model:
Fit different models using a radial basis function and different values of the cost (the C parameter) and e. Plot the fitted curve.
Try different values of σ to understand how this parameter changes the model fit. How do the cost, e, and σ values affect the model?
Tune several models on these data.
Which models appear to give the best performance? Does MARS select the informative predictors 
build SVM, neural network, MARS, and KNN models. Since neural networks are especially sensitive to highly correlated predictors, does pre-processing using PCA help the model?
Which nonlinear regression model gives the optimal resampling and test set performance?
Would you recommend any of the models you have developed to replace the permeability laboratory experiment?
(a) Which nonlinear regression model gives the optimal resampling and test set performance?
(b) Which predictors are most important in the optimal nonlinear regression model? Do either the biological or process variables dominate the list? How do the top ten important predictors compare to the top ten predictors from the optimal linear model?
(c) Explore the relationships between the top predictors and the response for the predictors that are unique to the optimal nonlinear regression model. Do these plots reveal intuition about the biological or process predictors and their relationship with yield?

(a) Given the classification imbalance in hepatic injury status, describe how you would create a training and testing set.
b) Which classification statistic would you choose to optimize for this exercise and why?
(c) Split the data into a training and a testing set, pre-process the data, and build models described in this chapter for the biological predictors
and separately for the chemical fingerprint predictors. Which model has the best predictive ability for the biological predictors and what is the
optimal performance? Which model has the best predictive ability for the chemical predictors and what is the optimal performance? Based on these results, which set of predictors contains the most information about hepatic toxicity?
(d) For the optimal models for both the biological and chemical predictors, what are the top five important predictors?
(e) Now combine the biological and chemical fingerprint predictors into one predictor set. Retrain the same set of predictive models you built from part  c. Which model yields best predictive performance? Is the model performance better than either of the best models from part (c)? What are the top five important predictors for the optimal model? How do these compare with the optimal predictors from each individual predictor set?
(f) Which model (either model of individual biology or chemical fingerprints or the combined predictor model), if any, would you recommend using to predict compounds’ hepatic toxicity? Explain.
(a) Like the hepatic injury data, these data suffer from extreme imbalance. Given this imbalance, should the data be split into training and test sets?
(b) Which classification statistic would you choose to optimize for this exercise and why?
(c) Of the models presented in this chapter, which performs best on these data? Which oil type does the model most accurately predict? Least accurately predict?
(a) Explore the data by visualizing the relationship between the predictors and the outcome. Are there important features of the predictor data themselves, such as between-predictor correlations or degenerate distributions? Can functions of more than one predictor be used to model the data more effectively?
(b) Fit some basic models to the training set and tune them via resampling. What criteria should be used to evaluate the effectiveness of the models?
(c) Use lift charts to compare models. If you wanted to identify 80 % of the churning customers, how many other customers would also be identified?

(a) Work with the same training and testing sets as well as pre-processing steps as you did in your previous work on these data. Using the same classification statistic as before, build models described in this chapter for the biological predictors and separately for the chemical fingerprint
predictors. Which model has the best predictive ability for the biological predictors and what is the optimal performance? Which model has the best predictive ability for the chemical predictors and what is the optimal performance? Does the nonlinear structure of these models help to improve the classification performance?
(b) For the optimal models for both the biological and chemical predictors, what are the top five important predictors?
(c) Now combine the biological and chemical fingerprint predictors into one predictor set. Re-train the same set of predictive models you built from
part (a). Which model yields best predictive performance? Is the model performance better than either of the best models from part (a)? What are the top 5 important predictors for the optimal model? How do these compare with the optimal predictors from each individual predictor set? How do these important predictors compare the predictors from the linear models?
(d) Which model (either model of individual biology or chemical fingerprints or the combined predictor model), if any, would you recommend using to predict compounds’ hepatic toxicity? Explain.
(a) Use the same data splitting approach (if any) and pre-processing steps that you did in the previous chapter. Using the same classification statistic
as before, build models described in this chapter for these data. Which model has the best predictive ability? How does this optimal model’s performance compare to the best linear model’s performance? Would you infer that the data have nonlinear separation boundaries based on this comparison?
(b) Which oil type does the optimal model most accurately predict? Least accurately predict?

(a) Within each modeling technique, which factors are in common between the independent category and factor models?
(b) How do these results compare with the most prolific predictors found in the PART model results discussed in Sect. 14.2?
(a) Fit a few basic trees to the training set. Should the area code be encoded as independent dummy variables or as a grouped set of values?
(b) Does bagging improve the performance of the trees? What about boosting?
(c) Apply rule-based models to the data. How is the performance? Do the rules make any sense?
(d) Use lift charts to compare tree or rule models to the best techniques from previous chapters.
(a) Fit a random forest model using both CART trees and conditional inference trees to the chemistry predictors, using the Kappa statistic as the metric as follows:
Which model has better performance, and what are the corresponding tuning parameters?
(b) Use the following syntax to obtain the computation time for each model:
Which model takes less computation time? Given the trade-off between performance and computation time, which model do you prefer?
(c) Use the following syntax to obtain the variable importance for the top ten predictors for each model:
Are there noticeable differences in variable importance between the top ten predictors for each model? Explain possible reasons for the differences.

(a) Load the data and investigate the predictors in terms of their distributions and potential correlations.
(b) Determine an appropriate split of the data.
(c) Build several classification models for these data. Do the results favor the small income class?
(d) Is there a good trade-off that can be made between the sensitivity and specificity?
(e) Use sampling methods to improve the model fit.
(f) Do cost-sensitive models help performance?
(a) Read the data into R, conduct exploratory analyses, and determine the best method for encoding the predictors.
(b) Determine an appropriate split of the data and build several classification models for these data.
(c) Construct lift plots to understand a possible strategy regarding how many customers should be contacted to capture an estimated 60 % of responders.
(d) Use sampling methods with several models. Do these models have better lift charts, and can they be used to contact fewer customers to achieve a 60 % response rate (of those who were given the promotion)?

(a) Calculate the correlations between predictors. Are there strong relationships between these variables? How does this compare to what one would expect with these attributes?
(b) Assess the importance of the categorical predictors (i.e., area code, voice mail plan, etc) individually using the training set.
(c) Also estimate the importance scores of the continuous predictors individually.
(d) Now use ReliefF to jointly estimate the importance of the predictors. Is there a difference in rankings? Why or why not?
For the oil type data described in Exercise 4.4, estimate variable importance scores. Does the large number of classes affect the process of quantifying the importances?
(a) Plot the data to assess the functional relationships between the predictors and the outcome.
(b) Use scatter plots and correlation plots to understand how the predictors relate to one another.
(c) Estimate variable importance scores for each predictor. Develop an approach to determining a reduced set of nonredundant predictors.
(d) Apply principal component analysis to the continuous predictors to determine how many distinct underlying pieces of information are in the data. Would feature extraction help these data?

determine if the between-predictor correlations shown specifically,
(a) Create an initial filter of the predictors that removes predictors to minimize the amount of multicollinearity in the data prior to modeling.
(b) Refit the recursive feature selection models.
(c) Did the RFE profiles shown in Fig. 19.4 change considerably? Which models would have been mostly likely affected by multicollinearity?
Use the same resampling process to evaluate a penalized LDA model. How does performance compare? Is the same variable selection pattern observed in both models?
Apply different combinations of filters and predictive models to the biomarker data. Are the same predictors retained across different filters? Do models react differently to the same predictor set?
a) Simulate a training and test set with n = 500 samples per data set. Plot the predictors against the outcome in the training set using scatter plots, correlation plots, table plots, and other visualizations.
(b) Use forward, backward, and stepwise algorithms for feature selection. Did the final models select the full set of predictors? Why or why not? If crossvalidation was used with these search tools, was the performance similar to the test set?
(c) Use recursive feature selection with several different models? How did these methods perform? Were the informative predictors selected?
(d) Apply filter methods to the data using filters where each predictor is evaluated separately and others are evaluated simultaneously (e.g., the ReliefF algorithm). Were the two interacting predictors (x1 and x2) selected? Was one favored more than the other?
(e) Reduce the sample size of the training set and add a larger number of noninformative predictors. How do these search procedures perform under more extreme circumstances?
(a) Use filter and wrapper methods to determine an optimal set of predictors.
(b) For linear discriminant analysis and logistic regression, use the alternative versions of these models with built-in feature selection (e.g., the glmnet and sparse LDA). How do the different approaches compare in terms of performance, the number of predictors required, and training time?

(a) Based on the figure, which continuous model performs best (and worst) on the test set? Which categorical model performs best (and worst)?
(b) Examine the results from the neural net models. If the predicted probability for a compound is close to zero, what is the range of actual solubility values for the test set? If the predicted solubility value (from the continuous model) is close to −10, what is the range of actual solubility values? Which model (categorical or continuous) gives more precise results at this extreme?
(c) Are any of the categorical models better than the corresponding regression models? If yes, then explain.


(a) Fit a linear model, a nonlinear model, and a tree-based model to the three-bin data. For example, the following code could be used to generate a recursive partitioning model:
(b) Predict test set performance using the performance measure of your choice for each of the models in (a). Which model performs best for the three-bin data?
(c) Now exclude the “MidRange” data from the training set, rebuild each model, and predict the test set. This can be done with recursive partitioning as follows:
(d) How do sensitivity and specificity compare for the insoluble and soluble classes for the binning approaches in (b) and (c) within each model and between models?
Based on class probabilities, does the two- or three-class model provide any distinct prediction advantages for the insoluble and/or soluble compounds? How do the predicted class probabilities within the insoluble and soluble groups compare for the other models you have developed?
Load the data and create a training and testing set as follows
Run Algorithm 20.1 using the training set. Which test set samples are not likely to be members of the training set? Why are these samples not likely to be members of the training set
What does this plot reveal about the location of the samples that are not likely to be members of the training set?
(c) What steps could be taken to better ensure that the training and test sets cover the same region of predictor space?












































Define each of the following data mining functionalities: characterization, discrimination, association and correlation analysis, classification, regression, clustering, and outlier analysis
Describe three challenges to data mining regarding data mining methodology and user interaction issues.

Give three additional commonly used statistical measures that are not already illustrated in this chapter for the characterization of data dispersion. Discuss how they can be computed efficiently in large databases.
(a) What is the mean of the data? What is the median?
(b) What is the mode of the data? Comment on the data’s modality (i.e., bimodal, trimodal, etc.).
(c) What is the midrange of the data?
(d) Can you find (roughly) the first quartile (Q1) and the third quartile (Q3) of the data?
(e) Give the five-number summary of the data.
(f) Show a boxplot of the data.
(g) How is a quantile–quantile plot different from a quantile plot?
Compute an approximate median value for the dat
a) Calculate the mean, median, and standard deviation of age and %fat.
(b) Draw the boxplots for age and %fat.
(c) Draw a scatter plot and a q-q plot based on these two variables.
Briefly outline how to compute the dissimilarity between objects described by the following:
(a) Nominal attributes
(b) Asymmetric binary attributes
(c) Numeric attributes
(d) Term-frequency vectors
(a) Compute the Euclidean distance between the two objects.
(b) Compute the Manhattan distance between the two objects.
(c) Compute the Minkowski distance between the two objects, using q = 3.
(d) Compute the supremum distance between the two objects.
rank the database points based on similarity with the query using Euclidean distance, Manhattan distance, supremum distance, and cosine similarity.
(b) Normalize the data set to make the norm of each data point equal to 1. Use Euclidean distance on the transformed data to rank the data points

discuss how data quality assessment can depend on the intended use of the data, giving examples. Propose two other dimensions of data quality
In real-world data, tuples with missing values for some attributes are a common occurrence. Describe various methods for handling this problem
(a) Use smoothing by bin means to smooth these data, using a bin depth of 3. Illustrate your steps. Comment on the effect of this technique for the given data.
(b) How might you determine outliers in the data?
(c) What other methods are there for data smoothing?
Discuss issues to consider during data integration.
What are the value ranges of the following normalization methods?
(a) min-max normalization
(b) z-score normalization
(c) z-score normalization using the mean absolute deviation instead of standard deviation
(d) normalization by decimal scaling
(a) Use min-max normalization to transform the value 35 for age onto the range [0.0,1.0].
(b) Use z-score normalization to transform the value 35 for age, where the standard deviation of age is 12.94 years.
(c) Use normalization by decimal scaling to transform the value 35 for age.
(d) Comment on which method you would prefer to use for the given data, giving reasons as to why
a) Normalize the two attributes based on z-score normalization.
(b) Calculate the correlation coefficient (Pearson’s product moment coefficient). Are these two attributes positively or negatively correlated? Compute their covariance.
Partition them into three bins by each of the following methods:
(a) equal-frequency (equal-depth) partitioning
(b) equal-width partitioning
(c) clustering
Use a flowchart to summarize the following procedures for attribute subset selection:
(a) stepwise forward selection
(b) stepwise backward elimination
(c) a combination of forward selection and backward elimination
(a) Plot an equal-width histogram of width 10.
(b) Sketch examples of each of the following sampling techniques: SRSWOR, SRSWR, cluster sampling, and stratified sampling.
(a) Briefly describe how ChiMerge works
Perform data discretization for each of the four numeric attributes using the ChiMerge method. (Let the stopping criteria be: max-interval = 6). You need to write a small program to do this to avoid clumsy numerical computation. Submit your simple analysis and your test results: split-points, final intervals, and the documented source program.
Propose an algorithm, in pseudocode or in your favorite programming language, for the following:
(a) The automatic generation of a concept hierarchy for nominal data based on the number of distinct values of attributes in the given schema.
(b) The automatic generation of a concept hierarchy for numeric data based on the equal-width partitioning rule.
(c) The automatic generation of a concept hierarchy for numeric data based on the equal-frequency partitioning rule.
Work out an automated data cleaning and loading algorithm so that the erroneous data will be marked and contaminated data will not be mistakenly inserted into the database during data loading.

State why, for the integration of multiple heterogeneous information sources, many companies in industry prefer the update-driven approach (which constructs and uses data warehouses), rather than the query-driven approach (which applies wrappers and integrators). Describe situations where the query-driven approach is preferable to the update-driven approach
Briefly compare the following concepts. You may use an example to explain your point(s).
(a) Snowflake schema, fact constellation, starnet query model
(b) Data cleaning, data transformation, refresh
(c) Discovery-driven cube, multifeature cube, virtual warehouse
Suppose that a data warehouse consists of the three dimensions time, doctor, and patient, and the two measures count and charge, where charge is the fee that a doctor charges a patient for a visit.
(a) Enumerate three classes of schemas that are popularly used for modeling data warehouses.
(b) Draw a schema diagram for the above data warehouse using one of the schema classes listed in (a).
(c) Starting with the base cuboid [day,doctor,patient], what specific OLAP operations should be performed in order to list the total fee collected by each doctor in 2010?
(d) To obtain the same list, write an SQL query assuming the data are stored in a relational database with the schema fee (day, month, year, doctor, hospital, patient, count, charge)
(a) Draw a snowflake schema diagram for the data warehouse.
(b) Starting with the base cuboid [student,course,semester,instructor], what specific OLAP operations (e.g., roll-up from semester to year) should you perform in order to list the average grade of CS courses for each Big University student.
(c) If each dimension has five levels (including all), such as “student < major < status < university < all”, how many cuboids will this cube contain (including the base and apex cuboids)?
(a) Draw a star schema diagram for the data warehouse.
(b) Starting with the base cuboid [date,spectator,location, game], what specific OLAP operations should you perform in order to list the total charge paid by student spectators at GM Place in 2010?
(c) Bitmap indexing is useful in data warehousing. Taking this cube as an example, briefly discuss advantages and problems of using a bitmap index structure.
Briefly describe the similarities and the differences of the two models, and then analyze their advantages and disadvantages with regard to one another. Give your opinion of which might be more empirically useful and state the reasons behind your answer.
Design a data warehouse for a regional weather bureau
(a) Present an example illustrating such a huge and sparse data cube.
(b) Design an implementation method that can elegantly overcome this sparse matrix problem. Note that you need to explain your data structures in detail and discuss the space needed, as well as how to retrieve data from your structures.
(c) Modify your design in (b) to handle incremental data updates. Give the reasoning behind your new design.
(a) Enumerate three categories of measures, based on the kind of aggregate functions used in computing a data cube.
(b) For a data cube with the three dimensions time, location, and item, which category does the function variance belong to? Describe how to compute it if the cube is partitioned into many chunks.
(c) Suppose the function is “top 10 sales.” Discuss how to efficiently compute this measure in a data cube.
(a) Design such a data warehouse to facilitate effective online analytical processing in multidimensional space.
(b) The movement data may contain noise. Discuss how you would develop a method to automatically discover data records that were likely erroneously registered in the data repository.
(c) The movement data may be sparse. Discuss how you would develop a method that constructs a reliable data warehouse despite the sparsity of data.
(d) If you want to drive from A to B starting at a particular time
(a) Design a data warehouse to facilitate effective registration and online analytical processing of such data.
(b) The RFID data may contain lots of redundant information. Discuss a method that maximally reduces redundancy during data registration in the RFID data warehouse.
(c) The RFID data may contain lots of noise such as missing registration and misread IDs. Discuss a method that effectively cleans up the noisy data in the RFID data warehouse.
(d) You may want to perform online analytical processing to determine how many TV sets were shipped from the LA seaport to BestBuy in Champaign, IL, by month, brand, and price range. Outline how this could be done efficiently if you were to store such RFID data in the warehouse.
(e) If a customer returns a jug of milk and complains that is has spoiled before its expiration date, discuss how you can investigate such a case in the warehouse to find out what the problem is, either in shipping or in storage.
Use count, standard deviation, and median as examples to show that a distributive or algebraic measure facilitates efficient incremental computation, whereas a holistic measure does not.
Design an efficient computation and storage method for each measure given that the cube allows data to be deleted incrementally (i.e., in small portions at a time) from the cube.
(a) Briefly describe each implementation technique.
(b) For each technique, explain how each of the following functions may be implemented:
i. The generation of a data warehouse (including aggregation)
ii. Roll-up
iii. Drill-down
iv. Incremental updating
(c) Which implementation techniques do you prefer, and why?
(a) Users are mainly interested in four particular dimensions, each having three frequently accessed levels for rolling up and drilling down. How would you design a data cube structure to support this preference efficiently?
(b) At times, a user may want to drill through the cube to the raw data for one or two particular dimensions. How would you support this feature?
(a) What is the maximum number of cells possible in the base cuboid?
(b) What is the minimum number of cells possible in the base cuboid?
(c) What is the maximum number of cells possible (including both base cells and aggregate cells) in the C data cube?
(d) What is the minimum number of cells possible in C?
What are the differences between the three main types of data warehouse usage: information processing, analytical processing, and data mining? Discuss the motivation behind OLAP mining (OLAM).

(a) How many nonempty cuboids will a full data cube contain?
(b) How many nonempty aggregate (i.e., nonbase) cells will a full cube contain?
(c) How many nonempty aggregate cells will an iceberg cube contain if the condition of the iceberg cube is “count ≥ 2”?
A closed cube is a data cube consisting of only closed cells. How many closed cells are in the full cube?
(a) Computing a dense full cube of low dimensionality (e.g., less than eight dimensions).
(b) Computing an iceberg cube of around 10 dimensions with a highly skewed data distribution.
(c) Computing a sparse iceberg cube of high dimensionality (e.g., over 100 dimensions).
(a) Present a formula to calculate the minimum number of cells that the cube, C, may contain.
(b) Present a formula to calculate the maximum number of cells that C may contain.
(c) Answer parts (a) and (b) as if the count in each cube cell must be no less than a threshold, v.
(d) Answer parts (a) and (b) as if only closed cells are considered (with the minimum count threshold, v).
(a) Assuming each dimension has only one level, draw the complete lattice of the cube.
(b) If each cube cell stores one measure with four bytes, what is the total size of the computed cube if the cube is dense?
(c) State the order for computing the chunks in the cube that requires the least amount of space, and compute the total amount of main memory space required for computing the 2-D planes.
(a) Design an implementation method that can elegantly overcome this sparse matrix problem.
(b) Modify your design in (a) to handle incremental data updates. Give the reasoning behind your new design
Compute the number of nonempty aggregate cells. Comment on the storage space and time required to compute these cells.
how many aggregate cells will there be in the iceberg cube? Show the cells.
Propose an algorithm that computes closed iceberg cubes efficiently
Show the BUC processing tree (which shows the order in which the BUC algorithm explores a data cube’s lattice, starting from all) for the construction of this iceberg cube.
Discuss how you might extend the Star-Cubing algorithm to compute iceberg cubes where the iceberg condition tests for an avg that is no bigger than some value, v.
i. What challenging computation problems are encountered as the number of dimensions grows large?
ii. How can iceberg cubing solve the problems of part (a) for some data sets (and characterize such data sets)?
iii. Give one simple example to show that sometimes iceberg cubes cannot provide a good solution.
(a) How can we construct an efficient and scalable high-dimensional sampling cube in large sampling data sets?
(b) Design an efficient incremental update algorithm for such a high-dimensional sampling cube.
(c) Discuss how to support quality drill-down given that some low-level cells may be empty or contain too few data for reliable analysis.
(a) Design a ranking cube so that skyline queries can be processed efficiently
(a) Derive an efficient method for computing such aggregate ranking cubes.
(b) Extend your framework to handle more advanced measures.
(a) Propose an efficient algorithm that computes prediction cubes in a given multidimensional database.
(b) For what kind of classification models can your algorithm be applied? Explain.
(a) Derive an efficient computation method to identify such points during the data cube computation.
(b) Suppose a partially materialized cube has (d − 1)-dimensional and (d + 1)- dimensional cuboids materialized but not the d-dimensional one. Derive an efficient method to mark those (d − 1)-dimensional cells with d-dimensional children that contain such marked points.

Describe an algorithm to determine whether a given itemset X is frequent or not, and the support of X if it is frequent.
(a) Can you determine whether an itemset A is frequent and the support of A, if it is frequent, using only G and the support counts of all frequent generators? If yes, present your algorithm. Otherwise, what other information is needed? Can you give an algorithm assuming the information needed is available?
(b) What is the relationship between closed itemsets and generators?
(a) Prove that all nonempty subsets of a frequent itemset must also be frequent.
(b) Prove that the support of any nonempty subset s 0 of itemset s must be at least as great as the support of s.
(d) A partitioning variation of Apriori subdivides the transactions of a database D into n nonoverlapping partitions. Prove that any itemset that is frequent in D must be frequent in at least one partition of D.
How many length-(k − 1) subsets do we need to check in the prune step?
(a) Find all frequent itemsets using Apriori and FP-growth, respectively. Compare the efficiency of the two mining processes.
(b) List all the strong association rules (with support s and confidence c) matching the following metarule, where X is a variable representing customers, and itemi denotes variables representing items (e.g., “A,” “B,”):
implement three frequent itemset mining algorithms introduced in this chapter: (1) Apriori [AS94b], (2) FP-growth [HPY00], and (3) Eclat [Zak00] (mining using the vertical data format). Compare the performance of each algorithm with various kinds of large data sets. Write a report to analyze the situations (e.g., data size, data distribution, minimal support threshold setting, and pattern density) where one algorithm may perform better than the others, and state why.
list the frequent k-itemset for the largest k, and all the strong association rules (with their support s and confidence c) containing the frequent k-itemset for the largest k.
Propose an efficient algorithm to mine global association rules
Discuss how to efficiently mine the (global) association rules under the same minimum support threshold, if a set of new transactions, denoted as 1DB, is (incrementally) added in?
Give a short example to show that items in a strong association rule actually may be negatively correlated.
(a) Propose a method to efficiently mine a set of coauthor relationships that are closely correlated (e.g., often coauthoring papers together).
(b) Based on the mining results and the pattern evaluation measures discussed in this chapter, discuss which measure may convincingly uncover close collaboration patterns better than others.
(c) Based on the study in (a), develop a method that can roughly predict advisor and advisee relationships and the approximate period for such advisory supervision.

Propose and outline a level-shared mining approach to mining multilevel association rules in which each item is encoded by its level position. Design it so that an initial scan of the database collects the count for each item at each concept level, identifying frequent and subfrequent items. Comment on the processing cost of mining multilevel associations with this method in comparison to mining single-level associations.
Discuss how to design an efficient method to mine the transaction data sets and explain how multidimensional and multilevel mining methods can help you derive a good solution
Discuss how such quantitative rules can be discovered systematically and efficiently in large data sets with quantitative attributes.
Develop an algorithm than mines the set of constrained gradient cells efficiently in a large data cube.
Design an efficient pattern growth algorithm for mining the set of negatively correlated patterns.
Prove that each entry in the following table correctly characterizes its corresponding rule constraint for frequent itemset mining
For each of the following cases, identify the kinds of constraints they represent and briefly discuss how to mine such association rules using constraint-based pattern mining.
Suppose a user would like to obtain only k patterns (where k is a small integer). Outline an efficient method that generates the k most representative patterns, where more distinct patterns are preferred over very similar patterns. Illustrate the effectiveness of your method using a small data set.
Develop a method for automated semantic pattern annotation that makes good use of typed information.

Briefly outline the major steps of decision tree classification.
Why is tree pruning useful in decision tree induction? What is a drawback of using a separate set of tuples to evaluate pruning?
Given data set, D, the number of attributes, n, and the number of training tuples, |D|, show that the computational cost of growing a tree is at most n × |D| × log(|D|).
Given a 5-GB data set with 50 attributes (each containing 100 distinct values) and 512 MB of main memory in your laptop, outline an efficient method that constructs decision trees in such large data sets
(a) How would you modify the basic decision tree algorithm to take into consideration the count of each generalized data tuple (i.e., of each row entry)?
(b) Use your algorithm to construct a decision tree from the given data.
Develop a scalable na¨ıve Bayesian classification algorithm that requires just a single scan of the entire data set for most databases. Discuss whether such an algorithm can be refined to incorporate boosting to further enhance its classification accuracy
Design an efficient method that performs effective na¨ıve Bayesian classification over an infinite data stream
Show that accuracy is a function of sensitivity and specificity
For each tuple, compute the values for the number of true positives (TP), false positives (FP), true negatives (TN), and false negatives (FN). Compute the true positive rate (TPR) and false positive rate (FPR). Plot the ROC curve for the data.
What is boosting? State why it may improve the accuracy of decision tree induction.
Outline methods for addressing the class imbalance problem. Suppose a bank wants to develop a classifier that guards against fraudulent credit card transactions. Illustrate how you can induce a quality classifier based on a large set of nonfraudulent examples and a very small set of fraudulent cases.

(a) Design a multilayer feed-forward neural network for the given data. Label the nodes in the input and output layers.
(b) Using the multilayer feed-forward neural network obtained in (a), show the weight values after one iteration of the backpropagation algorithm, given the training instance “(sales, senior, 31 . . . 35, 46K . . . 50K)”. Indicate your initial weight values and biases and the learning rate used.
Discuss how to overcome this difficulty and develop a scalable SVM algorithm for efficient SVM classification in large data sets.
Compare and contrast associative classification and discriminative frequent pattern–based classification. Why is classification based on frequent patterns able to achieve higher classification accuracy in many cases than a classic decision tree method?
Compare the advantages and disadvantages of eager classification (e.g., decision tree, Bayesian, neural network) versus lazy classification (e.g., k-nearest neighbor, case-based reasoning).
Write an algorithm for k-nearest-neighbor classification given k, the nearest number of neighbors, and n, the number of attributes describing each tuple.
Briefly describe the classification processes using (a) genetic algorithms, (b) rough sets, and (c) fuzzy sets.
Using error correction, what class label should be assigned to the tuple?
(b) Explain why using a 4-bit vector for the codewords is insufficient for error correction
(a) Describe semi-supervised classification, active learning, and transfer learning. Elaborate on applications for which they are useful, as well as the challenges of these approaches to classification.
(b) Research and describe an approach to semi-supervised classification other than selftraining and cotraining.
(c) Research and describe an approach to active learning other than pool-based learning.
(d) Research and describe an alternative approach to instance-based transfer learning

Briefly describe and give examples of each of the following approaches to clustering: partitioning methods, hierarchical methods, density-based methods, and grid-based methods.
Use the k-means algorithm to show only
(a) The three cluster centers after the first round of execution.
(b) The final three clusters.
Use an example to show why the k-means algorithm may not find the global optimum, that is, optimizing the within-cluster variation.
Explain why this method will not only speed up the convergence of the k-means algorithm, but also guarantee the quality of the final clustering results.
Provide the pseudocode of the object reassignment step of the PAM algorithm
a) Illustrate the strength and weakness of k-means in comparison with k-medoids.
(b) Illustrate the strength and weakness of these schemes in comparison with a hierarchical clustering scheme (e.g., AGNES).
Prove that in DBSCAN, the density-connectedness is an equivalence relation
Provide the pseudocode of the OPTICS algorithm.
Provide the pseudocode of the step in CLIQUE that finds dense cells in all subspaces.
Present conditions under which density-based clustering is more suitable than partitioning-based clustering and hierarchical clustering.
Give an example of how specific clustering methods can be integrated, for example, where one clustering algorithm is used as a preprocessing step for another. In addition, provide reasoning as to why the integration of two methods may sometimes lead to improved clustering quality and efficiency.
design a clustering method that finds clusters in large data cubes effectively and efficiently.
Describe each of the following clustering algorithms in terms of the following criteria: (1) shapes of clusters that can be determined; (2) input parameters that must be specified; and (3) limitations.
Can you design a data visualization method that may help humans visualize data clusters and judge the clustering quality for 3-D data? What about for even higher-dimensional data?
Categorize the kinds of constraints that can be imposed on the clusters produced and discuss how to perform clustering efficiently under such kinds of constraints.
10.20 Design a privacy-preserving clustering method so that a data owner would be able to ask a third party to mine the data for quality clustering without worrying about the potential inappropriate disclosure of certain private or sensitive information stored in the data.
10.21 Show that BCubed metrics satisfy the four essential requirements for extrinsic clustering evaluation methods.

Traditional clustering methods are rigid in that they require each object to belong exclusively to only one cluster. Explain why this is a special case of fuzzy clustering
Compare the MaPle algorithm (Section 11.2.3) with the frequent closed itemset mining algorithm, CLOSET (Pei, Han, and Mao [PHM00]).
In a large sparse graph where on average each node has a low degree, is the similarity matrix using SimRank still sparse? If so, in what sense? If not, why? Deliberate on your answer.
Compare the SCAN algorithm (Section 11.3.3) with DBSCAN (Section 10.4.1). What are their similarities and differences?

Give an application example of where the border between normal objects and outliers is often unclear, so that the degree to which an object is an outlier has to be well estimated.
Adapt a simple semi-supervised method for outlier detection.
Using an equal-depth histogram, design a way to assign an object an outlier score.
Show that when the number of outlier objects is small with respect to the total number of objects in the whole data set, the expected number of distance calculations is linear to the number of objects.
Propose a clustering-based outlier detection method that can find outliers at different levels.
In outlier detection by semi-supervised learning, what is the advantage of using objects without labels in the training data set?

Present an overview of methods for sequence clustering.
Summarize the methods for mining structured patterns, including sequences, trees, graphs, and partial order relationships. Examine what kinds of structural pattern mining have not been covered in research. Propose applications that can be created for such new mining problems.
What are the major differences between methodologies for mining heterogeneous information networks and methods for their homogeneous counterparts?
esearch and describe a data mining application that was not presented in this chapter. Discuss how different forms of data mining can be used in the application.
Why is the establishment of theoretical foundations important for data mining? Name and describe the main theoretical foundations that have been proposed for data mining. Comment on how they each satisfy (or fail to satisfy) the requirements of an ideal theoretical framework for data mining
Take one theory as an example (e.g., data compression theory) and examine how the major data mining functions fit into this framework. If some functions do not fit well into the current theoretical framework, can you propose a way to extend the framework to explain these functions?
Propose a visualization method that may help people see through the network topology to the interesting features of a social network
Propose a few implementation methods for audio data mining. Can we integrate audio and visual data mining to bring fun and power to data mining?

























Embedded systems

Identify the processor type and manufacturer of five different devices, excluding servers, laptops, and desktops.
a) How many bits does a machine instruction have? How many bits does the memory address have?
b) What is the maximum memory capacity they can support?
c) Do they have Harvard architecture and Von Neumann architecture?
a) How does the PC value change after fetching a 32-bit instruction?
b) How does PC change after executing a 16-bit instruction? 
Implement the logic of a simple ALU that performs 2-bit addition and subtraction.
Design a 4-bit register by using flip-flops and answer the following questions.
a) How many bits does the address bus have?
b) How many bits does the data bus have?
c) What else input signals should the register have? 
a) How many unique memory locations can a 32-bit address access? 
Why do not embedded systems use virtual memory usually? 
Compile a C program in Linux into a binary executable and use the readelf command to display the information of a binary executable. Identify the data sections and instruction/data sections of a binary executable program. 
If the instruction memory and the data memory shares the same address bus, design a memory allocation scheme for this processo
Why can instruction memory and data memory share the same address bus in Cortex-M3, Cortex-M4, and Cortex-M7? 
What is the value of the destination register rl after the following instruction completes? 
a) How many clock cycles does it take to execute 10 instructions? What is the throughput (measured in instructions per cycle)?
b) How many clock cycles does it take to execute n instructions? If n is sufficiently large, what is the throughput in terms of instructions per cycle? 
If two processors given below run the same binary program, which processor runs faster and how many times faster? 

For the six-bit binary values given below, find the equivalent decimal values when the data is interpreted as signed or unsigned integers, respectively. 
Complete the following arithmetic operations in two's complement representation. What are the value of the carry flag and the overflow flag? 
To check for the signed greater or equal (GE) condition, we evaluate whether the negative flag is equal to the overflow flag
For Cortex-M, there are separate division instructions for signed integers and unsigned integers. Does the same division instruction work for both signed and unsigned integers?
What are the overflow and carry flags in the following operations in a four-bit system? 
find the logic expression of the overflow flag when A and Bare added. 
If a string is stored at the memory address 0x20008000 and the string is "CortexM", show the memory content in hex format starting at 0x20008000. How many bytes does this string take in memory? 
Write a C program that implements the standard function that returns the memory address of the first instance of string str2 in string strl. Return a NULL pointer if string str2 is not found in string strl. 

Find five devices that use an ARM processor. Identify the instruction set they support (such as ARM32, Thumb, Thumb-2, or ARM64). 
Identify two ARM Cortex-M processors and find what 1/0 peripherals are built into the processor chip. 
Compared with accumulator-based and stack-based instruction set, what are the advantages and disadvantages of the load-store instruction set? 
Find out the minimum size of the following variable types in terms of bytes. 
An assembly program must have a subroutine named _main. Find why it must be named as _main. 
What does "ALIGN 8, 5" mean? Draw the data memory layout if the data memory starts at 0x20000000.

Use LSL to implement the following C statements
find the result of the following operations
Translate the following C statement into an assembly program
Write an assembly program that calculates the value of the following given polynomial, assuming signed integers x and y are stored in register r0 and rl, respectively
Write an assembly program that calculates the remainder of the division between two unsigned 32-bit integers. 
Explain why Cortex-M processors do not provide any left rotation instructions. 
Explain the difference between the Barrel shifter's role in the following instructions: 
Write an assembly program that reverses the byte order of a register without using the REV instruction. 
Write an assembly program that swaps the upper halfword and the lower halfword of a register. 
Implement the BIC (bitwise clear) instruction by using other assembly instructions. 
Find the value of the N, Z, C, and V flags of the following instructions.
Write short assembly programs to complete the following tasks.
(1) Reset all even bits in register r0 to zero and keep all odd bits unchanged
(2) Set all odd bits in register r0 to one and keep all even bits unchanged
(3) Toggle all odd bits in register r0 and keep all even bits unchanged 

a) What is the value of rl after running LOR rl, [r0) if the system is little endian? What is the value if the system uses the big-endian? 
Suppose the system is set as little endian. What are the values of rl and r0 if the following instructions are executed separately? 
Write an assembly program that converts a 32-bit integer stored in memory from little endian to big endian, without using the REV instruction
Suppose r0 = 0x20008000. What address is register r7 loaded from in the following instructions? What is the value of r0 after executing each instruction? In the following load instruction based on PC-relative addressing, what is the address range in which the target data can be located? Assume the memory address of this instruction is 0x10004000. The PC-relative offset is a 12-bit signed integer. 

Write an assembly program that uses bitwise operators, such as&, I, A,<<, and>>, to implement the endian conversion.
Define an array with 10 unsigned integers in assembly code, and write an assembly program that calculates the mean of these 10 integers (truncating the result to an integer). 
Write an assembly program that converts all lowercase letters to their corresponding upper cases. 
Test for complex roots in solution to the following quadratic equation. Write an assembly program that set register r3 to 1 if the solution has complex roots and 0 otherwise. 
Write an assembly program that calculates the factorial of a non-negative integer n. 
Write an assembly program that transposes the matrix defined in the previous question. 

Write an assembly program that converts all characters in a string to uppercas
Write an assembly program that finds the least common multiple (LCM) of two integers. 
Write an assembly program that checks whether a given year is a leap year.
Write an assembly program that removes all vowel letters (a, e, i, o, u, A, E, I, 0, U) from a string
Write an assembly program that reverses all bits of a 32-bit number without using the RBIT instruction. 
Write an assembly program that calculates the number of words in a string.
Write an assembly program that calculates the sum of diagonal elements of an n-byn integer matrix
Write an assembly program that performs matrix multiplication.

Which of the following is equivalent to "PUSH {r7}"? 
Which of the following instructions load five words from the stack into registers rl-rS? What are the value of registers rl-rS?
What are the memory content after each of the following instruction completes? 
How many bytes does the stack need to pass the arguments when each of the following function is called? 
Which register(s) holds the return value in the following functions? 
Why does a recursive assembly function have to preserve the link register?
Write a subroutine that checks whether a given number is a prime number.
Implement a subroutine of the Caesar shift encryption.
Write a program that uses a subroutine to find how many 1-bits exist in a 32-bit number. 
Write a recursive assembly subroutine that calculates the Fibonacci number. 
Show the value of the link register (LR) and the whole stack content when PC = 0x08000120. 
Write a recursive assembly subroutine that checks whether a given string is a palindrome. 

Write an assembly program that compares two 64-bit signed integers
Write an assembly program that calculates the number of leading ones in a 64-bit integer. 
Write an assembly program that performs 64-bit rotation right. 
Write an assembly program that uses the subtraction-based Euclid's algorithm to compute the greatest common divisor of two 64-bit integers. 
Implement the following in assembly to run logic shift right on a 128-bit integer

Write a subroutine in the assembly that removes all occurrences of a given character in a string
Write a subroutine swap in assembly that swaps two strings, and write a C program that calls the swap subroutine.
Write an assembly program that calls the following C function that returns the memory address of the last occurrence of a given character in a string. 
Write a subroutine max4 in assembly to find the maximum value among four signed integers. These integers are passed to the subroutine via registers. Write a C program to test the max4 subroutine. 

Compare two methods of responding to external events: polling and interrupts. Discuss the advantages and disadvantages of each approach. 
Give two example instructions that make an interrupt service routine exit. 
Write an assembly program that selects MSI 8 MHz as the system clock
Can you use this MSI to generate a SysTick interrupt every minute?
Is it possible to use the SysTick Timer to generate an interrupt once every 12 seconds if there is only a clock of 2.097 MHz? If not, name two ways that you can solve this problem. If yes, how to set up the timer registers? 
Show the stack content immediately before the PUSH instruction runs. 
What are the values of these registers (R0-R12, LR, SP, and PC) immediately after the interrupt exits? 
(1) Show the stack contents and the value of PC and SP when immediately entering the SysTick interrupt service routine. 
(2) When executing the instruction "BX LR", how does the processor know whether it is exiting a standard subroutine or an interrupt service routine? What operations does the processor perform when a standard subroutine exits? What operations does the processor perform when an interrupt service routine exits? 

Convert 3.1415 to UQ8.8 format, and convert -3.1415 to Q7.8 format. 
Write an assembly program that calculates the sum of an array of UQ16.16 numbers. 
Convert 0xC1F54000 to IEEE 754 single-precision decimal
Write an assembly function that finds the maximum value in a single-precision floating-point array
Write an assembly function that calculates the exponential value e^x
Show the stack memory content in hex immediate after an interrupt service routine is called in the following scenarios.
(1) There is no FPU or FPU has not been used.
(2) FPU has been used before the interrupt occurs, and the interrupt service routine will run floating-point instructions. 
What is the value in register Si (i = 0, 1, ... , 31) after the following SysTick interrupt handlerhasbeenexecutedonce?
(1) Show the stack contents and the value of PC and SP when immediately entering the SysTick interrupt service routine.
(2) What is the value in register s15 and s17? 

Translate the following 16-bit binary instructions into assembly instructions
Convert the binary search assembly program given in Chapter 7.12 to machine code manually. 

Write an assembly program that toggles an LED when the push button is pressed. 
Write an assembly program that scans the keypad to verify a four-digit password. . If the user enters the correct password, the program turns the red LED on. Otherwise, the program turns the red LED on. 
Write an assembly program to blink an LED to send out an SOS Morse code
Write an assembly program to implement software debouncing for push buttons. 
Use the logic analyzer to measure the time latency between pressing a button and lighting up an LED. 
Write an assembly program that uses the BSRR register to toggle the LED. 

How would you design the prescaler (PSC), the auto-reload register (ARR), and the compare and capture (CCR)? Show your calculation. 
a. What is the relationship between the timer input clock, the counter clock CK_CNT, the prescaler PSC, and the pulse period measured?
How would you set up the ARR, PSC, and CCR register values? Calculate the duty measured and verify the correctness. 
To generate a lHz square wave with a duty cycle of 50%, how would you set up the timer? Indicate your counting mode and show the value of ARR, CCR, and PSC registers. 
4. Write an assembly program that uses the output compare function of a timer to toggle an LED every second.
5. Write an assembly program that generates a PWM output signal to dim an LED periodically.
6. Write an assembly program that uses PWM to generate a square wave signal with a frequency of 440 Hz and a duty cycle of 50% (i.e., musical tone A).
7. Write an assembly program that uses PWM to control a stepper motor via micro stepping. 
Write an assembly program that uses the HC-SR04 ultrasonic distance sensor 

Write an assembly program that turns the stepper motor 360 degrees counterclockwise by using half-stepping. What is the highest update frequency of the half-stepping control signals while the motor does not drop any steps? You might need to use an oscilloscope to find your update frequency. 
Write an assembly program that changes the rotation speed when the push button is pressed. 
Write an assembly program that uses pulse-width modulated (PWM) to perform micro-stepping. 

Suppose the duty ratio of an LCD is 1/4 and it has 100 display segments (pixels). How many pins are required to drive this LCD?
2. Write an assembly program that displays the animation of moving a ball from left to right.
3. Write an assembly program to display your last name on the LCD screen.
4. Write an assembly program to show any A-Z character at any position.
5. Write a generic assembly function that can display a string of characters.
6. Write a generic assembly function that can display any integer less than 999,999.
7. Write an assembly function that can display a floating-point number.
8. How is the data speed between an HD44780-compatible LCD and the processor adjusted?
9. How is an 8-bit data sent to an HD44780-compatible LCD if the LCD is configured as 4-bit bus mode?
10. How does an HD44780-compatible LCD distinguish between data and LCD commands?
11. Write an assembly program that interfaces with the external HD44780-compatible LCD and display "ARM" on the LCD.
12. Write an assembly program that interfaces with the external HD44780-compatible LCD and displays special character"±" on the LCD. 

1. Write a C program that converts the UNIX Epoch time to a calendar date and time.
2. Write a C program that converts a given calendar date and time to the UNIX Epoch time.
3. Write an assembly program that sets up the RTC date and displays the current date on an LCD.
4. Write an assembly program that sets up the RTC time and displays the current time on an LCD.
5. Implement an assembly program to allow users to change the date and time via the keypad.
6. Write an assembly program that utilizes the RTC alarm to toggle an LED every five seconds

1. How does the software know which specific event generates the interrupt when a DMA interrupt occurs?
2. Why is using DMA interrupt to retrieve data from a peripheral more efficient than repeatedly polling the peripheral?
3. Write an assembly program that uses DMA to copy 256 bytes of data from one memory region to another memory region.
4. Write an assembly program that uses DMA to perform analog-to-digital conversion (ADC). (Requires the background of Chapter 20).
5. Write an assembly program that uses DMA to perform digital-to-analog conversion (DAC). (Requires the background of Chapter 21) 

Suppose VREF = 1.SV, what is the minimum number of bits required to achieve a resolution of 1 m V? 
Suppose the ADC has a resolution of 14 bits, and the time for sampling and hold is set as 6 clock cycles. How many clock cycles are required to complete one analog-to-digital conversion?
Write an assembly program that monitors an input voltage
4. Write an assembly program that uses a potentiometer to control the brightness of an LED.
5. Write an assembly program that uses a potentiometer to control the rotation speed of a stepper motor.
6. Write an assembly program that uses a timer to trigger the ADC periodically.
7. Write an assembly program that uses the potentiometer to control the brightness of an LED.
8. Write an assembly program that shows the ADC measurement on an LCD.
9. Write an assembly program that uses the potentiometer to control the rotation speed of a stepper motor. 

Assume an audio is recorded at a rate of 44,100 Hz, and the DAC is driven by the timer trigger output (TGRO). What is the time interval between two consecutive triggers? If the timer is driven by the HSI clock (16 MHz), how do you set the timer prescaler register (PSC) and the auto-reload register (ARR)?
a. How many DAC outputs should we produce during one cycle of the sinusoidal waveform?
b. The angle of the sine function should increase from 0° to 360° to complete one cycle of the sinusoidal waveform. How many degrees should the angle variable be increased in timer interrupt handler each time?
c. The processor only supports integer arithmetic. If the angle degree to be increased is not an integer, what can you do to get around this issue? 
Write an assembly program that uses a table-lookup method to generate a sinusoidal wave
4. Write an assembly program that generates a sinusoidal waveform with a frequency of 440 Hz and use an oscilloscope to verify the frequency.
5. Write an assembly program to play the song of "Twinkle Twinkle Little Star." 

1. Write an assembly program that periodically collects temperature readings from two TC74 digital temperature sensors. The sensors use PC protocol.
2. Write an assembly program that periodically collects information from a Wii Nunchuk controller, which uses the PC standard mode (100 Kbps). 
3. Use the SPI protocol to interact with 3-axis gyroscope (Parallax L3G4200D). The gyroscope provides the rate of change in rotation on its X, Y and Z axes.
4. Use the SPI protocol to read an SD memory Card.
5. Implement a HID keyboard device. When the user button on the discovery kit board is pressed, the host PC automatically plays a YouTube video.
6. Implement a HID mouse device. The device automatically draws a picture on the host screen (such as drawing a circle in Paint in Windows). 

1. Immediately after the instruction "SVN #0x01" is executed, draw a memory diagram that shows the stack contents.
2. Why does a software interrupt handler often disable interrupts when it starts?
3. If multiple concurrently running tasks increase the same counter variable, will the counter be incremented correctly? If not, how would you solve this issue?
4. When the processor starts to execute the interrupt handler, the processor automatically performs stacking. How does the processor identify whether MSP or PSP is used immediately before the interrupt handler is executed? 

Assume the value in register rl and r0 is 0xF880FF7F. What is the value in register r2 after running each of the following instruction? What are the APSR.GE bit flags? 
Assume rl = 0x22221111 and r0 = 0x44443333, what is the value in register r2 after running each of the following instructions? 
Write an assembly program that uses SEL and packing instructions to achieve the following: pack the max of the upper halfwords of registers rl and r0 and the min of the lower halfwords of registers rl and r0 into register r3. 
Convert a color image to a grayscale image
Implement the following assembly subroutine that multiplies each element of a QlS array with a QlS constant.























If a system requires 3½ decimal digits of precision, what is the smallest number of bits the ADC needs to have?
Draw a flow chart for the embedded system in a simple watch that just tells time.
Design the circuit that interfaces a 2.5V 1mA LED to the microcontroller.

Write C code that sets bit 1 of memory location 0x4000.5400 using bit-banding. What effect does this operation have?
How much RAM and ROM are in LM3S8962? What are the specific address ranges of these memory components?
What are the bits in the Program Status Register (PSR) of ARM ® Cortex TM-M?
Write assembly code that pushes registers R1 R3 and R5 onto the stack
When does the LR have to be pushed on the stack
What are parallel ports are available on the LM3S8962?
What is a direction register? Why does the microcontroller have direction registers?
What is the alternative function register?
Write software that initializes LM3S/LM4F/TM4C Port A, so pins 5,4 are output and the rest are input.
Write software that initializes LM3S/LM4F/TM4C Port E, so pin 1 is an output. Make the initialization friendly. Design an output function that takes a 1-bit parameter (0 or 1) and writes the value to this pin. Use bit-specific addressing for the output.
Redesign the SSR interface shown in Figure 2.33 using a +5V source. In particular, recalculate the required resistor value if we were to change the +3.3V to +5V.
Redesign the LED interface shown in Figure 2.35 if the four LEDs operated at 1.9 V and 1 mA. In particular, recalculate the required resistor values  we were to change to these LEDs.
Design a switch interface that it is negative logic. I.e., the input is low if the switch is pressed and high if the switch is not pressed.

Write software to implement the Mealy FSM
Give a quantitative measure of modularity. E.g., system A is more modular than system B if…
Describe how you could create an array that is temporary in allocation but public in scope.
In 32 words or less, give an example of each of the following terms.
a) Invocation coupling
b) Bandwidth coupling
c) Control coupling
a) Logical cohesion
b) Temporal cohesion
c) Procedural cohesion
d) Communicational cohesion
e) Sequential cohesion
f) Functional cohesion
a) Module
b) BSP
c) HAL
d) Device driver
a) Dynamic efficiency
b) Static efficiency
c) Scope
d) Cohesion

Draw the equivalent of the left side of the KPN in Program 4.1 using a Petri Net
Look at the data sheet for the Newhaven Display NHD-0108BZ-RN-YBW-3V3. Write a software function using the LCD hardware in Section 4.7.1 that reads the LCD status bit
Rewrite the matrix keypad driver in Programs 4.12 and 4.13 to use open drain mode on pins PD3 – PD0.
Look up the UART module in the data sheet and describe the two bits of WLEN
Look up the UART module in the data sheet and describe the similarities and differences between BUSY and TXFF.
Assuming the busclock to be 24 MHz, what value goes into UART0_IBRD_R and UART0_FBRD_R to make the baud rate 9600 bits/sec?
Interface a negative logic switch to PB6 without an external resistor. Write code to configure Port B bit 6 as needed. Write code that waits for the switch to be touched, then released. 
What happens in the KPN of Program 4.1 if a FIFO becomes empty? 
Write code to configure Port A bit 2 as a falling edge edge-triggered input. Write code that waits for a falling edge on PA2.
What is the effect of capacitance added to a digital line?
What is difference between busy-wait and gadfly synchronization?
List one advantage of blind-cycle synchronization. 
List five different methods for I/O synchronization
In 16 words or less, describe the meaning of each of the following terms.
a) Latency
b) Real-time
c) Bandwidth
d) I/O bound
e) CPU bound
f) Blind-cycle synchronization
g) Busy-wait synchronization
h) Interrupt synchronization
i) Monotonic
j) Non-blocking
k) Deterministic
l) Slew rate
m) Open drain
n) Handshake
a) Frame
b) Baud rate
c) Bandwidth
d) Full duplex
e) DTE
f) DCE
g) Framing error
h) Overrun error
i) Device driver
j) NRZ
k) Bit time
l) Start and stop bits

You will design and implement the Example 3.2 FSM using the edge-triggered interrupts. 
Solve the traffic light FSM described in Example 3.1 using SysTick interrupts s. Run the FSM in the ISR. Include three components: the FSM structure, an initialization function, and the SysTick ISR. There should be no backwards jumps
Design and implement a FIFO that uses the memory manager to allocate space.

design an underwater ultrasonic ranging system.
a) Derive an equation that relates the distance, d, to the time of flight, ∆t.
b) Use this equation to calculate the minimum and maximum possible time of flight, ∆t.
c) Give the initialization routine.
d) Give the ISRs that measure distance.
Design a wind direction measurement instrument using the input capture technique
a) Show the hardware interface
b) Write the initialization and interrupt service routine that measures the wind direction and creates a 16-bit unsigned result with units of degrees
measure body temperature using input capture (period measurement)
a) Choose the capacitor value so that this pulse width measurement resolution matches the desired temperature resolution of 0.01˚F.
b) Given this value of C, what is the pulse width at 90 ˚F? Give the answer both in µs and bus clock cycles.
c) Given this value of C, what is the pulse width at 110 ˚F? Give the answer both in µs and bus clock cycles.
d) Write the initialization that configures the input capture interrupts.
e) Show the interrupt handler that performs the temperature measurement tasks in the background and sets a global
measure the frequency of a square wave connected to CCP2.
Create two synchronized 50% duty cycle square waves using PWM channels

This problem addresses the issue of capacitive loading on a high-speed serial transmission line like SSI. T
What is the smallest t1 clock period that reliably transverses data from one shift register to the other?
Write software that creates the SSI protocol on a regular digital port. More specifically, interface the 74HC595 to port pins PD3, PD2, PD1, and PD0.

Design an analog band pass filter with a cutoffs of 1 and 1000 Hz. First, design a two-pole Butterworth analog high pass filter, and then follow it with a two-pole Butterworth analog low pass filter.
Design a two-pole Butterworth analog low pass filter with a cutoff of 10000 Hz.
Design an analog circuit with a transfer function of Vout = 30*Vin -3 using one rail-to-rail op amp powered by a single +3.3 V supply
Design an instrumentation amp, using an AD627, with the following transfer function.
Design an analog circuit with the following specifications two single-ended inputs (not differential) any input impedance is OK transfer function 
Design a variable gain analog amplifier
Design 2-bit analog to digital converter.

Write a C program that knows the E24 capacitors values and E192 resistors values.
If your crystal has a load capacitance of 18 pF, and the PCB has a board capacitance of 6pF, what capacitor values would you use to build the oscillator?
A low-powersystem requires an average current of 25 A at 3.7V. The system must run for 3 months. Which battery in Table 9.6 would you use?
If your ARM microcontroller requires 50 mA to run, how do you build the system with an average current of less than 10 mA?
What is the range of input voltages that can be used for your circuit?

Design a wind direction measurement instrument
a) Show the analog interface between the transducer and the ADC. Only the +3.3 V supply can be used. Show how the analog components are powered. Give chip numbers but not pin numbers. Specify the type and tolerance of resistors and capacitors.
b) Write the initialization and function that measures the wind direction and returns a 16- bit unsigned result with units of degrees. I.e., the value varies from 0 to 359
a) How many ADC bits are required?
b) What is the maximum allowable noise at the amp output?
c) Design the analog amplifier/filter.
This problem deals with the classification and reduction of noise
a) Describe a single experimental procedure (measurement) which could identify (ordifferentiate) the type(s) of noise existing on the circuit.
b) For each of these three types of noise (white noise, 60 Hz noise, or 1/f noise), give a typical outcome of the experimental procedure.
c) Give one approach (other than analog or digital filtering) which will reduce white noise.
d) Give one approach (other than analog or digital filtering) which will reduce 60 Hz noise.
e) Give one approach (other than analog or digital filtering) which will reduce 1/f noise.
Design a temperature acquisition system using a type-T thermocouple.
Design a computer based data acquisition system that measures pressure

The objective of this problem is to design a communication network using four single chip microcontrollers placed in a ring. Develop a message protocol that supports addressing and variable length data. Perform the I/O in the background using interrupt synchronization
a) Give the API mode 1 frame node 0x41 sends to its XBee module. 
Consider a telephone line with a channel bandwidth of 4 kHz and SNR of 30 dB. What is the maximum data rate possible?
What fundamental property is used to transmit information through a channel?

























Given the macro defined below, show how each of the following usages would be expanded: 
Define a macro called BIT(x,n) that expands into an expression whose value is exactly 0  or 1, corresponding to the value of the nth bit of x. 
Write a C function that sets a specified bit within an array of bits that are packed eight per  byte into an array of bytes. 

1. Which interconnection relationship is incorrect? 
(a) I/O <-> MEM <-> CPU 
(b) MEM <-> CPU <-> I/O 
(c) CPU <-> I/O <-> MEM 
2. Which part of the computer puts information on the Address Bus? 
3. How many bits are required in an address bus used to access  (a) a byte-addressable 1 megabyte memory? 
In the Intel processor, if the two bytes of a 16-bit word are at addresses 100 and 101, then  what is the address of the entire 16-bit word? 
Which of the following Intel registers are modified during the fetch phase of the fetch-  execute cycle? (Circle all that apply.) 
(a) EAX 
(b) EIP 
(c) CS 
(d) ESP 
8. What changes when register EBP is used within the source or destination memory address 
field of an instruction in the Intel processor? 

When is the opcode portion of the binary representation of an instruction filled in during  assembly? 
Write a sequence of Intel protected-mode instructions that will form the sum of the  numbers 1 through 100. 

Which of the following I/O methods has the highest possible data rate? 
Which of the following I/O methods requires the least additional hardware? 

Write a program to (a) display a "?", (b) read two decimal digits who.se sum "is less than 10, (c) display them and their sum on the next line, with an appropriate message. 
Write a program to (a) prompt the user, (b) read first, middle, and last initials of a person's name, and (c) display them duwn the left margin
Write a program to display a t 0 x 10 solid box of asterisks. 
Write a program to (a) display"?", (b) read three initials,(<;) display them in the middle of an 11 x 11 box of astc:ri5ks, and (d) beep the computer. 

(hard) Write a program that reads a string of capital letters, ending with a carriage return, and displays the longest sequence of consecutive alphabetically increasing capital letters read. 

Write a program that prompts .the user to enter a string of decimal digits, ending with a carriage return, and prints th.eir su~ in hex on the next line. If the user enters· an illegal character, he or she should be prompted to begin again.

Writ; a program that lets the user type some text, consisting of words separated by blanks, ending with a carriage return, and displays the text in the same word order as entered, but with the letters ·in each word reversed.

Write a program that lets the user enter time in seconds, up to 65535, and outputs the time as hours, minutes, and seconds. Use INDEC and OUIDEC to do the 1/0. 

Write a pron'llure l'IUNTJIEX that US'-'S XLAT to display the content of BX as four hex digits. Test· it In a program that lets the user type a four-digit hex Integer, stores 't in llX using the hex Input algorithm of section 7.4, and calls PRINTHEX to print It on the next line. 


Write a program that (a) lets the user input a string, (b) prints it forwa1d and !Jackw<ird without pum:tuation .lllu !Jl;inks un successive lines, and (CJ decides whl'lher it is a pJlindrorrn: anJ prints the conclusion
Write a proccuure VELETE that will remove N IJyte~ from a ~Iring at a specified point and close the gap. 
Wiite a program that reads a string STRING, a decimal integer S that represents a position in STRING, a decimal integer N that represents the number of bytes to be removed (both integers between- 0 and 80), calls DELETE to remove N bytes at position S, and prints the. resulting string. You may assume 0 s N s L - S, where L =length of STRING.

Write a one-line screen editor that does the following:
a. Clear screen, and position cursor at the beginning of row 12.
b. Let the user type text. Cursor advances after each character is displayed unless cursor Is at the right margin.
c. Left arrow moves cursor left except at left margin; right arrow moves cursor right except at right margin. Other arrow keys do not operate.
d. Ins li:ey makes the cursor and each character to the right of the cursor (in the cursor's row) move right one position. A blank appears at the cursor's previous position. The last char· acter in the cursor's row is pushed off the screen.
e. Del key causes each character to the right of the cursor (in the cursor's row) to move left one position, and a blank is brought in at the right.
f. E.sc key terminates the program. 

Write this program in the following ways;
a. As ;1 .COM program.
b. As an .EXE program in which PROCI and l'ROC2 are l\!E.All procedures cont.:iincd in stparately assembled modules. Lich prucC<.lure's module contains the message that the prc><.:cu11n: displays. 
c. As an .EXE progr;im in which the PROCI and PROC2 arc FAR
procedures cont;iined in sep;irately assembly modules. Each
procedure's module contains the message that the procedure
displays.
d. As an .EXE program In which the three messages are cont~ined in MAfN's module a1id declared PUBLIC there. The
other procedures arc NEAR procedures contained in separately
assembled modules. These procedures refer to the appropriate
messages via an EXTRN directive.
e. As ::in .EXE program in which the three messages are contained in MAIN's mOdule. PROCI and l'ROC2 are separately
••ssembled NEAR procedures. Before calling PROCl, MAIN
places the addresses of the messages "INSIDE PROCl" and
"INSIDE PROC2" in SI and DI, respectively.
f. As an .EXE program in which the thrl'C messages are contained in MAIN's module. PROCI and PROC2 are separntely
assembled NEAR procedures. Before calling PROCl, MAIN
pushes the addre~scs of the messages "INSIDE PROC2" and
"INSIDE PROCI" onto the stack. 

Write a program that will output the message "Hello" once every half a second to the screen
Write a memory resident program similar to PGM15_3.ASM using INT Zlh, function 3lh.

Modify the video game program In the chapter so that the ball speed decreases when it hits the boundary, but increases when It is hit by a paddle.

Write a recursive assembly language procedure to compute the sum of the elements of a word array. Write a program to test your procedure on a four-element array

Write a program to read In two real numbers, with up to four decimal digits after the decimal pOlnt, and output their sum, difforence, product, and quol1ent.

Write a program that will copy a source text file into a destination file, and replace each lowercase letter by a capital letter. Use the DOS TYPE command to display the source and destination files. 
Modify PGM19_2.ASM in section 19.3.7 ~c that it prompts the user to enter a name. If the name Is present In the NAMES file, the program makes a copy of the file with the name removed. Use the DOS TYPE command to display the original file and the changed file.

Modify program PGM20_4.ASM so that it will output the sum of two signed double-precision numbers.







































Find the Norton equivalent circuit (a current source in parallel with a resistor) for the voltage divider in Figure 1.134.
Find the Thevenin equivalent for the circuit shown ´ in Figure 1.135. 
Design a “rumble filter” for audio. It should pass frequencies greater than 20 Hz (set the −3 dB point at 10 Hz)
Design a “scratch filter” for audio signals
How would you make a filter with R’s and C’s to give the response shown in Figure 1.136?
Design a bandpass RC filter (as in Figure 1.137);
Sketch the output for the circuit
Design an oscilloscope “×10 probe” to use with a scope whose input impedance is 1 MΩ in parallel with 20 pF by figuring out what goes inside the probe handle in Figure 1.139. What input impedance (R in parallel with C) does your ×10 probe present to the circuit under test when used with the scope?

Design a transistor switch circuit that allows you to switch two loads to ground by means of saturated npn transistors
What is the output compliance? how much will the output current vary?  how much will the load current vary over the compliance range? (d) What is the temperature coefficient of output current assuming that β does not vary with temperature? What is the temperature coefficient of output current assuming that β increases from its nominal value of 100 by 0.4%/◦C?
Design a common-emitter npn amplifier with a voltage gain
Design a dc-coupled differential amplifier with a voltage gain of 50 (to a single-ended output) for input signals near ground, supply voltages of ±15 volts, and quiescent currents of 0.1 mA in each transistor
What is the small-signal voltage gain? (c) What rise in ambient temperature (roughly) will cause the transistor to saturate?
Begin by designing a long-tailed pair differential amplifier with emitter current source and no emitter resistors. Calculate the voltage gain from a single-ended input (other input grounded) to a single-ended output. (b) Now modify the circuit so that an externally applied voltage controls the emitter current source. Give an approximate formula for the gain as a function of controlling voltage. 

Design a “sensitive voltmeter” to have Zin = 1 MΩ and full-scale sensitivities of 10 mV to 10 V in four ranges. . Trim voltage offsets if necessary, and calculate what the meter will read with input open,
Design an audio amplifier, using an OP27 op-amp (low noise, good for audio), with the following characteristics.  Use the noninverting configuration, and roll off the gain at low frequencies in such a way as to reduce the effects of input offset voltage. Use proper design to minimize the effects of input bias current on output offset.
Design a unity-gain phase splitter (see §2.2.8 in Chapter 2) using 411s. Strive for high input impedance and low output impedances.
Design a simple RC filter, buffered with AD611 opamps (another good audio chip) as necessary, to be placed be tween preamp and amplifier to compensate for this rise.
What voltage(s) will the input be when the output passes through zero volts?
a) What is its input impedance?
(b) If the op-amp’s output range goes from V+ to V−, what range of input voltages will this circuit accommodate without saturation?
Show how to make a dc amplifier with a gain of −10. Why can’t you make a dc amplifier with a gain of +10?

Design a VCVS 6-pole highpass Bessel filter with cutoff frequency of 1 kHz.
Design a 60 Hz twin-T notch filter with op-amp input and output buffers.

What is the SNR of the resultant signal (a) in a 10 Hz band centered at 100 Hz, and (b) in a 1 MHz band going from dc to 1 MHz?
(a) Find the noise figure at 100 Hz, 1 kHz, and 10 kHz. (b) Find the SNR (at each of listed frequencies) for an input signal of 50 nV (rms) and an amplifier bandwidth of 10 Hz.
What is the amplifier’s noise figure for a source impedance of 50 Ω?
(a) What is the total input range, and what is your rms input noise level goal? (b) If a 14-bit ADC is used, what is the LSB resolution?
(c) What is a reasonable ADC input voltage range, and how much gain will you need to provide?
d) What is your spectral noise-density goal?
(a) Is a bipolar op-amp better than a JFET op-amp? What will be your system’s noise floor as a fraction of full scale? (c) Should you suggest to your boss that she consider running the ADC faster and averaging the results? Choose a good op-amp for this case, and calculate the system performance.

Show how to make a JK flip-flop by using a typeD flip-flop and a 4-input MUX
Design a circuit that reads out, on 7-segment digits, how many milliseconds you’ve held a button down.
Design a reaction timer. “A” pushes his button; an LED goes on, and a counter begins counting. When “B” pushes her button, the light goes out and an LED display reads the time, in milliseconds.
Design a period counter: a device to measure the number of microseconds in one period of an input waveform
Add latches to the period counter, if you haven’t already
Design a true electronic stopwatch. Button A starts and stops the count. Button B resets the count
Design a nice frequency counter to measure the number of cycles per second of an input waveform. How about a BCD output? Multiplex the digits on output, as well as parallel output. 
Design a circuit, using LVC logic at 3.3 V, to time a speeding bullet. 
Invent a circuit to keep a running sum of successive 4-bit binary numbers that are input to it

Why can’t two n-bit DACs be used to make a 2nbit DAC by just summing their outputs proportionally (OUT1 + OUT2/2n)?
Verify that the peak output of the pseudorandom noise generator (Figure 9.94) is ±8.68 V.


Show that the range of normalized floating-point numbers is as claimed, by constructing the smallest and largest numbers.


Find an alternative to the BSS123 MOSFET reset switch
What is the purpose of the 1k resistor? Why is a diode needed across the indicator LED?
(a) What is the MOSFET power dissipation when it is ON, assuming RON=14 mΩ?
(b) Now calculate the average power dissipation contributed by class-A conduction during transitions, assuming the PWM is running at 10 kHz






























The intrinsic carrier concentration of germanium (GE): a) Calculate ni at 300 K and 600 K (b) Determine the electron and hole concentrations if Ge is doped with P at a density of 5 × 1016 cm−3
(a) Calculate the velocity of electrons and holes in this material.
(b) What doping level is necessary to provide a current density of 1 mA/μm2 under these conditions?


A telephone wire has a current of 20μA flowing through it. How long does it take for a charge of 15 C to pass through the wire?
A lightning bolt carried a current of 2 kA and lasted for 3 ms. How many coulombs of charge were contained in the lightning bolt?
Calculate: 1. (a) the total energy consumed in kWh, 2. (b) the average power over the total 24 hour period.
1. (a) What is the maximum current it can supply for 40 h? 2. (b) How many days will it last if it is discharged at a rate of 1 mA?
A 12-V battery requires a total charge of 40 ampere-hours during recharging. How many joules are supplied to the battery?
How much energy does a 10-hp motor deliver in 30 minutes? 

5 Find Rab in the four-way power divider circuit
Using series and parallel combinations and a minimum number of available resistors, how would you obtain the following resistances for an electronic circuit design?
Calculate the value of the series-dropping resistor Rx needed to power the sharpener
If a 10-Ω loudspeaker draws the maximum power of 12 W from the amplifier, determine the maximum power a 4-Ω loudspeaker will draw.
If the load resistor, 5 kW, is fixed, find R1 and R2 to meet the criteria.
The pin diagram of a resistance array is shown in Fig. 2.141. Find the equivalent resistance between the following:
Find the values of the resistors R1 and R2 needed to power the devices using a 24-V battery.

In the circuit of Fig. 3.34, determine the currents i1, i2, and i3.

The circuit in Fig. 4.149 models a common-emitter transistor amplifier. Find ix using source transformation.
By specifying Rs and Rp of the interface circuit in Fig. 4.150, design an attenuator that will meet the following requirements
Using the interface designed in part (a), calculate the current through a load of RL = 50 Ω when Vg = 12 V.
Obtain the Thevenin voltage and the Thevenin resistance of the network.
1. (a) Find the value of R such that Vo = 1.8 V.
2. (b) Calculate the value of R that will draw the maximum current. What is the maximum current?
A common-emitter amplifier circuit is shown in Fig. 4.152. Obtain the Thevenin equivalent to the left of points B and E.
determine the current through the 40-Ω resistor and the power dissipated by the resistor.

Design a circuit that provides a relationship between output voltage vo and input voltage vs such that vo = 12vs − 10. Two op amps, a 6-V battery, and several resistors are available.
The op amp circuit in Fig. 5.107 is a current amplifier. Find the current gain io/ is of the amplifier.
A noninverting current amplifier is portrayed in Fig. 5.108. Calculate the gain io/ is .
Refer to the bridge amplifier shown in Fig. 5.109. Determine the voltage gain vo/ vi .
A voltage-to-current converter is shown in Fig. 5.110, which means that iL = Avi if R1R2 = R3R4. Find the constant term A.

our laboratory has available a large number of 10−μF capacitors rated at 300 V. To design a capacitor bank of 40 μF rated at 600 V, how many 10−μF capacitors are needed and how would you connect them?
If the current through the inductor is i(t) = 5 sin 2 (πt) mA, for all t > 0 s, find the power being delivered to the inductor and the energy stored in it at t = 0.5 s.
What kind of a circuit component is needed to convert the voltage waveform to the triangular current waveform shown in Fig. 6.94(b)? Calculate the value of the component, assuming that it is initially uncharged.
An electric motor can be modeled as a series combination of a 12-Ω resistor and 200-mH inductor. If a current i(t) = 2te−10t A flows through the series combination, find the voltage across the combination.

1. (a) What is the minimum pulse width that will allow a differentiator output to appear across the capacitor?
2. (b) If the output is to be an integrated form of the input, what is the maximum value the pulse width can assume?P
If R is fixed at 200 kΩ, determine the maximum value of L required to differentiate a pulse with T = 10 μs
If Rp is fixed at 6 MΩ, find Rs and Cs for the circuit to have a time constant of 15 μs.
Given that the capacitance of the plates is 4 nF, sketch the current flowing through the plates.

A mechanical system is modeled by a series RLC circuit. It is desired to produce an overdamped response with time constants 0.1 and 0.5 ms. If a series 50-kΩ resistor is used, find the values of L and C.
If the damped frequency is 4 kHz and the time constant of the envelope is 0.25 s, find the necessary values of L and C.
the diode current is a nonlinear function of the voltage across the diode. Derive the differential equation for the circuit in terms of v and iD.

The circuit shown in Fig. 9.86 is used in a television receiver. What is the total impedance of this circuit?
The network in Fig. 9.87 is part of the schematic describing an industrial electronic sensing device. What is the total impedance of the circuit at 2 kHz?
An industrial load is modeled as a series combination of an inductor and a resistance as shown in Fig. 9.89. Calculate the value of a capacitor C across the series combination so that the net impedance is resistive at a frequency of 2 kHz.
Use these measurements to determine the values of L and R
If it is desired to connect a capacitor in series with the parallel combination such that the net impedance is resistive at 10 MHz, what is the required value of C?
Find: (a) the characteristic impedance Zo = √Z/Y, (b) the propagation constant γ = √ZY.
find the load current I

A transmitter delivers maximum power to an antenna when the antenna is adjusted to represent a load of 75-Ω resistance in series with an inductance of 4 μH. If the transmitter operates at 4.12 MHz, find its internal impedance.
If the voltage across the resistor is 80 V, what is the power factor of the circuit?
1. (a) Find the true power drawn by the circuit.
2. (b) Calculate the apparent power.
What kVAR of capacitors is required to operate the turbine-generator but keep it from being overloaded?
Determine the power factor (lagging) of the motor. Find the value of the capacitance C that must be connected across the motor to raise the pf to unity.
1. (a) Calculate the total reactive power and apparent power absorbed by the plant.
2. (b) Determine the overall pf.
3. (c) Find the magnitude of the current in the feeder line
1. (a) Calculate the total real and reactive power.
2. (b) Find the overall power factor.
1. (a) Calculate the cost of capacitors needed.
2. (b) Find the savings in substation capacity released.
3. (c) Are capacitors economical for releasing the amount of substation capacity?
1. (a) At what frequency is maximum power transferred to the speaker?
2. (b) If Vs = 4.6 V rms, how much power is delivered to the speaker at that frequency? Amplifier
1. (a) Determine the impedance of the load that achieves maximum power transfer.
2. (b) Calculate the load power under this matching condition.
, find the average power absorbed by the load

A three-phase generator supplied 3.6 kVA at a power factor of 0.85 lagging. If 2,500 W are delivered to the load and line losses are 80 W per phase, what are the losses in the generator?
What value of capacitor should be placed in parallel with each load impedance?
Find the line currents and the load voltages.
determine the unknown load.
find the magnitude of the line voltage at the source.
If the magnitude of the line voltage at the loads is 2400 V rms, calculate the magnitude of the line voltage at the source and the total complex power supplied to the two loads.
If the magnitude of the line voltage is 480 V rms, calculate the line current
find the magnitude and phase angle of currents.
Design a three-phase heater with suitable symmetric loads using wye-connected pure resistance
Find the current in the neutral wire and the complex power supplied by each source.

Show which connections are necessary to provide:
1. (a) an output of 14 V with an input of 110 V,
2. (b) an output of 50 V with an input of 220 V
Find the output voltage of:
1. (a) a wrong connection,
2. (b) the right connection.
Find:
1. (a) the turns ratio n,
2. (b) the current through the primary winding.

A certain electronic test circuit produced a resonant curve with half-power points at 432 Hz and 454 Hz. If Q = 20, what is the resonant frequency of the
circuit?
Find the resonant frequency and bandwidth of the circuit
If the desired corner frequency is 20 kHz and C = 0.5 μF, find the value of R
Obtain the cutoff frequency
Obtain the transfer function of the circuit.
Use PSpice or MultiSim to generate the magnitude plot of Vo(ω).

Obtain the transfer function of the op amp circuit 
1. (a) Find Y(s).
2. (b) An 8-V battery is connected to the network via a switch. If the switch is closed at t = 0, find the current i(t) through Y(s) using the Laplace transform.
show that the inductance produced by the gyrator is L = CR

Find:
1. (a) the period of v(t),
2. (b) the average value of v(t),
3. (c) the effective value of v(t).
1. (a) If the voltage is applied across a 5-Ω resistor, find the average power dissipated by the resistor.
2. (b) If a dc component is added to the periodic voltage and the measured power dissipated increases by 5 percent, determine the value of the dc component added.
Write a program to compute the Fourier coefficients (up to the 10th harmonic) of the square wave
Write a computer program to calculate the exponential Fourier series of the half-wave rectified sinusoidal current 
1. (a) Find the average power absorbed by the resistor.
2. (b) Obtain cn for n = 1, 2, 3, and 4.
3. (c) What fraction of the total power is carried by the dc component?
4. (d) What fraction of the total power is carried by the second harmonic (n = 2)?
Calculate the average power that the signal would supply a 4-Ω resistor. 

What percentage of the total 1-Ω energy content lies in the frequency range of 1 < ω < 5 rad/ s?
What fraction of the energy in the input signal is contained in the output signal?

Assume that the two circuits in Fig. 19.135 are equivalent. The parameters of the two circuits must be equal. Using this factor and the z parameters, derive Eqs. (9.67) and (9.68).



















For W/L = 50/0.5, plot the drain current of an NFET and a PFET as a function of |VGS| as |VGS| varies from 0 to 3 V. Assume that |VDS| = 3 V.
calculate the transconductance and output impedance of both NMOS and PMOS devices. Also, find the “intrinsic gain
Plot ID versus VGS for a MOS transistor (a) with VDS as a parameter, and (b) with VBS as a parameter. Identify the break points in the characteristics.
Sketch IX and the transconductance of the transistor as a function of VX for each circuit 
Sketch VX and IX as a function of time for each circuit
Calculate the fT of a MOS device in the subthreshold region
Describe the minimum number of dc measurement steps using an ohmmeter that is necessary to determine the gate, source/drain, and bulk terminals of the device.
What if we have two transistors and we know that one has twice the aspect ratio of the other?
If the minimum required output impedance is 20 k, determine the width and length of the device. Calculate the gate-source, gate-drain, and drain-substrate capacitance if the device is folded

calculate the small-signal voltage gain. What is the gain if M2 is implemented as a diode-connected PMOS device
(a) Calculate the small-signal voltage gain.
(b) Calculate the maximum output voltage swing while both devices are saturated.
Calculate the intrinsic gain of an NMOS device and a PMOS device operating in saturation
(a) At what input voltage is M1 at the edge of the triode region? What is the small-signal gain under this condition?
(b) What input voltage drives M1 into the triode region by 50 mV? What is the small-signal gain under this condition?
Assuming λ = 0, calculate (W/L)2 such that M1 is at the edge of the triode region. What is the small-signal voltage gain under this condition?
Plot the small-signal gain of the circuit
Calculate the dimensions of M1 and M2
Assuming all MOSFETs are in saturation, calculate the small-signal voltage gain of each circuit 
Sketch VX and VY as a function of time for each circuit
(a) Choose Vb such that M1 is 50 mV away from the triode region.
(b) Calculate the small-signal voltage gain.
(c) Using the value of Vb found in part (a), calculate the maximum output voltage swing. Which device enters the triode region first as Vout falls?
(d) Calculate the swing at node X for the maximum output swing obtained above.
(a) Calculate the aspect ratio of M2.
(b) What input level places M1 at the edge of the triode region? What is the small-signal gain under this condition?
(c) What input level places M2 at the edge of the saturation region? What is the small-signal gain under this condition?
Calculate the voltage gain of a common-gate stage using the lemma Av = −Gm Rout
How many amplifier topologies can you create using each of the structures shown in Fig. 3.87 and no other transistors?

(a) What is the amplitude of the glitches in the analog output in Fig. 4.2(a) for a clock swing of 3 V?
what is the amplitude of the glitches in the differential analog output for a clock swing of 3 V?
Sketch the small-signal differential voltage gain of the circuit
Construct the plots of Fig. 4.9(c) for a differential pair using PMOS transistors
a) What is the maximum allowable output voltage swing if Vin,C M = 1.2 V?
(b) What is the voltage gain under this condition?
(a) What is the equilibrium overdrive voltage of each transistor?
(b) How is the tail current shared between the two sides if Vin1 − Vin2 = 50 mA?
(c) What is the equivalent Gm under this condition?
(d) For what value of Vin1 − Vin2 does the Gm drop by 10%? By 90%?
(a) Calculate the output differential signal-to-noise ratio, defined as the signal amplitude divided by the noise amplitude.
(b) Calculate the CMRR.
(a) What are the minimum and maximum allowable input CM levels if the differential swings at the input and output are small?
(b) For Vin,C M = 1.2 V, sketch the small-signal differential voltage gain as VDD goes from 0 to 3 V
a) Determine the voltage gain.
(b) Calculate Vb such that ID5 = ID6 = 0.8(ISS/2).
(c) If ISS requires a minimum voltage of 0.4 V, what is the maximum differential output swing?
calculate the small-signal gain, common-mode gain, and CMRR.
calculate the input common-mode level that yields such resistance. 

(a) Determine R2/R1.
(b) Calculate the sensitivity of Iout to VDD, defined as ∂ Iout/∂VDD and normalized to Iout.
(c) How much does Iout change if VTH changes by 50 mV?
(d) If the temperature dependence of μn is expressed as μn ∝ T −3/2 but VTH is independent of temperature, how much does Iout vary if T changes from 300 ◦K to 370 ◦K?
(e) What is the worst-case change in Iout if VDD changes by 10%, VTH changes by 50 mV, and T changes from 300 ◦K to 370 ◦K?
(a) Determine VX and the acceptable range of Vb.
(b) Estimate the deviation of Iout from 300 μA if the drain voltage of M3 is higher than VX by 1 V.
(a) Calculate the deviation of Vout from VF if |VTH3| is 1 mV less than |VTH4|.
(b) Determine the CMRR of the amplifier
Calculate the input impedance of the circuit and identify the inductive component
determine the time constant and the initial and final values of Vout.
Determine the corner frequency
Determine the supply rejection of the circui

a) Explain why the output jumps up by V before it begins to go down. This indicates the existence of a zero in the transfer function.
(b) Determine the transfer function and the step response without using Miller’s theorem
determine the poles and the zero of the circuit.
(a) Determine the aspect ratio of the PMOS transistor such that the maximum allowable output level is 2.6 V. What is the maximum peak-to-peak swing?
(b) Determine the poles and the zero
Calculate the equivalent inductance seen at the output.
calculate the input impedance 
(a) Explain why a topology in which the load is realized by diode-connected devices or current sources does not satisfy this condition.
(b) Consider the circuit shown in Fig. 6.65. Neglecting other capacitances, determine the transfer function. Explain under what conditions the load exhibits an inductive behavior. Can this circuit provide a total phase shift of 135◦ at the frequency where its gain drops to unity?
A resistively-degenerated common-source stage bootstraps CGS in a manner similar to a source follower. Estimate the input capacitance of such a stage
Determine the transfer function of a CG stage with a resistance RG in series with the gate

What is the total input-referred thermal noise voltage in a 100-MHz bandwidth?
what is the maximum output voltage swing of the amplifier
Calculate the input-referred flicker noise voltage of the circuit
Calculate the input-referred thermal noise voltage of each circuit
Calculate the input-referred 1/ f noise voltage of the source follower
Calculate the total rms thermal noise voltage at the output in a 50-MHz bandwidth.
(a) Calculate the input-referred thermal noise voltage.
(b) For a given bias current and output voltage swing, what value of RS minimizes the input-referred thermal noise?
(a) Determine (W/L)2 such that the contribution of M2 to the input-referred thermal noise current (not current squared) is one-fifth of that due to RD.
(b) Now calculate the minimum value of Vb to place M2 at the edge of the triode region. What is the maximum allowable output voltage swing?
Design the circuit of Fig. 7.48 for an input-referred thermal noise voltage of 3 nV/√Hz and maximum output swing. 
(a) Determine the resulting output voltage. (The voltage gain for a degenerated CS stage was derived in Chapter 3.)
(b) Now refer this voltage to the input as a current and compare the result with the contributions of M2 and M3
determine the output noise spectrum and the total integrated noise

If a gain error of less than 5% is required, what is the maximum closed-loop voltage gain that can be achieved by this topology? What is the low-frequency closed-loop output impedance under this condition?
Neglecting channel-length modulation and body effect, determine the bias current of M1 and M2 such that the input resistance at low frequencies is equal to 50 .
Suppose an overall voltage gain of 500 is required with maximum bandwidth. How many stages with what gain per stage must be placed in a cascade?
calculate the closed-loop voltage gain and output impedance, taking into account loading effects.
calculate the transimpedance of the resulting circuit. Also, calculate the input-referred noise current per unit bandwidth.
Using feedback techniques, calculate the input and output impedance and voltage gain of each circuit 
what is the bias current of M1? What value of Vin gives such a current? Calculate the overall voltage gain.
Calculate the input-referred noise voltage of the circuit
(a) Calculate the voltage gain and the output impedance of each circuit.
(b) Calculate the sensitivity of each circuit’s output with respect to the supply voltage. That is, calculate the small-signal “gain” from VDD to Vout. Which circuit exhibits less sensitivity?

Derive expressions for the transconductance and output resistance of a MOSFET in the triode region. Plot these quantities and gmrO as a function of VDS, covering both triode and saturation regions
Calculate the small-signal gain and the maximum output swing if all transistors remain in saturation
What is the small-signal gain at the peaks of the output swing?
(a) If M5–M8 are identical and have a length of 0.5 μm, calculate their minimum width such that M3 operates in saturation.
(b) Calculate the maximum output voltage swing.
(c) What is the open-loop voltage gain?
(d) Calculate the input-referred thermal noise voltage.
(a) What is the maximum allowable input CM level?
(b) What is VX ?
(c) What is the maximum allowable output swing if the gate of M2 is connected to the output?
(d) What is the acceptable range of Vb2?
(e) What is the input-referred thermal noise voltage?
a) Calculate the gate bias voltages of M2 and M3.
(b) Determine the maximum allowable output voltage swing.
(c) Calculate the overall voltage gain and the input-referred thermal noise voltage.
(a) Should the input pair of the amplifier use PMOS devices or NMOS devices?
(b) Calculate the loop gain for the CMFB network.
(a) What is the allowable input voltage range?
(b) At what input voltage are the input and output voltages exactly equal?
(a) Calculate the differential voltage gain of the op amp.
(b) Estimate the magnitude of the three major poles of the circuit.
Determine the slew rate of a fully-differential folded-cascode op amp.

An amplifier with a forward gain of A0 and two poles at 10 MHz and 500 MHz is placed in a unity-gain feedback loop. Calculate A0 for a phase margin of 60◦.
A unity-gain closed-loop amplifier exhibits a frequency peaking of 50% in the vicinity of the gain crossover. What is the phase margin?
(a) Estimate the poles at nodes X and Y by multiplying the small-signal resistance and capacitance to ground
what is the maximum tolerable value of CY that yields a phase margin of 60◦ for unity-gain feedback?
(a) Determine the CM level at nodes X and Y .
(b) Calculate the maximum output voltage swing.
(c) If each output is loaded by a 1-pF capacitor, compensate the op amp by Miller multiplication for a phase margin of 60◦ in unity-gain feedback. Calculate the pole and zero positions after compensation.
(d) Calculate the resistance that must be placed in series with the compensation capacitors to position the zero atop the nondominant pole.
(e) Determine the slew rate
Calculate the dimensions of
(a) Breaking the loop at the gate of M3, estimate the poles of the open-loop transfer function.
(b) If the circuit is compensated by adding a capacitor CC between the gate and the drain of M1, what value of CC achieves a phase margin of 60◦? Determine the poles after compensation.
(c) What resistance must be placed in series with CC to position the zero of the output stage atop the first nondominant pole?
determine the step response of the amplifier described in Problem 10.11 with (a) perfect pole-zero cancellation and (b) 10% mismatch between the pole and the zero magnitudes.
(a) Neglecting channel-length modulation in I1 and I2, determine the low-frequency gain of the op amp.
(b) Considering only the capacitances at X, Y , P, Q, and the output nodes, compute the overall transfer function. Is it possible for the zero to cancel one of the poles?
Write a KCL at the output node and derive a differential equation

(a) Estimate the degradation in PM if the load capacitance seen at the output is doubled.
(b) How should the compensation be modified to ensure that PM = 45◦ again?
Estimate the closed-loop time constant in Fig. 11.57 and see if it agrees with the open-loop dominant frequency of 1.7 MHz.
If the load capacitance is constant, how much bandwidth improvement can be achieved?
calculate the zero of the closed-loop transfer function

Identify the capacitive path(s) that couple the transition on VDD to the internal nodes and hence provide the start-up current.
Sketch the temperature coefficient of VB E [Eq. (12.13)] versus temperature
A differential pair with resistive loads is designed such that its voltage gain, gm RD, has a zero TC at room temperature. If only the temperature dependence of the mobility is considered, determine the required temperature behavior of the tail current. Design a circuit that roughly approximates this behavior.
What resistor temperature coefficient cancels the variation of the mobility at room temperature?

If the op amp is ideal, determine the minimum value of RF that guarantees a gain error of 1% for an input frequency of 1 MHz
Plot the waveform at node B
If the switch introduces a series resistance Ron and the op amp is ideal, calculate the time constant of the circuit in this mode. What is the total energy dissipated in the switch as the circuit enters the amplification mode and Vout settles to its final value?
calculate the time required for Vout to reach 2.1 V.
Calculate the maximum error at the output due to charge injection. Compare this error with that resulting from clock feedthrough.

(a) What is the maximum nonlinearity?
(b) What is the THD
Calculate the harmonic distortion in each circuit if the input signal has a peak amplitude of 100 mV.
Estimate the magnitude of the third harmonic at the output of the overall system.
Derive expressions for the harmonic amplitudes if the input signal is much less than ζ VT
calculate the input-referred offset voltage

determine the open-loop tranfer function and calculate the phase margin.
(a) What is the minimum value of RD that ensures oscillation?
(b) Determine the value of CL for an oscillation frequency of 1 GHz and a total low-frequency loop gain of 16.
Determine the minimum value of ISS in Fig. 15.47(c) that guarantees oscillation
Estimate the maximum value of ISS that guarantees that M1 and M2 do not enter the triode region.
Determine the oscillation condition and the frequency of oscillation.

determine the minimum t2 − t1 that is sufficient for phase alignment.
Determine the step response of the PLL
calculate the phase offset in terms of current mismatch.
determine the output spectrum of the divider.
Explain why the order of the PLL transfer function is lower by one while the PFD operates as a frequency detector

Silicon dioxide breaks down at high electric fields. Explain what happens if ideal scaling is performed while keeping the gate oxide thickness constant.
Explain what happens to the S/D junction capacitance and series resistance as ideal scaling occurs, but the S/D doping level remains constant. Does DIBL become more or less significant?
Explain why the mobile charge density cannot drop to exactly zero at any point along the channel. What happens beyond the pinch-off point?
What happens if the overdrive voltage is very small or very large?
calculate the transconductance of a MOSFET
Calculate rO . Explain how a current source with such behavior introduces distortion in the voltage across it.

A MOS technology is designed to provide only n-type transistors and two metal layers. Sketch the fabrication steps and determine the minimum number of masks required in this technology.
During a threshold-adjust implant, the wafer was not tilted, leading to severe channeling. Explain whether the resulting threshold voltage is higher or lower than the target value.
Identify the faulty junction if (a) the voltage gain is higher than expected,
Determine which fabrication error may have led to this effect: (a) channeling during S/D implant, (b) omission of the channel-stop implant, or (c) insufficient gate-oxide growth
An NMOS cascode current source has a zero output current. If a single (small) lithography misalignment has caused this error, determine in which fabrication step(s) this may have occurred.
If the bias current is equal to the target value, determine which fabrication error may have led to this effect: (a) heavy n-well implantation, (b) heavy 
threshold-adjust implantation, or (c) long gate oxidation cycle
If the bias current of the op amp is equal to the desired value, which fabrication error is likely to have happened: (a) heavy threshold-adjust implantation, (b) very heavy doping in the bottom plate of C1 (placed at node P), or (c) channeling during the S/D implantation?
(a) Calculate the equivalent series resistance of M1.
(b) Calculate the maximum value of Lb that results in a critically-damped response at node X. Model the digital circuit by a transient current source
For what value of W are the parallel-plate and fringe capacitances equal?

In Fig. 19.3, polysilicon has a sheet resistance of 30 / (before silicidation) and metal 1 a sheet resistance of 80 m/. What is the ratio of the resistivities of the two materials?
A MOSFET with W/L = 100 μm/0.5 μm undergoes ideal scaling by a factor of two. What happens to the sheet resistivity and the total resistance of the gate?
If the sheet resistance of polysilicon is 5 / and the maximum tolerable gate resistance 10 , draw the layout of the structure while minimizing the drain junction capacitances.
The input differential pair of an amplifier is to be laid out as in Fig. 19.19, but with each half device (e.g., 1/2M1) using four gate fingers. What is the minimum number of interconnect layers required here?
Determine which material should be used to construct a 500- resistor if matching considerations require a minimum poly width of 3 μm and a minimum n-well length of 6 μm. Neglect fringe capacitances.
Suppose two bond wires are placed 5 mm above ground with a center-to-center spacing of 1 mm.
(a) What is the total mutual inductance if each wire is 4 mm long?
(b) If one wire carries a 100-MHz sinusoidal current with a peak amplitude of 1 mA, what is the voltage induced across the other wire?
what center-to-center spacing is required to decrease the induced voltage by a factor of four?
Neglecting mutual inductance between nonadjacent lines, calculate the equivalent inductance of the supply and ground connections if (a) all of the supply wires are placed next to each other and so are the ground wires, and (b every supply wire is placed next to a ground wire.



























Quantum Computing

1. Which view contains your API token?
2. Which device in your list has the fewest qubits?
3. How many connections are there in the device with the fewest qubits?
4. What are the two tools called that are used to generate quantum circuits?
5. Which view would provide you with the list of basis gates for a selected device?

1. Using the entangled coin-flip experiment, re-run the experiment. What is the statevector of the results?
2. What are the result states if you were to add a NOT gate before the Hadamard gate in the entangled coin-flip experiment's circuit?
3. Using the entangled coin-flip experiment from the Circuit Editor, switch the measurements so that the output of q0 reads out to classic bit 1, and q1 reads out to classic bit 0. What are the two states in the result and what are their probabilities?
4. What would the result states be if you were to add a Hadamard gate to the second qubit before the CNOT gate in the entangled coin-flip experiment's circuit?

1. Quantum Lab notebooks are built upon which application editor?
2. How would you create a 5-qubit circuit, as we did in Chapter 2, Circuit Composer - Creating a Quantum Circuit?
3. To run the experiment on another real device, which quantum computer would you select if your quantum circuit has more than 5 qubits?
4. When you run on a real device, can you explain why you get extra values when compared to running on a simulator? 

1. How would you create a circuit that entangles two qubits where each qubit is different (that is, 01, 10)?
2. Which simulator is used to display the Bloch sphere?
3. Execute the superposition experiment with the shots=1 parameter, then shots=1000, and then shots=8000. What is the difference?
4. Run the quantum teleportation experiment on a real quantum device and describe the results compared to the simulator's results. What's different, if anything, and why? (Hint: noise affects near-term devices).

1. What is the transpose of the single qubit state, stated as a column vector?
2. Which would provide visual information about the phase of a qubit – the Bloch sphere or the Qiskit sphere?
3. Can you visualize multi-qubits on the Bloch sphere? If yes, then why? If no, then why?
4. Write out the tensor product of three qubit states in all their forms.
5. What is the probability amplitude of a three-qubit system?
6. What material is used to create the capacitors of a qubit?
7. What are Josephson Junctions made of?
8. What approximate temperature do the qubits have to be at in order to operate properly

1. For the multi-qubit gates, try flipping the Source and Target. Do you see a difference when you decompose the circuit?
2. Decompose all the gates for both single and multi-qubit circuits. What do you notice about how the universal gates are constructed?
3. Implement the Toffoli gate where the target is the center qubit of a three-qubit circuit.
4. Decompose the Toffoli gate. How many gates in total are used to construct it?
5. Apply the Toffoli gate along with a Hadamard gate to a state vector simulator and compare the results to that from the Qasm simulator. What differences do you see and why?
6. If you wanted to sort three qubits in the opposite direction, which gates would you use and in which order?
7. Given a three-qubit circuit, how would you go about swapping the first and third qubits?
8. Given a three-qubit circuit, how would you set the second qubit as the Target of a Toffoli gate?

1. Which of the four elements would financial analysts use to integrate their risk analysis applications into a quantum computer?
2. In your own words, describe what each element would provide to a quantum algorithm researcher.
3. If you wanted to run schedules on a quantum computer, which simulator would you need to use?
4. If you wanted to obtain the unitary of a circuit, which element would provide the necessary simulator?
5. If you wanted to analyze the computational power of a quantum system, whichelement would your application need?
6. Can you name and describe each of the simulators that are provided by Aer?
7. Which module would I need to import to plot a histogram?

1. What are the four elements of Qiskit?
2. Construct a random quantum circuit with a width of 4 and a depth of 9.
3. Create a quantum circuit with the same width as the circuit you created in question
2 and concatenate it so that it is added before the random quantum circuit you created.
4. Print the circuit properties of the concatenated quantum circuit from question 3 and specify the total number of operators, not including any measurement operators.
5. Create a circuit with a parameterized RY gate that would rotate by an angle of π/2.
6. Create and draw a schedule with any of the available waveforms from the Pulse library.
7. Using the Provider object, how many quantum systems do you have access to that have 5 or more qubits?

1. Create a filter that will return the least busy backend to run a quantum circuit that includes any constraint other than those covered in this book (Hint: use the backend.configuration() function to view other backend configuration variables).
2. Can you name two components of the Transpiler?
3. Which component allows you to specify the passes to use?
4. What is the depth of a Toffoli gate when decomposed?
5. Is there a difference between when decomposing a Toffoli gate using decompose() versus the Transpiler?
6. What are the basis gates on the ibmq_santiago device?
7. What are the five pass types?
8. What is the default optimization_level value when running the execute() function?
9. What are the default optimization_level values set for TrivialLayout and DenseLayout?

1. Can you list all the simulators found in the Aer library?
2. How many total simulators are there altogether in Qiskit? (Hint: This includes Basic Aer, Aer, and IBM Quantum Provider.)
3. Create a QSphere representation of a qubit on the negative y axis, creating the state |0 − 𝑖𝑖 |1 √2 , using only a single Hadamard gate along with the phase gates.
4. What must the initialized probability value of a circuit be in order to be valid?
5. Can you use the QSphere to visualize both the phase and probability information of a qubit?
6. How would you apply a noise function to qubits 2, 3, and 4 of a 5-qubit system?
7. What would happen if you set the depolarization error values close to 1?
8. If you applied a readout error equally to all qubits, what results would you expect, and why?

1. List the various characterizations of a qubit.
2. Which decoherence is analyzed using the Ramsey experiment?
3. What is the difference between relaxation and dephasing decoherence?
4. Which of the following is not a value for dephasing – T1, T2, or T2*?
5. What is the maximum number of qubits you can apply to a measurement filter?
6. What is the difference between T2 and T2 *?
7. What do the rows and columns of a calibration matrix relate to?
8. What is the name of the effect when a qubit decays from the excited state to the ground state?

1. Using the Quantum Circuit from the example shown in Figure 12.4, create a custom initialized state using the state_vector parameter.
2. Construct a Circuit State function from a state vector.
3. Construct a balanced Oracle and verify it using the Deutsch-Jozsa algorithm.
4. Implement the Bernstein-Vazirani algorithm to find the secret value, 170. (Hint: use the decimal to binary utility).
5. How many Oracle functions are there?
6. Does Aqua also include classical algorithms?
7. Leveraging the qiskit.aqua.circuits.StateVectorCircuit class, construct a circuit that represents an X gate.
8. Change the backend on QuantumInstance to a quantum computer backend that is available and rerun any of the quantum algorithms. Describe what differences, if any, you were able to observe.

1. Create a circuit that implements Deutsch's algorithm for a constant function and verify your results.
2. Which algorithm would you use to determine whether an n-bit string is balanced?
3. Would phase kickback work if the ancilla qubit was not set to the state |1 ? Explain your answer.
4. Implement the Bernstein-Vazirani algorithm to find the state |11010 .
5. What would happen if you set the ancilla qubit in either of the algorithms by first placing a Hadamard gate, followed by an X gate? Explain the reason for the results.
6. Program and create an automated oracle generator for the Bernstein-Vazirani algorithm that randomly generates the secret state. Can you determine the value by just running the circuit and reviewing the results?

1. What other problems can you solve using periodic functions?
2. Implement QFT on a five-qubit state—for example, '10110'.
3. Since quantum gates are reversible, how would you create an inverse QFT on the encoded value we created, '110', or |6̃?
4. Using Grover's algorithm, find the following states: '101', '001', and '010'.
5. How many iterations of Grover's algorithm would you need to run to find the state |10101?
6. Rerun the Grover's search example. Only repeat Grover's oracle and the diffusion operator twice and note the difference in the result. What do you see that is different? What would you expect to change if you ran it three times?
7. Does Qiskit Aqua also include classical algorithms along with the quantum algorithms?
8. What other algorithms are included with Qiskit Aqua?
















Haskell

Determine if each of the following are combinators or not.
Determine if each of the following can be reduced to a normal form or if they diverge
Evaluate (that is, beta reduce) each of the following expressions to normal form

Given what we know about the precedence of (*), (+), and (^), how can we parenthesize the following expressions more explicitly without changing their results? Put together an answer you think is correct, then test in the GHCi REPL.
Which of the following pairs of expressions will return the same result when evaluated? Try to reason them out by reading the code and then enter them into the REPL to check your work:
look at this code and rewrite it such that it could be evaluated in the REPL (remember: you may need let when entering it directly into the REPL)
Now, what will happen if we enter this at our GHCi prompt? What do you think will happen first, considering what role waxOn is playing in this function call? 
Rewrite waxOn as an expression with a where clause in your source file. Load it into your REPL and make sure it still works as expected

For the following lines of code, read the syntax carefully and decide if they are written correctly. Test them in your REPL after you’ve decided to check your work.
Next we have two sets: the first set is lines of code and the other is a set of results. Read the code and figure out which results came from which lines of code. Can you match each of the previous expressions to one of these results presented in a scrambled order?
Given the list-manipulation functions mentioned in this chapter, write functions that take the following inputs and return the expected outputs
rewrite it in a source file as a general function that could take different string inputs as arguments but retain the same behavior. Use a variable as the argument to your (named) functions
Write a function of type String -> Char which returns the third character in a String.  Now change that function so the string operated on is always the same and the variable represents the number of the letter you want to return

length is a function that takes a list and returns a result that tells how many items are in the list.
1. Given the definition of length above, what would the type signature be? How many arguments, of what type does it take? What is the type of the result it evaluates to?
Given what we know about numeric types and the type signature of length, look at these two expressions. One works and one returns an error. Determine which will return an error and why.
4. How can you fix the broken code from the preceding exercise using a different division function/operator?
5. What is the type of the expression 2 + 3 == 5? What would we expect as a result?
Write a function that tells you whether or not a given String (or list) is a palindrome. 
Write a function to return the absolute value of a number using if-then-else
Fill in the definition of the following function, using fst and snd:
Which of the following types is the type of show?
Which of the following types is the type of (==)?
Which of the following types is the type of fst?
Which of the following types is the type of (+)?

A value of type [a] is?
A function of type [[a]] -> [a] could?
All function applications return a value. Determine the value returned by these function applications and the type of that value
For each set of expressions, figure out which expression, if any, causes the compiler to squawk at you
You will be shown a type declaration, and you should categorize each type. The choices are a fully polymorphic type variable, constrained polymorphic type variable, or concrete type constructor.
Categorize each component of the type signature 
For the following expressions, please add a type signature
You will be shown a type and a function that needs to be written
The focus here is on manipulating terms in order to get the types to fit. You’ll use only the declarations provided and what the Prelude provides by default unless otherwise specified. Your goal is to make the ???’d declaration pass the typechecker by modifying it alone

The Eq class?
The typeclass Ord?
Suppose the typeclass Ord has an operator >. What is the type of >?
The typeclass Integral includes?
Examine the following code and decide whether it will typecheck.
We’re going to give you two types and their implementations. Then we’re going to ask you if you can substitute the second type for the first

A polymorphic function?
The composed function g . f has the type?
A function f has the type Ord a => a -> a -> Bool and we apply it to one numeric value. What is the type now?
Given the following definition of f, what is the type of f True?
The following function returns the tens digit of an integral argument. 
a) First, rewrite it using divMod.
b) Does the divMod version have the same type as the original version?
c) Next, let’s change it so that we’re getting the hundreds digit instead.
Implement the function of the type a -> a -> Bool -> a once each using a case expression and once with a guard
write a pointfree version of roundTrip

What is the type of [[True, False], [True, True], [False,True]]?
For the func code above, which is a valid application of func to both of its argumen
Write out the steps for reducing dividedBy 15 2 to its final answer according to the Haskell code.
Write a function that recursively sums all numbers from 1 to n, n being the argument. So that if n was 5, you’d add 1 + 2 + 3 + 4 + 5 to get 15. The type should be (Eq a, Num a) => a -> a.
write the Mccarthy 91 function
Fill in the implementations of the functions above so that wordNumber returns the English word version of the Int value. You will first write a function that turns integers from 0-9 into their corresponding English words, ”one,” ”two,” and so on. Then you will write a function that takes the integer, separates the digits, and returns it as a list of integers. Finally you will need to apply the first function to the list produced by the second function and turn it into a single string with interspersed hyphens.

1. Query the types of isUpper and toUpper.
2. Given the following behaviors, which would we use to write a function that filters all the uppercase letters out of a String? Write that function such that, given the input “HbEfLrLxO,” your function will return “HELLO.”
3. Write a function that will capitalize the first letter of a string and return the entire string
4. Now make a new version of that function that is recursive such that if you give it the input “woot” it will holler back at you “WOOT.” 
Now write a function that will capitalize the first letter of a String and return only that letter as the result. rewrite it as a composed function. Then, for fun, rewrite it pointfree
write a basic Caesar cipher that shifts rightward. 
write your own versions of these to gain a deeper understanding of recursion over lists and how to make functions flexible enough to accept a variety of inputs.
write the recursive myElem, write another version that uses any.
4. Implement myReverse
Using the myMinimumBy and myMaximumBy functions, write your own versions of maximum and minimum

Write a function that takes inputs from stops and vowels and makes 3-tuples of all possible stop-vowelstop combinations. 
b) Modify that function so that it only returns the combinations that begin with a p.
c) Now set up lists of nouns and verbs (instead of stops and vowels) and modify the function to make tuples representing possible noun-verb-noun sentences.
rewrite them using folds.

a) Weekday is a type with five data constructors
b) Weekday is a tree with five branches
c) Weekday is a product type
d) Weekday takes five arguments
what is the type of the following function, f?
Types defined with the data keyword?
writing a Vigenère cipher.
Use as-patterns in implementing the following function: Split a sentence into words, then tuple each word with the capitalized form of each.
2. Write a function that capitalizes sentences in a paragraph. Recognize when a new sentence has begun by checking for periods. Reuse the capitalizeWord function
Create a data structure that captures the phone layout above. The data structure should be able to express enough of how the layout works that you can use it to dictate the behavior of the functions in the following exercises.
Convert the following conversations into the keypresses required to express them. 
Your first task is to write the “eval” function which reduces an expression to a final sum.
Write a printer for the expression

What is the kind of a?
Write a recursive function named replaceThe which takes a text/string, breaks it into words and replaces each instance of “the” with “a”
Write a recursive function that takes a text/string, breaks it into words, and counts the number of instances of ”the” followed by a vowel-initial word
Return the number of letters that are vowels in a word.
Use the Maybe type to write a function that counts the number of vowels in a string and the number of consonants.
implement functions to convert Naturals to Integers and Integers to Naturals
Write the following functions:
Simple boolean checks for Maybe values.
The following is the Maybe catamorphism. You can turn a Maybe value into anything else with this.
Converting between List and Maybe.
For when we want to drop the Nothing values from our list.
Try to eventually arrive at a solution that uses foldr, even if earlier versions don’t use foldr.
Write the function myIterate using direct recursion.
Rewrite myIterate into betterIterate using myUnfoldr
Make a tree builder, Using the unfold function you’ve made for BinaryTree, write the following function

Remember the “numbers into words” exercise in Recursion? You’ll be writing tests to validate the functions you wrote.
Use QuickCheck and the following helper functions to demonstrate idempotence for the following
create QuickCheck properties that verify your Caesar and Vigenère ciphers return the same data after encoding and decoding a string.

Given a datatype, implement the Semigroup instance. Add Semigroup constraints to type variables where needed. Use the Semigroup class from the semigroups library (or from base if you are on GHC 8) or write your own.
Validate all of your instances with QuickCheck.
Given a datatype, implement the Monoid instance. Add Monoid constraints to type variables where needed.
A correct Monoid for Mem should, given the above code, get the following outpu

Determine if a valid Functor can be written for the datatype provided.
Rearrange the arguments to the type constructor of the datatype so the Functor instance works.
Write Functor instances for the following datatypes.

Given a type that has an instance of Applicative, specialize the types of the methods. Test your specialization in the REPL
Write instances for the following datatypes. Confused? Write out what the type should be. Use the checkers library to validate the instances.
Write the function to generate the possible combinations of three input lists using liftA3 from Control.Applicative.

Write Monad instances for the following types
Write a Monad instance for Identity.
Write the following functions using the methods provided by Monad and Functor. Using stuff like identity and composition is fine, but it has to typecheck with types provided.

Implement the functions in terms of foldMap or foldr from Foldable, then try them out with multiple types that have Foldable instances.
Write Foldable instances for the following datatypes
Thinking cap time. Write a filter function for Foldable types using foldMap.

Write a Traversable instance for the datatype provided, filling in any required superclasses.

write some functions that zip those lists together and use lookup to find the value associated with a specified key in our zipped lists. o add the ability to make a Maybe (,) of values using Applicative.
Remember the URL shortener? Instead of manually passing the database connection rConn from main to the app function that generates a Scotty app, use ReaderT to make the database connection available.

Construct a State where the state is also the value you return
Construct a State where the resulting state is the argument provided and the value is defaulted to unit.
Write a function which applies a function to create a new State.

Write a parser for semantic versions as defined by http: //semver.org/. After making a working parser, write an Ord instance for the SemVer type that obeys the specification outlined on the SemVer website
Write a parser for positive integer values
Write a parser for US/Canada phone numbers with varying formats.
Write a parser for a log file format and sum the time spent in each activity.
Write a parser for IPv4 addresses.
Write a function that converts between IPAddress and IPAddress6.
Write a parser for the DOT language14 that Graphviz uses to express graphs in plain-text.

Write a function: rDec is a function that should get its argument in the context of Reader and return a value decremented by one. Once you have an rDec that works, make it and any inner lambdas pointfree if that’s not already the case.
rShow is show, but in Reader. Once you have an rShow that works, make it pointfree.
sPrintIncAccum first prints the input with a greeting, then puts the incremented input as the new state, and returns the original input as a String.
We’re going to provide an initial scaffold of a scotty application which counts hits to specific URIs. It also prefixes the keys with a prefix defined on app initialization, retrieved via the command line arguments.

Try messing around with the following list type and compare what it does with the bang-patterned list variants we experimented with earlier
We show you a definition or multiple definitions, you determine what :sprint will output when passed the bindings listed in your head before testing it.
Will printing this expression result in bottom?
Using only bang patterns or seq, make the code bottom out when executed.

write another data structure in terms of list, but this time it’ll be a queue.

Reusing the Vigenère cipher you wrote back in algebraic datatypes and wrote tests for in testing, make an executable that takes a key and a mode argument.
Use hWaitForInput to make your utility timeout if no input is provided within a span of time of your choosing. You can make it an optional command-line argument. Exit with a nonzero error code and an error message printed to standard error (stderr) instead of stdout
Reusing the INI parser from the Parsing chapter, parse a directory of INI config files into a Map whose key is the filename and whose value is the result of parsing the INI file. Only parse files in the directory that have the file extension .ini.

Final project: fingerd
Try using the sqlite3 command line interface to add a new user or modify an existing user in finger.db.
Write an executable separate of fingerd and debug which allows you to add new users to the database.
Add the ability to modify an existing user in the database.
Bound on a different port, try creating a “control socket” that permits inserting new data into the database while the server is running. 
Design the format for representing the user rows passed over the TCP socketyourself. For bonus points, write your own client executable that takes the arguments from the command line as well.














C

Write a program to print the corresponding Celsius to Fahrenheit table
Modify the temperature conversion program to print the table in reverse order, that is, from 300 degrees to 0.
Write a program to print the value of EOF.
Write a program to count blanks, tabs, and newlines.
Write a program to copy its input to its output, replacing each tab by \t, each backspace by \b, and each backslash by \\. This makes tabs and backspaces visible in an unambiguous way.
Write a program that prints its input one word per line.
Write a program to print a histogram of the frequencies of different characters in its input.
Write a program to print a histogram of the lengths of words in its input. It is easy to draw the histogram with the bars horizontal; a vertical orientation is more challenging.
Revise the main routine of the longest-line program so it will correctly print the length of arbitrarily long input lines, and as much as possible of the text.
Write a program to remove trailing blanks and tabs from each line of input, and to delete entirely blank lines.
Write a function reverse(s) that reverses the character string s. Use it to write a program that reverses its input a line at a time.
Write a program to remove all comments from a C program.
Write a program to check a C program for rudimentary syntax errors like unbalanced parentheses, brackets and braces. Don’t forget about quotes, both single and double, escape sequences, and comments.
Write a program entab that replaces strings of blanks by the minimum number of tabs and blanks to achieve the same spacing.

Write a program to determine the ranges of char, short, int, and long variables, both signed and unsigned, by printing appropriate values from standard headers and by direct computation. Harder if you compute them: determine the ranges of the various floating-point types.
Write a loop equivalent to the for loop above without using && or ¦¦.
Write the function htoi(s), which converts a string of hexadecimal digits (including an optional 0x or 0X) into its equivalent integer value. The allowable digits are 0 through 9, a through f, and A through F
Write the function any(s1,s2), which returns the first location in the string s1 where any character from the string s2 occurs, or −1 if s1 contains no characters from s2. (
Write a function invert(x,p,n) that returns x with the n bits that begin at position p inverted (i.e., 1 changed into 0 and vice versa), leaving the others unchanged.
Write a function rightrot(x,n) that returns the value of the integer x rotated to the right by n bit positions
In a two’s complement number system, x &= (x−1) deletes the rightmost 1-bit in x. Explain why. Use this observation to write a faster version of bitcount.
Rewrite the function lower, which converts upper case letters to lower case, with a conditional expression instead of if-else.

Our binary search makes two tests inside the loop, when one would suffice (at the price of more tests outside). Write a version with only one test inside the loop and measure the difference in run-time.
Write a function escape(s,t) that converts characters like newline and tab into visible escape sequences like \n and \t as it copies the string t to s. Use a switch.
Write a function expand(s1,s2) that expands shorthand notations like a-z in the string s1 into the equivalent complete list abc...xyz in s2. A
Write the function itob(n,s,b) that converts the integer n into a base b character representation in the string s. In particular, itob(n,s,16) formats n as a hexadecimal integer in s.
Write a version of itoa that accepts three arguments instead of two. The third argument is a minimum field width; the converted number must be padded with blanks on the left if necessary to make it wide enough.

Write the function strrindex(s,t), which returns the position of the rightmost occurrence of t in s, or −1 if there is none.
Write a routine ungets(s) that will push back an entire string onto the input. Should ungets know about buf and bufp, or should it just use ungetch?
Our getch and ungetch do not handle a pushed-back EOF correctly. Decide what their properties ought to be if an EOF is pushed back, then implement your design.
Modify getop so that it doesn’t need to use ungetch. Hint: use an internal static variable.
Write a recursive version of the function reverse(s), which reverses the string s in place.
Adapt the ideas of printd to write a recursive version of itoa; that is, convert an integer into a string by calling a recursive routine.
Define a macro swap(t,x,y) that interchanges two arguments of type t. (Block structure will help.)

Write getfloat, the floating-point analog of getint. What type does getfloat return as its function value?
Write the function strend(s,t), which returns 1 if the string t occurs at the end of the string s, and zero otherwise.
Write a pointer version of the function strcat that we showed in Chapter 2: strcat(s,t) copies the string t to the end of s.
Rewrite appropriate programs from earlier chapters and exercises with pointers instead of array indexing.
Write versions of the library functions strncpy, strncat, and strncmp, which operate on at most the first n characters of their argument strings. F
Rewrite readlines to store lines in an array supplied by main, rather than calling alloc to maintain storage. How much faster is the program?
There is no error checking in day_of_year or month_day. Remedy this defect.
Write the program expr, which evaluates a reverse Polish expression from the command line, where each operator or operand is a separate argument
Modify the programs entab and detab (written as exercises in Chapter 1) to accept a list of tab stops as arguments.
Write the program tail, which prints the last n lines of its input. 
Modify the sort program to handle a -r flag, which indicates sorting in reverse (decreasing) order. Be sure that -r works with -n
Add the option -f to fold upper and lower case together, so that case distinctions are not made during sorting; for example, a and A compare equal.
Add a field-handling capability, so sorting may be done on fields within lines, each field sorted according to an independent set of options.
Make dcl recover from input errors. Expand dcl to handle declarations with function argument types, qualifiers like const, and so on.

Our version of getword does not properly handle underscores, string constants, comments, or preprocessor control lines. Write a better version.
Write a program that reads a C program and prints in alphabetical order each group of variable names that are identical in the first 6 characters, but different somewhere thereafter
Write a cross-referencer that prints a list of all words in a document, and, for each word, a list of the line numbers on which it occurs. Remove noise words like “the,” “and,” and so on
Write a program that prints the distinct words in its input sorted into decreasing order of frequency of occurrence. 
Write a function undef that will remove a name and definition from the table maintained by lookup and install.
Implement a simple version of the #define processor (i.e., no arguments) suitable for use with C programs, based on the routines of this section. 

Write a program that converts upper case to lower or lower case to upper, depending on the name it is invoked with, as found in argv[0].
Write a program that will print arbitrary input in a sensible way. As a minimum, it should print non-graphic characters in octal or hexadecimal according to local custom, and break long text lines.
Revise minprintf to handle more of the other facilities of printf.
Write a private version of scanf analogous to minprintf from the previous section.
Rewrite the postfix calculator of Chapter 4 to use scanf and/or sscanf to do the input and number conversion.
Write a program to compare two files, printing the first line where they differ.
Write a program to print a set of files, starting each new one on a new page, with a title and a running page count for each f

Rewrite the program cat from Chapter 7 using read, write, open and close instead of their standard library equivalents
Rewrite fopen and _fillbuf with fields instead of explicit bit operations. Compare code size and execution speed.
Design and write _flushbuf, fflush, and fclose.
Write fseek
Modify the fsize program to print the other information contained in the inode entry.
The standard library function calloc(n,size) returns a pointer to n objects of size size, with the storage initialized to zero. Write calloc, by calling malloc or by modifying it.
malloc accepts a size request without checking its plausibility; free believes that the block it is asked to free contains a valid size field. Improve these routines so they take more pains with error checking.
Write a routine bfree(p,n) that will free an arbitrary block p of n characters into the free list maintained by malloc and free. By using bfree, a user can add a static or external array to the free list at any time.














Javascripts

Write a loop that makes seven calls to console.log to output the following triangle
Write a program that uses console.log to print all the numbers from 1 to 100, with two exceptions. For numbers divisible by 3, print "Fizz" instead of the number, and for numbers divisible by 5 (and not 3), print "Buzz" instead.
Write a program that creates a string that represents an 8×8 grid, using newline characters to separate lines.

The previous chapter introduced the standard function Math.min that returns its smallest argument. We can build something like that now. Write a function min that takes two arguments and returns their minimum.
Define a recursive function isEven corresponding to this description. The function should accept a single parameter (a positive, whole number) and return a Boolean
Write a function countBs that takes a string as its only argument and returns a number that indicates how many uppercase “B” characters there are in the string. Next, write a function called countChar that behaves like countBs, except it takes a second argument that indicates the character that is to be counted (rather than counting only uppercase “B” characters). Rewrite countBs to make use of this new function.

Write a range function that takes two arguments, start and end, and returns an array containing all the numbers from start up to (and including) end. Next, write a sum function that takes an array of numbers and returns the sum of these numbers. As a bonus assignment, modify your range function to take an optional third argument that indicates the “step” value used when building the array.
write two functions, reverseArray and reverseArrayInPlace. The first, reverseArray, takes an array as argument and produces a new array that has the same elements in the inverse order. The second, reverseArrayInPlace, does what the reverse method does: it modifies the array given as argument by reversing its elements
Write a function arrayToList that builds up a list structure like the one shown when given [1, 2, 3] as argument. Also write a listToArray function that produces an array from a list. Then add a helper function prepend, which takes an element and a list and creates a new list that adds the element to the front of the input list, and nth, which takes a list and a number and returns the element at the given position in the list (with zero referring to the first element) or undefined when there is no such element.
Write a function deepEqual that takes two values and returns true only if they are the same value or are objects with the same properties, where the values of the properties are equal when compared with a recursive call to deepEqual.

Use the reduce method in combination with the concat method to “flatten” an array of arrays into a single array that has all the elements of the original
arrays.
Write a higher-order function loop that provides something like a for loop statement.
Implement every as a function that takes an array and a predicate function as parameters. Write two versions, one using a loop and one using the some method.
Write a function that computes the dominant writing direction in a string of text. Remember that each script object has a direction property that can be "ltr" (left to right), "rtl" (right to left), or "ttb" (top to bottom).

Write a class Vec that represents a vector in two-dimensional space. It takes x and y parameters (numbers), which it should save to properties of the same name. Give the Vec prototype two methods, plus and minus, that take another vector as a parameter and return a new vector that has the sum or difference of the two vectors’ (this and the parameter) x and y values. Add a getter property length to the prototype that computes the length of the vector—that is, the distance of the point (x, y) from the origin (0, 0).
Write a class called Group (since Set is already taken). Like Set, it has add, delete, and has methods. Its constructor creates an empty group, add adds a value to the group (but only if it isn’t already a member), delete removes its argument from the group (if it was a member), and has returns a Boolean value indicating whether its argument is a member of the group. Use the === operator, or something equivalent such as indexOf, to determine whether two values are the same. Give the class a static from method that takes an iterable object as argument and creates a group that contains all the values produced by iterating over it.

Write a function compareRobots that takes two robots (and their starting memory). It should generate 100 tasks and let each of the robots solve each of these tasks
Write a new class PGroup, similar to the Group class from Chapter 6, which stores a set of values. Like Group, it has add, delete, and has methods.
Its add method, however, should return a new PGroup instance with the given member added and leave the old one unchanged. Similarly, delete creates a new instance without a given member.

Write a function that wraps this clunky function and just keeps trying until a call succeeds, after which it returns the result.
Write a function called withBoxUnlocked that takes a function value as argument, unlocks the box, runs the function, and then ensures that the box is locked again before returning, regardless of whether the argument function returned normally or threw an exception.

For each of the following items, write a regular expression to test whether any of the given substrings occur in a string
Write an expression that matches only JavaScript-style numbers. It must support an optional minus or plus sign in front of the number, the decimal dot, and exponent notation—5e-3 or 1E10—again with an optional sign in front of the exponent. 

If you were to write that project as a modular program, what modules would you create? Which module would depend on which other module, and what would their interfaces look like? Which pieces are likely to be available prewritten on NPM? Would you prefer to use an NPM package or write them yourself?
Write a CommonJS module, based on the example from Chapter 7, that contains the array of roads and exports the graph data structure representing them as roadGraph. It should depend on a module ./graph, which exports a function buildGraph that is used to build the graph.

Write an async function locateScalpel that does this, starting at the nest on which it runs. You can use the anyStorage function defined earlier to access storage in arbitrary nests. 
Next, write the same function again without using async and await.
Do request failures properly show up as rejections of the returned promise in both versions? How?

Implement something like this yourself as a regular function called Promise_all

Add support for arrays to Egg by adding the following three functions to the top scope: array(...values) to construct an array containing the argument
values, length(array) to get an array’s length, and element(array, n) to fetch the nth element from an array.
Add a special form set, similar to define, which gives a binding a new value, updating the binding in an outer scope if it doesn’t already exist in the inner scope. If the binding is not defined at all, throw a ReferenceError (another standard error type).

Given a data set of mountains, an array of objects with name, height, and place properties, generate the DOM structure for a table that enumerates the objects.
The document.getElementsByTagName method returns all child elements with a given tag name. Implement your own version of this as a function that takes a
node and a string (the tag name) as arguments and returns an array containing all descendant element nodes with the given tag name.

Write a page that displays a balloon (using the balloon emoji, 🎈). When you press the up arrow, it should inflate (grow) 10 percent, and when you press the down arrow, it should deflate (shrink) 10 percent. When that works, add a feature where, if you blow up the balloon past a certain size, it explodes.
implement a mouse trail
implement a simple tabbed interface. Write a function, asTabs, that takes a DOM node and creates a tabbed interface showing the child elements of that node

Adjust runGame to implement lives. Have the player start with three. Output the current number of lives (using console.log) every time a level starts.

Write a program that draws the following shapes on a canvas: A spiral made up of 100 straight line segments
Use the requestAnimationFrame technique that we saw in Chapter 14 and Chapter 16 to draw a box with a bouncing ball in it

Send requests to fetch all three formats of this resource. Use the headers property in the options object passed to fetch to set the header named Accept to the desired media type.
Build an interface that allows people to type and run pieces of JavaScript code. Put a button next to a <textarea> field that, when pressed, uses the Function constructor we saw in Chapter 10 to wrap the text in a function and call it. Convert the return value of the function, or any error it raises, to a string and display it below the text field.

Add keyboard shortcuts to the application.
Creating a new state and updating the rest of the DOM isn’t very expensive, but repainting all the pixels on the canvas is quite a bit of work. Find a way to make the syncState method of PictureCanvas faster by redrawing only the pixels that actually changed.
Define a tool called circle that draws a filled circle when you drag

Write a Node script that can be run from the command line and acts somewhat like grep. When that works, extend it so that when one of the arguments is a directory, it searches through all files in that directory and its subdirectories. Use asynchronous or synchronous file system functions as you see fit. 
Though the DELETE method in our file server is able to delete directories (using rmdir), the server currently does not provide any way to create a directory. Add support for the MKCOL method (“make column”), which should create a directory by calling mkdir from the fs module. MKCOL is not a widely used HTTP method, but it does exist for this same purpose in the WebDAV standard, which specifies a set of conventions on top of HTTP that make it suitable for creating documents.
Write a basic HTML page that includes a simple JavaScript file. Put the files in a directory served by the file server and open them in your browser. Next, as an advanced exercise or even a weekend project, combine all the knowledge you gained from this book to build a more user-friendly interface for modifying the website—from inside the website

Extend the server so that it stores the talk data to disk and automatically reloads the data when it is restarted. 



















Python

What three functions can be used to get the integer, floating-point number, or string version of a value?

Write out the truth tables of each Boolean operator (that is, every possible combination of Boolean values for the operator and what they evaluate to).
What is the difference between the equal to operator and the assignment operator?
Write code that prints Hello if 1 is stored in spam, prints Howdy if 2 is stored in spam, and prints Greetings! if anything else is stored in spam
Write a short program that prints the numbers 1 to 10 using a for loop. Then write an equivalent program that prints the numbers 1 to 10 using a while loop.

Write a function named collatz() that has one parameter named number. If number is even, then collatz() should print number // 2 and return this value. If number is odd, then collatz() should print and return 3 * number + 1. Then write a program that lets the user type in an integer and that keeps calling collatz() on that number until the function returns the value 1.
Add try and except statements to the previous project to detect whether the user types in a noninteger string. Normally, the int() function will raise a ValueError error if it is passed a noninteger string, as in int('puppy'). In the except clause, print a message to the user saying they must enter an integer.

Write a function that takes a list value as an argument and returns a string with all the items separated by a comma and a space, with and inserted before the last item.
Write a program to find out how often a streak of six heads or a streak of six tails comes up in a randomly generated list of heads and tails. Your program breaks up the experiment into two parts: the first part generates a list of randomly selected 'heads' and 'tails' values, and the second part checks if there is a streak in it.
Think of grid[x][y] as being the character at the x- and y-coordinates of a “picture” drawn with text characters. The (0, 0) origin is in the upper-left corner, the x-coordinates increase going right, and the ycoordinates increase going down. Copy the previous grid value, and write code that uses it to print the image.

Write a function named isValidChessBoard() that takes a dictionary argument and returns True or False depending on if the board is valid.
Write a function named displayInventory() that would take any possible “inventory” and display it like the following
Write a function named addToInventory(inventory, addedItems), where the inventory parameter is a dictionary representing the player’s inventory (like in the previous project) and the addedItems parameter is a list like dragonLoot. The addToInventory() function should return a dictionary that represents the updated inventory

Write a function named printTable() that takes a list of lists of strings and displays it in a well-organized table with each column right-justified. A

What does passing re.VERBOSE as the second argument to re.compile() allow you to do?
What does the . character normally match? What does it match if re.DOTALL is passed as the second argument to re.compile()?
What is the difference between .* and .*??
What do the \D, \W, and \S shorthand character classes signify in regular expressions?
What does the | character signify in regular expressions?
9. What two things does the ? character signify in regular expressions?
10. What is the difference between the + and * characters in regular expressions?
11. What is the difference between {3} and {3,5} in regular expressions?
Write a regular expression that can detect dates in the DD/MM/YYYY format
Write a function that uses regular expressions to make sure the password string it is passed is strong. A strong password is defined as one that is at least eight characters long, contains both uppercase and lowercase characters, and has at least one digit
Write a function that takes a string and does the same thing as the strip() string method. If no other arguments are passed other than the string to strip, then whitespace characters will be removed from the beginning and end of the string

What does inputStr(limit=3, default='hello') do if blank input is entered three times?
What is passed to the allowRegexes and blockRegexes keyword arguments?
Write a program that asks users for their sandwich preferences. The program should use PyInputPlus to ensure that they enter valid input, such as:
Using inputMenu() for a bread type: wheat, white, or sourdough.
Using inputMenu() for a protein type: chicken, turkey, ham, or tofu.
Using inputYesNo() to ask if they want cheese.
Come up with prices for each of these options, and have your program display a total cost after the user enters their selection
try re-creating the multiplication quiz project on your own without importing it. This program will prompt the user with 10 multiplication questions, ranging from 0 × 0 to 9 × 9.

What does 'C:/Users' / 'Al' evaluate to on Windows?
5. What do the os.getcwd() and os.chdir() functions do?
What data structure does a shelf value resemble?
Extend the multi-clipboard program in this chapter so that it has a delete <keyword> command line argument that will delete a keyword from the shelf. Then add a delete command line argument that will delete all keywords.
Create a Mad Libs program that reads in text files and lets the user add their own text anywhere the word ADJECTIVE, NOUN, ADVERB, or VERB appears in the text file
Write a program that opens all .txt files in a folder and searches for any line that matches a user-supplied regular expression. The results should be printed to the screen.

What is the difference between shutil.copy() and shutil.copytree()?
What is the difference between the delete functions in the send2trash and shutil modules?
ZipFile objects have a close() method just like File objects’ close() method. What ZipFile method is equivalent to File objects’ open() method?
Write a program that walks through a folder tree and searches for files with a certain file extension (such as .pdf or .jpg). Copy these files from whatever location they are in to a new folder.
Write a program that walks through a folder tree and searches for exceptionally large files or folders—say, ones that have a file size of more than 100MB. (Remember that to get a file’s size, you can use os.path.getsize() from the os module.) Print these files with their absolute path to the screen.
Write a program that finds all files with a given prefix, such as spam001.txt, spam002.txt, and so on, in a single folder and locates any gaps in the numbering (such as if there is a spam001.txt and spam003.txt but no spam002.txt). Have the program rename all the later files to close this gap. As an added challenge, write another program that can insert gaps into numbered files so that a new file can be added.

How do you set a breakpoint on a line of code in Mu?
What are the differences between the Step Over, Step In, and Step Out buttons in the debugger?
What line of code can you add to disable all logging messages in your program?
What are the five logging levels?
Write an assert statement that always triggers an AssertionError.
What are the two lines that your program must have in order to have logging.debug() send a logging message to a file named programLog.txt?
Write an assert statement that triggers an AssertionError if the variable spam is an integer less than 10.

Briefly describe the differences between the webbrowser, requests, bs4, and selenium modules
What requests method checks that the download worked?
What is the CSS selector string that would find the <button> element with a value attribute set to favorite?
How would you store all the attributes of a Beautiful Soup Tag object in a variable named linkElem?
What’s the difference between the find_element_* and find_elements_* methods?
16. What methods do Selenium’s WebElement objects have for simulating mouse clicks and keyboard keys?
How can you simulate clicking a browser’s Forward, Back, and Refresh buttons with selenium?
Write a program that takes an email address and string of text on the command line and then, using selenium, logs in to your email account and sends an email of the string to the provided address. (You might want to set up a separate email account for this program.) This would be a nice way to add a notification feature to your programs. You could also write a similar program to send messages from a Facebook or Twitter account.
Write a program that goes to a photo-sharing site like Flickr or Imgur, searches for a category of photos, and then downloads all the resulting images. You could write a program that works with any photo site that has a search feature.
2048 is a simple game where you combine tiles by sliding them up, down, left, or right with the arrow keys. You can actually get a fairly high score by repeatedly sliding in an up, right, down, and left pattern over and over again. Write a program that will open the game at https://gabrielecirulli.github.io/2048/ and keep sending up, right, down, and left keystrokes to automatically play the game
Write a program that, given the URL of a web page, will attempt to download every linked page on the page. The program should flag any pages that have a 404 “Not Found” status code and print them out as broken links.

Create a program multiplicationTable.py that takes a number N from the command line and creates an N×N multiplication table in an Excel spreadsheet
Create a program blankRowInserter.py that takes two integers and a filename string as command line arguments. Let’s call the first integer N and the second integer M. Starting at row N, the program should insert M blank rows into the spreadsheet. You can write this program by reading in the contents of the spreadsheet. Then, when writing out the new spreadsheet, use a for loop to copy the first N lines. For the remaining lines, add M to the row number in the output spreadsheet.
Write a program to invert the row and column of the cells in the spreadsheet. For example, the value at row 5, column 3 will be at row 3, column 5 (and vice versa). You can write this program by using nested for loops to read the spreadsheet’s data into a list of lists data structure. This data structure could have sheetData[x][y] for the cell at column x and row y. Then, when writing out the new spreadsheet, use sheetData[y][x] for the cell at column x and row y.
Write a program to read in the contents of several text files (you can make the text files yourself) and insert those contents into a spreadsheet, with one line of text per row
Write a program that performs the tasks of the previous program in reverse order: the program should open a spreadsheet and write the cells of column A into one text file, the cells of column B into another text file, and so on.

write a program that can automatically download the form information that users have submitted. On the “Responses” tab of your form, click the green Create Spreadsheet button to create a Google Sheets spreadsheet that will hold the responses that users submit. You should see your example responses in the first rows of this spreadsheet. Then write a Python script using EZSheets to collect a list of the email addresses on this spreadsheet
Write a script that passes a submitted file to upload(). Once the spreadsheet has uploaded to Google Sheets, download it using downloadAsExcel(), downloadAsODS(), and other such functions to create a copy of the spreadsheet in these other formats
9. What functions will create a new Spreadsheet object and a new Sheet object, respectively?
10. What will happen if, by making frequent read and write requests with EZSheets, you exceed your Google account’s quota?
What three files do you need for EZSheets to access Google Sheets?
2. What two types of objects does EZSheets have?
3. How can you create an Excel file from a Google Sheet spreadsheet?
4. How can you create a Google Sheet spreadsheet from an Excel file?
5. The ss variable contains a Spreadsheet object. What code will read data from the cell B2 in a sheet titled “Students”?
6. How can you find the column letters for column 999?
7. How can you find out how many rows and columns a sheet has?
8. How do you delete a spreadsheet? Is this deletion permanent?

Using the os.walk() function from Chapter 10, write a script that will go through every PDF in a folder (and its subfolders) and encrypt the PDFs using a password provided on the command line. Save each encrypted PDF with an _encrypted.pdf suffix added to the original filename. Before deleting the original file, have the program attempt to read and decrypt the file to ensure that it was encrypted correctly. Then, write a program that finds all encrypted PDFs in a folder (and its subfolders) and creates a decrypted copy of the PDF using a provided password. If the password is incorrect, the program should print a message to the user and continue to the next PDF.
Write a program that would generate a Word document with custom invitations
Say you have an encrypted PDF that you have forgotten the password to, but you remember it was a single English word. Trying to guess your forgotten password is quite a boring task. Instead you can write a program that will decrypt the PDF by trying every possible English word until it finds one that works. This is called a brute-force password attack.
A string value of the PDF filename is not passed to the PyPDF2.PdfFileReader() function. What do you pass to the function instead?
2. What modes do the File objects for PdfFileReader() and PdfFileWriter() need to be opened in?
3. How do you acquire a Page object for page 5 from a PdfFileReader object?
4. What PdfFileReader variable stores the number of pages in the PDF document?
5. If a PdfFileReader object’s PDF is encrypted with the password swordfish, what must you do before you can obtain Page objects from it?
6. What methods do you use to rotate a page?
7. What method returns a Document object for a file named demo.docx?
8. What is the difference between a Paragraph object and a Run object?
9. How do you obtain a list of Paragraph objects for a Document object that’s stored in a variable named doc?
10. What type of object has bold, underline, italic, strike, and outline variables?
11. What is the difference between setting the bold variable to True, False, or None?
12. How do you create a Document object for a new Word document?
13. How do you add a paragraph with the text 'Hello, there!' to a Document object stored in a variable named doc?
14. What integers represent the levels of headings available in Word documents?

What are some features Excel spreadsheets have that CSV spreadsheets don’t?
2. What do you pass to csv.reader() and csv.writer() to create reader and writer objects?
3. What modes do File objects for reader and writer objects need to be opened in?
4. What method takes a list argument and writes it to a CSV file?
5. What do the delimiter and lineterminator keyword arguments do?
6. What function takes a string of JSON data and returns a Python data structure?
7. What function takes a Python data structure and returns a string of JSON data?
Excel can save a spreadsheet to a CSV file with a few mouse clicks, but if you had to convert hundreds of Excel files to CSVs, it would take hours of clicking. Using the openpyxl module from Chapter 12, write a program that reads all the Excel files in the current working directory and outputs them as CSV files.

What is the Unix epoch?
2. What function returns the number of seconds since the Unix epoch?
3. How can you pause your program for exactly 5 seconds?
4. What does the round() function return?
5. What is the difference between a datetime object and a timedelta object?
6. Using the datetime module, what day of the week was January 7, 2019?
7. Say you have a function named spam(). How can you call this function and run the code inside it in a separate thread?
8. What should you do to avoid concurrency issues with multiple threads?
Expand the stopwatch project from this chapter so that it uses the rjust() and ljust() string methods to “prettify” the output. Next, use the pyperclip module introduced in Chapter 6 to copy the text output to the clipboard so the user can quickly paste the output to a text file or email.
Write a program that checks the websites of several web comics and automatically downloads the images if the comic was updated since the program’s last visit. Your operating system’s scheduler (Scheduled Tasks on Windows, launchd on macOS, and cron on Linux) can run your Python program once a day.

What is the protocol for sending email? For checking and receiving email?
2. What four smtplib functions/methods must you call to log in to an SMTP server?
3. What two imapclient functions/methods must you call to log in to an IMAP server?
4. What kind of argument do you pass to imapObj.search()?
5. What do you do if your code gets an error message that says got more than 10000 bytes?
6. The imapclient module handles connecting to an IMAP server and finding emails. What is one module that handles reading the emails that imapclient collects?
7. When using the Gmail API, what are the credentials.json and token.json files?
8. In the Gmail API, what’s the difference between “thread” and “message” objects?
9. Using ezgmail.search(), how can you find emails that have file attachments?
10. What three pieces of information do you need from Twilio before you can send text messages?
Write a program that takes a list of people’s email addresses and a list of chores that need to be done and randomly assigns chores to people. Email each person their assigned chores. If you’re feeling ambitious, keep a record of each person’s previously assigned chores so that you can make sure the program avoids assigning anyone the same chore they did last time. For another possible feature, schedule the program to run once a week automatically
Write a program that runs just before you wake up in the morning and checks whether it’s raining that day. If so, have the program text you a reminder to pack an umbrella before leaving the house.
Write a program that scans through your email account, finds all the unsubscribe links in all your emails, and automatically opens them in a browser
Write a program that checks an email account every 15 minutes for any instructions you email it and executes those instructions automatically

What is an RGBA value?
2. How can you get the RGBA value of 'CornflowerBlue' from the Pillow module?
3. What is a box tuple?
4. What function returns an Image object for, say, an image file named zophie.png?
5. How can you find out the width and height of an Image object’s image?
6. What method would you call to get Image object for a 100×100 image, excluding the lower-left quarter of it?
7. After making changes to an Image object, how could you save it as an image file?
8. What module contains Pillow’s shape-drawing code?
9. Image objects do not have drawing methods. What kind of object does? How do you get this kind of object?
The resizeAndAddLogo.py program in this chapter works with PNG and JPEG files, but Pillow supports many more formats than just these two. Extend resizeAndAddLogo.py to process GIF and BMP images as well.
Write a program that goes through every folder on your hard drive and finds potential photo folders. Of course, first you’ll have to define what you consider a “photo folder” to be; let’s say that it’s any folder where more than half of the files are photos. And how do you define what files are photos
Chapter 15 included a practice project to create custom invitations from a list of guests in a plaintext file. As an additional project, use the pillow module to create images for custom seating cards for your guests. For each of the guests listed in the guests.txt file from the resources at https://nostarch.com/automatestuf 2/, generate an image file with the guest name and some flowery decoration. A public domain flower image is also available in the book's resources.

How can you trigger PyAutoGUI’s fail-safe to stop a program?
2. What function returns the current resolution()?
3. What function returns the coordinates for the mouse cursor’s current position?
4. What is the difference between pyautogui.moveTo() and pyautogui.move()?
5. What functions can be used to drag the mouse?
6. What function call will type out the characters of "Hello, world!"?
7. How can you do keypresses for special keys such as the keyboard’s left arrow key?
8. How can you save the current contents of the screen to an image file named screenshot.png?
9. What code would set a two-second pause after every PyAutoGUI function call?
10. If you want to automate clicks and keystrokes inside a web browser, should you use PyAutoGUI or Selenium?
11. What makes PyAutoGUI error-prone?
12. How can you find the size of every window on the screen that includes the text Notepad in its title?
13. How can you make, say, the Firefox browser active and in front of every other window on the screen?
Many instant messaging programs determine whether you are idle, or away from your computer, by detecting a lack of mouse movement over some period of time—say, 10 minutes. Maybe you’re away from your computer but don’t want others to see your instant messenger status go into idle mode. Write a script to nudge your mouse cursor slightly every 10 seconds. The nudge should be small and infrequent enough so that it won’t get in the way if you do happen to need to use your computer while the script is running.
Write a program that follows this procedure for copying the text from a window’s text fields. Use pyautogui.getWindowsWithTitle('Notepad') (or whichever text editor you choose) to obtain a Window object. The top and left attributes of this Window object can tell you where this window is, while the activate() method will ensure it is at the front of the screen
Write a program that will automatically send out a notification message to a select group of people on your friend list. Your program may have to deal with exceptional cases, such as friends being offline, the chat window appearing at different coordinates on the screen, or confirmation boxes that interrupt your messaging. Your program will have to take screenshots to guide its GUI interaction and adopt ways of detecting when its virtual keystrokes aren’t being sent.



















1. What is the Python interpreter?
2. What is source code?
3. What is byte code?
4. What is the PVM?
5. Name two variations on Python’s standard execution model.
6. How are CPython, Jython, and IronPython different?

1. How can you start an interactive interpreter session?
2. Where do you type a system command line to launch a script file?
3. Name two pitfalls related to clicking file icons on Windows.
4. Why might you need to reload a module?
5. How do you run a script from within IDLE?
6. Name two pitfalls related to using IDLE.
7. What is a namespace, and how does it relate to module files?

1. Name four of Python’s core data types.
2. Why are they called “core” data types?
3. What does “immutable” mean, and which three of Python’s core types are considered immutable?
4. What does “sequence” mean, and which three types fall into that category?
5. What does “mapping” mean, and which core type is a mapping?
6. What is “polymorphism,” and why should you care?

1. What is the value of the expression 2 * (3 + 4) in Python?
2. What is the value of the expression 2 * 3 + 4 in Python?
3. What is the value of the expression 2 + 3 * 4 in Python?
4. What tools can you use to find a number’s square root, as well as its square?
5. What is the type of the result of the expression 1 + 2.0 + 3?
6. How could you truncate and round a floating-point number?
7. How can you convert an integer to a floating-point number?
8. How would you display an integer in octal or hexadecimal notation?
9. How might you convert an octal or hexadecimal string to a plain integer?


1. Name two ways to build a list containing five integer zeros.
2. Name two ways to build a dictionary with two keys 'a' and 'b' each having an associated value of 0.
3. Name four operations that change a list object in-place.
4. Name four operations that change a dictionary object in-place

1. How can you determine how large a tuple is?
2. Write an expression that changes the first item in a tuple. (4, 5, 6) should become (1, 5, 6) in the process.
3. What is the default for the processing-mode argument in a file open call?
4. What module might you use to store Python objects in a file without converting them to strings yourself?
5. How might you go about copying all parts of a nested structure at once?
6. When does Python consider an object true?
7. What is your quest?
Write a script that creates a new output file called myfile.txt, and writes the string "Hello file world!" into it. Then, write another script that opens myfile. txt and reads and prints its contents. Run your two scripts from the system command line. Does the new file show up in the directory where you ran your scripts? What if you add a different directory path to the filename passed to open?

1. What three things are required in a C-like language, but omitted in Python?
2. How is a statement normally terminated in Python?
3. How are the statements in a nested block of code normally associated in Python?
4. How can you make a statement span over multiple lines?
5. How can you code a compound statement on a single line?
6. Is there any valid reason to type a semicolon at the end of a statement in Python?
7. What is a try statement for?
8. What is the most common coding mistake among Python beginners?

1. Name three ways that you can assign three variables to the same value.
2. Why might you need to care when assigning three variables to a mutable object?
3. What’s wrong with saying L = L.sort( )?
4. How might you use the print statement to send text to an external file?

1. How might you code a multiway branch in Python?
2. How can you code an if/else statement as an expression in Python?
3. How can you make a single statement span many lines?
4. What do the words True and False mean?

1. When is a loop’s else clause executed?
2. How can you code a counter-based loop in Python?
3. How are for loops and iterators related?
4. How are for loops and list comprehensions related?
5. Name four iteration contexts in the Python language.
6. What is the best way to read line by line from a text file today?
7. What sort of weapons would you expect to see employed by the Spanish Inquisition?

1. When should you use documentation strings instead of hash-mark comments?
2. Name three ways you can view documentation strings.
3. How can you obtain a list of the available attributes in an object?
4. How can you get a list of all available modules on your computer?
5. Which Python book should you purchase after this one?
a. Write a for loop that prints the ASCII code of each character in a string named S. Use the built-in function ord(character) to convert each character to an ASCII integer. (Test it interactively to see how it works.)
b. Next, change your loop to compute the sum of the ASCII codes of all characters in a string.
c. Finally, modify your code again to return a new list that contains the ASCII codes of each character in the string. Does the expression map(ord, S) have a similar effect? (Hint: see Part IV.)
In Chapter 8, we saw that dictionaries are unordered collections. Write a for loop that prints a dictionary’s items in sorted (ascending) order.
a. First, rewrite this code with a while loop else clause to eliminate the found flag and final if statement.
b. Next, rewrite the example to use a for loop with an else clause, to eliminate the explicit list-indexing logic. Hint: to get the index of an item, use the list index method (L.index(X) returns the offset of the first X in list L).
c. Next, remove the loop completely by rewriting the example with a simple in operator membership expression. (See Chapter 8 for more details, or type this to test: 2 in [1,2,3].)
d. Finally, use a for loop and the list append method to generate the powers-of2 list (L) instead of hardcoding a list literal.
e. Do you think it would improve performance to move the 2 ** X expression outside the loops? How would you code that?
f. As we saw in exercise 1, Python includes a map(function, list) tool that can generate the powers-of-2 list, too: map(lambda x: 2 ** x, range(7)). Try typing this code interactively

1. What is the point of coding functions?
2. At what time does Python create a function?
3. What does a function return if it has no return statement in it?
4. When does the code nested inside the function definition statement run?
5. What’s wrong with checking the types of objects passed into a function?
7. Name three or four ways to retain state information in a Python function.
8. Name three ways that functions can communicate results to a caller.

1. What is the difference between enclosing a list comprehension in square brackets and parentheses?
2. How are generators and iterators related?
3. How can you tell if a function is a generator function?
4. What does a yield statement do?
5. Given a function object, and a tuple of arguments, how might you call the function?
6. How are map calls and list comprehensions related? Compare and contrast the two.
7. How are lambda expressions and def statements related? Compare and contrast the two.

Write code to build a new list containing the square roots of all the numbers in this list: [2, 4, 9, 16, 25]. Code this as a for loop first, then as a map call, and finally as a list comprehension
Write a function called addDict(dict1, dict2) that computes the union of two dictionaries.
Write a function called copyDict(dict) that copies its dictionary argument
Write a function called adder in a Python module file. The function should accept two arguments, and return the sum (or concatenation) of the two.
Then, add code at the bottom of the file to call the adder function with a variety of object types (two strings, two lists, two floating points), and run this file as a script from the system command line
Generalize the adder function you wrote in the last exercise to compute the sum of an arbitrary number of arguments, and change the calls to pass more or less than two arguments

1. How does a module source code file become a module object?
2. Why might you have to set your PYTHONPATH environment variable?
3. Name the four major components of the module import search path.
4. Name four file types that Python might load in response to an import operation.
5. What is a namespace, and what does a module’s namespace contain?

1. How do you make a module?
2. How is the from statement related to the import statement?
3. How is the reload function related to imports?
4. When must you use import instead of from?
5. Name three potential pitfalls of the from statement.
6. What is the airspeed velocity of an unladen swallow?

1. What is the purpose of an _ _init_ _.py file in a module package directory?
2. How can you avoid repeating the full package path every time you reference a package’s content?
3. Which directories require _ _init_ _.py files?
4. When must you use import instead of from with packages?

1. What is significant about variables at the top level of a module whose names begin with a single underscore?
2. What does it mean when a module’s _ _name_ _ variable is the string "_ _main_ _"?
3. What is the difference between from mypkg import spam and from . import spam?
4. If the user interactively types the name of a module to test, how can you import it?
5. How is changing sys.path different from setting PYTHONPATH to modify the module search path?
6. If the module _ _future_ _ allows us to import from the future, can we also import from the past?
Test your mymod module from exercise 1 interactively by using from to load the exports directly, first by name, then using the from * variant to fetch everything.
Add a line in your mymod module that calls the test function automatically only when the module is run as a script, not when it is imported. The line you add will probably test the value of _ _name_ _ for the string "_ _main_ _" as shown in this chapter.
Write a second module, myclient.py, that imports mymod, and tests its functions; then, run myclient from the system command line
Import your file from a package. Create a subdirectory called mypkg nested in a directory on your module import search path, move the mymod.py module file you created in exercise 1 or 3 into the new directory, and try to import it with a package import of the form import mypkg.mymod.
Experiment with module reloads: perform the tests in Chapter 19’s changer.py example, changing the called function’s message, and/or behavior repeatedly, without stopping the Python interpreter.
In the section on recursive import gotchas, importing recur1 raised an error. But, if you restart Python, and import recur2 interactively, the error doesn’t occur—test and see this for yourself. Why do you think it works to import recur2, but not recur1?

1. What is the main point of OOP in Python?
2. Where does an inheritance search look for an attribute?
3. What is the difference between a class object and an instance object?
4. Why is the first argument in a class method function special?
5. What is the _ _init_ _ method used for?
6. How do you create a class instance?
7. How do you create a class?
8. How do you specify a class’ superclasses?

1. How are classes related to modules?
2. How are instances and classes created?
3. Where and how are class attributes created?
4. Where and how are instance attributes created?
5. What does self mean in a Python class?
6. How is operator overloading coded in a Python class?
7. When might you want to support operator overloading in your classes?
8. Which operator overloading method is most commonly used?
9. What are the two most important concepts in Python OOP code?

1. What is an abstract superclass?
2. What two operator overloading methods can you use to support iteration in your classes?
3. What happens when a simple assignment statement appears at the top level of a class statement?
4. Why might a class need to manually call the _ _init_ _ method in a superclass?
5. How can you augment, instead of completely replacing, an inherited method?
6. In this chapter’s final example, what methods are run when the sue Employee instance is printed?
7. What...was the capital of Assyria?

1. What is multiple inheritance?
2. What is delegation?
3. What is composition?
4. What are bound methods?

1. Name two ways to extend a built-in object type.
2. What are function decorators used for?
3. How do you code a new-style class?
4. How are new-style and classic classes different?
5. How are normal and static methods different?
6. How long should you wait before lobbing a “Holy Hand Grenade”?

1. What is the try statement for?
2. What are the two common variations of the try statement?
3. What is the raise statement for?
4. What is the assert statement designed to do, and what other statement is it like?
5. What is the with/as statement designed to do, and what other statement is it like?

1. How are raised string-based exceptions matched to handlers?
2. How are raised class-based exceptions matched to handlers?
3. How can you attach context information to class-based exceptions, and use it in handlers?
4. How can you specify the error message text in class-based exceptions?
5. Why should you not use string-based exceptions anymore today

1. (This question is a repeat from your first quiz in Chapter 1—see, I told you this would be easy :-)). Why did spam appear in so many examples in this book?
Write a function called safe(func, *args) that runs any function using apply (or the newer *name call syntax), catches any exception raised while the function runs, and prints the exception using the exc_type and exc_value attributes in the sys module (or the newer sys.exc_info call result). Then, use your safe function to run your oops function from exercise 1 or 2. Put safe in a module file called tools.py, and pass it the oops function interactively. What sort of error messages do you get? Finally, expand safe to also print a Python stack trace when an error occurs by calling the built-in print_exc function in the standard traceback module (see the Python library reference manual for details).
Change the oops function you just wrote to raise an exception you define yourself, called MyError, and pass an extra data item along with the exception. Then, extend the try statement in the catcher function to catch this exception, and its data in addition to IndexError, and print the extra data item. Finally, if you used a string for your exception, go back and change it to a class instance; what now comes back as the extra data to the handler?
Write a function called oops that explicitly raises an IndexError exception when called. Then, write another function that calls oops inside a try/except statement to catch the error. What happens if you change oops to raise a KeyError instead of an IndexError? Where do the names KeyError and IndexError come from? 


















1. Is it possible to perform operations such as concatenation on a str type and a byte type in Python 3?
2. Is the type hinting support introduced in Python 3 enforcing or not?
3. Beyond functional and nonfunctional requirements, are there any other kinds of requirements that also might need to be documented into the software requirement specification?
4. What are the major categories in which the prioritization of requirements can be done?
5. What are the next steps to take once the software requirement specification document has been generated?

1. How can we implement the chain of responsibility pattern in Python, and what are some of the possible use cases where it can be used?
2. What are the differences between the __new__ method and the __init__ method?
3. How can we implement an abstract class using the ABCMeta class as the metaclass for the abstract class?

1. What is the benefit of normalizing database tables?
2. What is the difference between lazy loading through select versus lazy loading through joined?
3. How can we maintain the integrity of data while running database update queries?
4. What are the different levels of caching data from a database?

1. What are the different methods through which Python enables the building of concurrent applications?
2. What happens to an acquired lock if the thread that has acquired it terminates abruptly?
3. How can we terminate executing threads when the application receives a termination signal?
4. How can we share state between multiple processes?
5. Is there a way through which we can create a pool of processes that can then be used to work on the incoming set of tasks in a task queue? 

1. How can we use multiple instances of the same application to serve the incoming requests?
2. How do we implement process pools and distribute the client requests over them?
3. Can we implement an application which utilizes both process pooling and thread pooling? What are the issues we may face while implementing the same?
4. How do we implement a basic web server with AsyncIO

What are some of the other pre-built view classes provided by Flask?
Can we remove the foreign key constraint to role table from our user table without removing the relationship?
What are the other options apart from Gunicorn for serving the application?
How can we increase the number of Gunicorn workers?

1. How can the use of CDN provide a boost to frontend performance?
2. Can we do something to make the browser utilize existing connections to the server for loading resources?
3. How can we remove a particular key from web storage or clear the contents of web storage?

1. What are the differences between unit tests and functional tests?
2. How can we write unit test suites using Python unittest?
3. What is the role of fixtures in pytest?
4. What are scopes in pytest while writing fixtures?

1. What factors can cause a performance bottleneck when the application is deployed?
2. What are the different ways in which we can run a time profile on a method?
3. What may cause a memory leak in Python, which is a garbage-collected language?
4. How can we profile an API response and figure out what could be the cause of its slowing down?
5. Can choosing an incorrect design pattern result in a performance bottleneck?

1. What are the different issues that make application security hard?
2. What is an XSS attack?
3. How can we prevent a DoS attack?
4. What are some of the mistakes that compromise the security of the application?

1. How does a service-oriented architecture differ from a microservice architecture?
2. How can we ensure high uptime for microservice-based applications?
3. What kind of guarantees are provided by a SLA?
4. Can we make API gateways communicate directly with the service registry?
5. What are the tools that we can use to implement asynchronous communication between microservices?

1. What are the advantages provided by the serverless architecture?
2. How does BaaS help is the development of applications?
3. How does an API Gateway help in the execution of serverless applications?
4. What are some of the things that make it hard to port an application into a serverless format?

1. What are the benefits of having a blue/green deployment approach?
2. How does a canary deployment help in testing the applications before the application goes into production?
3. What are the issues that we may face if we run microservices-based applications using the approach of virtual machines?
4. How can we handle deployments in the hybrid cloud model?

1. What are the issues that are usually faced during point-to-point integration?
2. How does an ESB connect the different types of applications together?
3. What are the different types of EAI patterns that exist facilitating the approach of application integration?

1. What are the bottlenecks of point to point integration in microservices applications?
2. How has the Enterprise Service Bus changed with the advent of microservices?
3. How do the message brokers inside microservices architecture provide high availability?






























Hacking

1. Why are an application’s mechanisms for handling user access only as strong as the weakest of these components?
2. What is the difference between a session and a session token?
3. Why is it not always possible to use a whitelist-based approach to input validation?

1. What is the OPTIONS method used for?
2. What are the If-Modified-Since and If-None-Match headers used for? Why might you be interested in these when attacking an application?
3. What is the signifi cance of the secure fl ag when a server sets a cookie?
4. What is the difference between the common status codes 301 and 302?
5. How does a browser interoperate with a web proxy when SSL is being used?

What information can you deduce about the technologies employed on the server and how it is likely to behave?
The application you are targeting implements web forum functionality. How might you obtain a listing of forum members?
What information can you infer about server-side technologies? What can you conjecture about other content and functionality that may exist?
A web server’s responses include the following header: What does this indicate about the technologies in use on the server? You are mapping two different web applications, and you request the URL /admin.cpf from each application. The response headers returned by each request are shown here. From these headers alone, what can you deduce about the presence of the requested resource within each application?

1. How can data be transmitted via the client in a way that prevents tampering attacks?
2. An application developer wants to stop an attacker from performing bruteforce attacks against the login function. Because the attacker may target
multiple usernames, the developer decides to store the number of failed attempts in an encrypted cookie, blocking any request if the number of failed attempts exceeds fi ve. How can this defense be bypassed?
3. An application contains an administrative page that is subject to rigorous access controls. It contains links to diagnostic functions located on a
different web server. Access to these functions should also be restricted
to administrators only. Without implementing a second authentication
mechanism, which of the following client-side mechanisms (if any) could
be used to safely control access to the diagnostic functionality? Do you
need any more information to help choose a solution?
4. If a form fi eld includes the attribute disabled=true, it is not submitted with the rest of the form. How can you change this behavior?
5. Are there any means by which an application can ensure that a piece of input validation logic has been run on the client?

1. While testing a web application, you log in using your credentials of joe and pass. During the login process, you see a request for the following URL appear in your intercepting proxy: What three vulnerabilities can you diagnose without probing any further?
2. How can self-registration functions introduce username enumeration vulnerabilities? How can these vulnerabilities be prevented?
3. A login mechanism involves the following steps:
 (a) The application requests the user’s username and passcode.
 (b) The application requests two randomly chosen letters from the user’s memorable word.
Why is the required information requested in two separate steps? What defect would the mechanism contain if this were not the case?
4. A multistage login mechanism fi rst requests the user’s username and
then various other items across successive stages. If any supplied item is
invalid, the user is immediately returned to the fi rst stage.
What is wrong with this mechanism, and how can the vulnerability be
corrected?
5. An application incorporates an antiphishing mechanism into its login functionality. During registration, each user selects a specifi c image from a large bank of memorable images that the application presents to her. The login function involves the following steps:
(a) The user enters her username and date of birth. 
(b) If these details are correct, the application shows the user her chosen image; otherwise, a random image is displayed.
(c) The user verifi es whether the correct image is displayed. If it is, she enters her password.
The idea behind this antiphishing mechanism is that it enables the user
to confi rm that she is dealing with the authentic application, not a clone,
because only the real application knows the correct image to display to
the user.
What vulnerability does this antiphishing mechanism introduce into the
login function? Is the mechanism effective at preventing phishing?





















1. Explain two methods to get the instruction pointer on x64. At least one of the methods must use RIP addressing.
2. Perform a virtual-to-physical address translation on x64. Were there any major differences compared to x86? 

For the code in each exercise, do the following in order (whenever possible):
■ Determine whether it is in Thumb or ARM state.
■ Explain each instruction’s semantic. If the instruction is LDR/STR, explain the addressing mode as well.
■ Identify the types (width and signedness) for every possible object. For structures, recover fi eld size, type, and friendly name whenever possible. Not all structure fi elds will be recoverable because the function may only access a few fi elds. For each type recovered, explain to yourself (or someone else) how you inferred it.
■ Recover the function prototype.
■ Identify the function prologue and epilogue.
■ Explain what the function does and then write pseudo-code for it.
■ Decompile the function back to C and give it a meaningful name.

1. Explain why code running at DISPATCH_LEVEL cannot take a page fault
2. Suppose you read an article on the Internet about the Windows kernel and it claims that kernel-mode threads always have higher priority than
user-mode threads; hence, if you write everything in kernel mode, it will be faster. Assess the validity of this claim using your knowledge of IRQL, thread dispatching, and thread priority.
3. Write a driver for Windows 7/8 that prints out the base address of every newly loaded image. Repeat the same for processes and threads.
4. Explain the security implications of using METHOD_NEITHER and what driver developers do to mitigate them.
5. Given a kernel-mode virtual address, manually convert it to a physical address. Verify your answer using the !vtop extension in the kernel debugger.
6. Develop a driver that uses all the list operations and identify all the inlined list routines in assembly form. Is there a generic pattern for each routine? If so, explain them. If not, explain why.
7. You learned about linked lists, but the kernel also supports hash tables, search trees, and bitmaps. Investigate their usage and develop a driver using all of them.
8. Explain how the FIELD_OFFSET macro works.
9. The exported function ExGetCurrentProcessorCpuUsage is undocumented, but a documented NDIS API NdisGetCurrentProcessorCpuUsage uses it internally. Explain how ExGetCurrentProcessorCpuUsage works on x64 and x86 Windows.
10. Explain how KeGetCurrentIrql works on x86 and x64.
11. Explain how the following APIs work in Windows 7/8 on x86/x64/ARM
■ IoThreadToProcess
■ PsGetThreadProcessId
■ PsIsSystemThread
■ PsGetCurrentThreadId
■ PsGetCurrentThreadPreviousMode
■ PsGetCurrentThreadProcess
■ PsGetCurrentThreadStackBase
■ PsGetCurrentThreadWin32Thread
■ PsGetThreadId
■ PsGetThreadSessionId
■ PsIsSystemProcess
■ PsGetProcessImageFileName
12. The PCR, PRCB, EPROCESS, KPROCESS, ETHREAD, and KTHREAD structures store a lot of useful information. Unfortunately, all of them are opaque structures and can change from one version of Windows to the next. Hence, many rootkits hardcode offsets into these structures. Investigate these structures on Windows XP, 2003, Vista, and 7 and note the differences. 
13. The MmGetPhysicalAddress API takes a virtual address and returns the physical address for it. Sometimes the returned physical address contains junk data. Explain why this may happen and how to mitigate it.
14. Set up test-signing on your 32- and 64-bit machines and test-sign your driver. Validate that it works.
15. Explain how AuxKlibGetImageExportDirectory works. After that, explain how RtlImageNtHeader and RtlImageDirectoryEntryToData work.
16. Suppose you want to track the life and death of processes. What data structure would you use and what are some properties you can use to uniquely identify a process?
17. Where is the page directory table (CR3 in x86 and TTBR in ARM) stored in a process? 
1. Many modern operating systems support a feature called Data Execution Prevent (DEP). Sometimes it is called Never Execute (NX) or Execute Never (XN). This feature simply blocks code execution in memory pages that are not marked executable. Investigate how this feature is implemented in hardware (x86, x64, and ARM) and how the operating system supports it. After that, investigate how this feature would be implemented without any hardware support.
2. Although we covered the basic idea behind APCs, we did not explain how to use them. Investigate the (undocumented) APIs related to kernel-mode APCs and how they are used. Write a driver that uses them.
3. Devise and implement at least two methods to execute a user-mode process from a kernel-mode driver
4. Suppose that you are on an SMP system with four processors and you want to modify a shared global resource. The global resource is in nonpaged pool and it can be modifi ed at any time by any processor. Devise a synchronization mechanism to safely modify this resource.
5. Write a driver that blocks all future drivers with the name “bda.sys” from loading.
6. Investigate how the Windows input stack works and implement a keyboard logger
7. Implement a function that takes a virtual address and change its page protection to readable, writable, and executable. Repeat the same task for a virtual address that is in session space (e.g., win32k.sys).
8. We explained that DriverEntry is the fi rst function to be called in a driver. Explain which function actually calls this routine
9. The Microsoft kernel debugger provides a mechanism that breaks into the debugger when a driver is loaded. This is done through the "sxe ld:drivername" command. Build a simple driver and experiment with this command. E
Devise a way to freeze and unfreeze a user-mode thread from the kernel
Develop a driver that will print a “hello” every 10 minutes. Then devise a way to modify the timer expiration after it has been queued
Implement a driver that installs its own interrupt handler and validate that it is triggerable from user mod
Process privileges are defi ned using tokens. The highest privilege is LocalSystem (the SYSTEM process runs in this context). Develop a driver that changes a running process privilege such that it runs with LocalSystem privilege.
Develop a driver that uses AES, RSA, MD5, SHA1, and a random number generator.
Develop a driver that enumerates the address and name of all exported symbols in NTDLL, KERNEL32, and KERNELBASE
Develop a driver that hooks an exported function in NTDLL in the "explorer.exe" process.
Develop a driver that attaches to the SMSS.EXE process and patch a win32k system call while in that process context.
Suppose someone tells you that user-mode exceptions do not ever go into the kernel. Research how user-mode exception handling works in x86 and x64 Windows and assess the aforementioned claim.
Devise a way to get an execution trace (or debug code) even with these hooks in place. You have no restrictions. What are some of the corner cases that you must handle?
20. The instruction INT 3 can be represented in two forms. The one-byte version, 0xCC, is the most common. The less common two-byte form is 0xCD03. Explain what happens when you use the two-byte form in Windows.
Analyze and explain what the function 0x10001277 does. Where does the second argument come from and can it ever be invalid? What do the functions at offset 0x100012B0 and 0x100012BC do?
In DriverEntry, identify all the system worker threads. Analyze and explain the goal of function 0x405775 and all functions called by it. write a driver
to do the same trick (but applied to a different I/O request). Complete the exercise by decompiling all four routines
Explain what the function 0x100051D2 does and why. What’s so special about offset 0x38 in the device extension structure? Recover as many types as possible and decompile this routine. Finally, identify all the timers, DPCs, and work items used by the driver. 

 1. Based on the proposed methodology (or one you come up with), build your own tool to analyze the VM’s bytecode.
 2. Contact your favorite demo division and package a stunning keygen for this fi ne crackme.































Hardware Hacking

1. Why would you want two DMMs?
2. What is a 3 dB bandwidth?
3. Above which frequency will a breadboard parasitic capacitance interfere with the signals?
4. Who produces the bus pirate?
5. What is an oscilloscope?
6. What is the gist of the Nyquist-Shannon signal sampling theorem?
7. What is the main difference between active and passive oscilloscope probes?

1. What is OBEX?
2. What is the most prevalent CPU architecture in consumer goods?
3. What is the ISM band? Is there a worldwide frequency band available for it?
4. Is LoRa natively cyphered?
5. Can the HTTP/S protocol be leveraged for client authentication?
6. What is the main difference between Harvard and von Neumann CPU architectures?
7. Is the RAM of an MCU usually inside or outside of the MCU chip?

1. When you are arranging the contractual framework for pentesting with your client, how many test systems should you request?
2. Can you formally guarantee your client that all the test systems that they provided will be returned to them in a full functioning and undamaged state?
Look at the signal from the oscilloscope for these pins and at the signal for actual digital buses for the blue FR module. Do you have any idea why an oscillating signal such as a digital bus can be read as a floating-point value by your multimeter?
4. Using a chip vendor website, have a look at the 74HC14 and compare the price of the through-hole package and the surface mount package for the same chip maker. The die inside is exactly the same. What does this tell you?
5. The 74HC14 is a member of a logic family called the 74 family. Can you find a another very common logic family? If so, what are the main differences between them?
6. What is FCC? What type of system should you try to look for in the FCC database?
7. The patent hinted at a 6502-based architecture, but it is not clear if this is still the case in the real system. Is 6502 a Harvard or Von Neumann architecture?

1. What does STRIDE stand for?
2. What is the goal of the methodology, from a risk and practical standpoint?
3. What are the 5W criteria for traces?
4. Can you actually test for a scenario where the state actor operates above your level (that is, you have an amateur lab and the putative actor is a criminal group)?
5. Why is a system being able to update itself very important?
6. What is a black box test? What are its advantages for the client?
7. What is a crown jewel?

1. What is the GPIOC_ODR register that I XOR in the blinking example? Can you achieve the same effect by using other registers?
2. Is it possible to have the MCU run at 72 MHz for the HSI? Why or how? What is to be expected then?
3. What are the premade frequency assignment functions available in libopencm3?
4. XOR each character of the string Z9kvzrj8 with 0x19 in a C program. What does this mean?
5. What is the address of the GPIOC_ODR register? How can we find that easily?

1. You are visualizing something and you are pretty sure there is some UART traffic on your scope. You see the following waveform. What is the baud rate?
2. What is QSPI?
3. What is the usage of the parity byte in UART?
4. Who invented the I2C protocol?
5. How can you use multiple 24LC EEPROMs on the same I2C bus?
6. You have to man in the middle an I2C bus with two different devices and a master. Sadly, the hardware peripheral on the blue pill can only have a single address and you can't think of a way to have it alternate between the addresses (the master apparently talks randomly to the devices). What would be your approach?
7. 0x41 0x20 0x76 0x65 0x72 0x79 0x20 0x76 0x65 0x72 0x79
0x20 0x73 0x65 0x72 0x69 0x6f 0x75 0x73 0x20 0x6b 0x65
0x79 0x21
^
0x08 0x00 0x1a 0x0a 0x04 0x1c 0x00 0x14 0x0c 0x1c 0x18
0x52 0x0a 0x45 0x1d 0x19 0x0a 0x07 0x12 0x54 0x04 0x17
0x0a 0x00?

1. What tool can you use to take an image of a peripheral that is recognized by your Linux machine?
2. What is the use of the -o loop command-line switch for mount?
3. Why are the lists in cat /proc/filesystems and /lib/modules/xxx/ kernel/fs/ different?
4. You found a module marked eUSB on a device you are testing. What is it? How would you read it?
5. What is the eMMC standard? How would you read it?
6. What is FUSE? What is user space? How can you use it?

1. What is the DHCP configuration directive for giving a proxy to the test system?
2. Do you think that other DHCP parameters could be leveraged for security testing? Can you think of some examples?
3. In the DNS part of the netmasq config, I added a list of DNS "spoofed" hosts. What do you think they can be used for?
4. In the DNS part of the netmasq config, I added logging for the queries. What do you think this can be used for?
5. What does GATT stand for?
6. What is the main security problem with the common implementation of BLE?

1. What is the difference between encryption and encoding?
2. What is an FFT? What does it do?
3. What is a modulation scheme?
4. What are the characteristics of an SDR platform that you should take into account before buying?
5. If the half- and quarter-wavelength antennas work, why not use a wavelength antenna?

1. What is JTAG?
2. What are the JTAG signals/pins and what do they do?
3. Was JTAG initially made to debug chips?
4. When using a JTAGulator, how come the IDCODE scan doesn't find TDI? How come BYPASS does?
5. What is/are the OpenOCD command(s) to write a value at a specific address? Why can it be interesting?
6. join [lmap b [lmap a [split "Bjo(u!UDM!gvo!@" {}] {expr [scan $a %c]-1}] {format %c $b}] ""

1. We looked into ELF and PE as executable formats. Can you give me two more formats? What are they used for?
2. In an ELF file, what are these sections: .text, .debug, .plt, .dynamic, and.got?
3. What peripheral is at 0x40013000 on the bluepill?
NACAH IET Z ? A. With all of the shifting and XORing, this is most probably a cyphering function. What algorithm is that?
5. Other clues regarding the Decipher_flag should be in there but aren't. What clues and why?
6. In the first reverse engineering exercise (re1.bin), instead of reversing the
password validation string, we could just have patched the binary to accept an
incorrect password and flashed the patched version on the bluepill. How? What is the
offset of the instruction to patch? Patch it with what tool? With what instruction?

1. Give me the name of one band I like a lot. There is a pretty good source in something that is written in this chapter – investigate!
2. ARM is a RISC architecture. How do you think there can be a RISC architecture with such rich instructions and tests?
3. When typing i r (info register) in GDB, it shows other registers – msp, psp, primask, basepri, and faultmask – and controls what they are.
4. Why did I choose to mask the highest bit in the UUID dependent value?
5. Let's say that you want to extract some code for a chip you don't have access to or for which the JTAG was blocked. How could you approach that?

1. Could you give me an example of a matrix for a company with an aggressive stance towards risk?
2. Could you give me an example of vulnerability scoring for a company with a conservative attitude towards risk (based on the balanced risk appetite matrix)?
3. How would you reflect the threat landscape of a company that has already been the target of organized crime in the matrix?
4. Why, in your opinion, should the impact scales be agreed upon and set in stone before the actual testing?
5. Why, in your opinion, should the internal risk management of the client be involved in the delivery meeting?





























Binary analysis

Write a C program that contains several functions and compile it into an assembly file, an object file, and an executable binary, respectively.
Try to locate the functions you wrote in the assembly file and in the disassembled object file and executable. Can you see the correspondence between the C code and the assembly code? Finally, strip the executable and try to identify the functions again.
As you’ve seen, ELF binaries (and other types of binaries) are divided into sections. Some sections contain code, and others contain data. Why do you think the distinction between code and data sections exists? How do you think the loading process differs for code and data sections? Is it necessary to copy all sections into memory when a binary is loaded for execution?

Use a hex viewer such as xxd to view the bytes in an ELF binary in hexadecimal format. Can you identify the bytes representing the ELF header? Try to find all of the ELF header fields in the xxd output and see whether the contents of those fields make sense to you.
Use readelf to view the sections and segments in an ELF binary. How are the sections mapped into segments? Make an illustration of the binary’s on-disk representation versus its representation in memory. What are the major differences?
Use readelf to disassemble two binaries, namely a binary produced from C source and one produced from C++ source. What differences are there?
Use objdump to disassemble the PLT section of an ELF binary. Which GOT entries do the PLT stubs use? Now view the contents of those GOT entries (again with objdump) and analyze their relationship with the PLT.

Just as you did for ELF binaries in Chapter 2, use a hex viewer like xxd to view the bytes in a PE binary. You can use the same command as before, xxd program.exe | head -n 30, where program.exe is your PE binary. Can you identify the bytes representing the PE header and make sense of all of the header fields?
Use readelf to view the contents of a PE binary. Then make an illustration of the binary’s on-disk representation versus its representation in memory. What are the major differences?
Use objdump to disassemble an ELF and a PE binary. Do the binaries use different kinds of code and data constructs? Can you identify some code or data patterns that are typical for the ELF compiler and the PE compiler you’re using, respectively?

For brevity, the current version of the loader_demo program doesn’t display section contents. Expand it with the ability to take a binary and the name of a section as input. Then dump the contents of that section to the screen in hexadecimal format
Expand the binary loader so that if a weak symbol is later overridden by another symbol, only the latest version is kept. 
Expand the binary loader and the loader_demo program so that they can handle local and global data symbols as well as function symbols. You’ll need to add handling for data symbols in the loader, add a new SymbolType in the Symbol class, and add code to the loader_demo program to print the data symbols to screen

Complete the new CTF challenge unlocked by the oracle program!

Write a program that confuses objdump such that it interprets data as code, or vice versa
Write another program, this time so that it tricks your favorite recursive disassembler’s function detection algorithm.
Write a plugin for your recursive disassembler of choice so that it can better detect functions such as those the disassembler missed in the previous exercise. 

Create a copy of the /bin/ date program and use hexedit to change the default date format string.
Use the LD_PRELOAD technique to modify a copy of /bin/ls such that it will show directory listings only for paths within your home directory.
Write your own ELF parasite and use elfinject to inject it into a program of your choice. Bonus points if you can create a modified copy of ps that doesn’t show the parasite process in the process listing

Let’s generalize these tools to automatically select the proper Capstone parameters to deal with other architectures by checking the type of the loaded binary using the arch and bits fields in the Binary class that the loader provides
Although the example recursive disassembler can deal with overlapping basic blocks, it doesn’t give any explicit warning when there is overlapping code. Extend the disassembler to inform the user which blocks overlap.
When compiling a program from source, the resulting binary can differ significantly depending on factors such as the compiler version, compilation options, or target architecture. In this exercise, your goal is to expand the ROP gadget finder to take two or more binaries as input, representing different variants of the same program. To test your gadget finder, you can create variants of a program of your choice by compiling it multiple times with different compilation options or different compilers.

Modify the profiler to check where a syscall originated and profile only those that originate in the main application. To find out how to do this, you’ll have to consult the Pin user manual online.
When you were testing the unpacker, it dumped several files, one of which was the unpacked /bin/ls. Investigate what the other files contain and why the unpacker dumped them.
Add a command line option to the automatic unpacker that, when enabled, causes it to instrument all control transfers, rather than just indirect ones, to look for the jump to OEP. Compare the runtimes of the unpacker with and without this option enabled. How would a packer that jumps to OEP with a direct control transfer work?
Build a Pintool that can monitor an application and automatically detect and dump data when the application decrypts it with RC4 (or another cryptographic algorithm of your choice).

Format string vulnerabilities are a well-known class of exploitable software bugs in C-like programming languages. Design a DTA tool that can detect format string exploits launched from the network or the command line. What should the taint sources and sinks be, and what sort of taint propagation and granularity do you need? 

Use libdft to implement the format string exploit detection tool you designed in the previous chapter. Create an exploitable program and a format string exploit to test your detector. Also, create a program with an implicit flow that allows a format string exploit to succeed despite your detection tool.
If you’re looking for a practical example of instruction-level hooking, check out the libdft-dta.c tool that ships with libdft!

Create a tree diagram that shows how the symbolic state evolves for every path through this code
1. Create a private copy of the last two statements for each path in your diagram.
2. Merge all paths back together at these last statements and model the symbolic value of z with a conditional if-then-else expression that depends on the taken path.
Use Z3 to figure out which of the calls to foo, bar, and baz are reachable in the listing from the previous exercise. Model the relevant operations and branches using bitvectors.
Use Z3 to check whether any of the conditionals in the previous listing are opaque predicates. If so, are they opaquely true or false? Which code is unreachable and therefore safe to eliminate from the listing?

In the code directory for this chapter, you’ll find a program called license.c that takes as input a serial number and checks whether it’s valid (similar to license key checks in commercial software). Make a symbolic execution tool with Triton that can generate valid license keys accepted by license.c.















Pentesting

1. Implement the C2 infrastructure as described in this chapter using C and libssh. Alternatively, use whatever programming language and libraries you are familiar with.
2. Implement a C2 dropper in VBS that downloads a custom payload as shellcode rather than as an .exe and injects it directly into memory. Use the API calls from the initial VBA script.
3. Assuming your payload had to be deployed as shellcode within a VBA script, how would you obfuscate it, feed it into memory one byte at a time, and execute it? Use VirusTotal and other resources to see how AV engines react to these techniques. 

1. Continue implementing the C2 and experiment with the features discussed.
2. Investigate what other technologies run within a web page context and how they might be similarly utilized to gain initial access into an organization.
3. A mass email was used in this chapter, but some spam filters would have blocked it—in fact, that is often the biggest problem when using email as a vector of attack. What other technologies could be used to deliver the URL to these targets in a convincing manner?

1. Familiarize yourself with the AlienVault USM product. Understanding what the other guy sees will change your own workflow for the better.
2. Explore dnscat2 and its equivalents. Examine the traffic using Wireshark. How could you make the traffic stealthier?
3. What measures could you take to mitigate the DNS tunneling attack? One option is to separate internal and external DNS, but this is unlikely to be practical in a large company. What else could be done?

1. Download an existing client-side exploit. Modify it so that it bypasses your favorite antivirus solution. Make sure it still works.
2. Download the Metasploitable v2 virtual appliance. Practice Metasploit against it and become familiar with its strengths and weaknesses

1. There are several alternative email clients that can serve as a replacement to Microsoft Outlook. Some have Exchange integration and some not. Investigate how email boxes could be stolen from workstations with the following mail clients installed
2. You have to attack a host only accessible via the Tor network in a traditional network penetration test. You will immediately run into DNS issues resolving the .onion addresses. How would you resolve these issues so that you could bring your favorite tools to bear against the target?
3. Imagine you are running a Tor Hidden Service to provision a black market online business. Think about some ways that the anonymity of your web server could be compromised and how you could protect yourself against them. Read about Ross Ulbricht and the Silk Road for context.

1. You’ve seen how to use a Raspberry Pi to sniff traffic and be part of a keylogging solution. Take this one step further and consider how it may be possible to use a Pi as both a hardware keylogger and a C2 agent and how this might be achieved discreetly.
2. Create an HTML application with a specific target organization in mind. Consider branding and logos.
3. Given how DLLs were attacked in this chapter in order to escalate privileges, could you use a similar technique to attack services?

1. The code in the Microsoft Outlook email data exfiltration example is not as stealthy as it could be. What function could be added to make it stealthier? Hint, compile the code and see how it behaves.
2. In this chapter, we touched on SPF, as it is the most commonly used technology for protection against mail spoofing. Another technology is called DMARC, which is built on top of SPF (as well as DKIM). Investigate this technology and its implications for mail spoofing.
3. The examples given for data exfiltration is this chapter are by no means complete. Consider other possibilities and how they might be implemented. What other devices exist on a network that could be quickly discovered and subverted to get data out?

1. Explore the various means of deploying rich content in a web browser and how these tools and technologies can be subverted to deliver attacks (both
technological and social engineering based). There are many to choose from. To start with, download the free demo of Mulitmedia Fusion. Note how quickly complex content can be created using this software as well as the diverse environments it can deploy to.
2. Explore network protocols that are essential to the internal functioning of a network such as ARP, ICMP, RIP, and OSPF. How could these be used to carry data covertly? Start with ARP, which allows broadcast communication.
3. Study the concept of leader election and how it can be leveraged in creating autonomous C2 environments.
Assuming you’re a native English speaker, learn to speak in an accent unfamiliar to you. If you speak one of the many forms of British English, Californian English is the easiest to master, so pick something like Brooklyn or Cajun—these will be more challenging

1. Download the Red Star Linux Desktop and play with it. What other conclusions or observations can you draw about the restrictions and monitoring it places on users? 
2. Implement an attack that grabs audio and/or video from a client mobile handset, tablet, or desktop. Consider technologies that we’ve touched on before, such as Adobe AIR or Java JWS. Consider how data should be streamed back to your C2 server. If audio is being intercepted in the long term, what automated techniques could be applied to the data to make intelligent analysis more automated?
3. A complete list of which mobile browsers support which HTML5 functions can be found at http://mobilehtml5.org/. From this list, consider other means of potential attack against mobile devices, whether it be remote compromise, intelligence gathering, or Denial of Service attacks.



































System Design

■ What are IOPS?
■ What is utilization?
■ What is saturation?
■ What is latency?
■ What is micro-benchmarking?
2. Choose five methodologies to use for your (or a hypothetical) environment. Select the order in which they can be conducted, and explain the reason for choosing each.
3. Summarize problems when using average latency as a sole performance metric. Can these problems be solved by including the 99th percentile?

■ What is the difference between a process, a thread, and a task?
■ What is a mode switch and a context switch?
■ What is the difference between paging and process swapping?
■ What is the difference between I/O-bound and CPU-bound workloads?
■ Describe the role of the kernel.
■ Describe the role of system calls.
■ Describe the role of VFS and its location in the I/O stack.
■ List the reasons why a thread would leave the current CPU.
■ Describe the advantages of virtual memory and demand paging

1. List some static performance tools.
2. What is profiling?
3. Why would profilers use 99 Hertz instead of 100 Hertz?
4. What is tracing?
5. What is static instrumentation?
6. Describe why dynamic instrumentation is important.
7. What is the difference between tracepoints and kprobes?
8. Describe the expected CPU overhead (low/medium/high) from the following:
■ Disk IOPS counters (as seen by iostat(1))
■ Tracing per-event disk I/O via tracepoints or kprobes
■ Tracing per-event context switches (tracepoints/kprobes)
■ Tracing per-event process execution (execve(2)) (tracepoints/kprobes)
■ Tracing per-event libc malloc() via uprobes
9. Describe why PMCs are valuable for performance analysis.
10. Given an observability tool, describe how you could determine what instrumentation sources it uses.

■ What is a cache?
■ What is a ring buffer?
■ What is a spin lock?
■ What is an adaptive mutex lock?
■ What is the difference between concurrency and parallelism?
■ What is CPU affinity?
■ What are the general pros and cons of using a large I/O size?
■ What is a hash table of locks used for?
■ Describe general performance characteristics of the runtime of compiled languages, interpreted languages, and those using virtual machines.
■ Explain the role of garbage collection and how it can affect performance.
■ What is the role of the application?
■ What discrete operation does the application perform?
■ Does the application run in user mode or kernel mode?
■ How is the application configured? What key options are available regarding performance?
■ What performance metrics are provided by the application?
■ What logs does the application create? Do they contain performance information?
■ Has the most recent version of the application fixed performance issues?
■ Are there known performance bugs for the application?
■ Does the application have a community (e.g., IRC, meetups)? A performance community?
■ Are there books about the application? Performance books?
■ Are there well-known performance experts for the application? Who are they?
■ Before taking any measurements, do you expect the application to be CPU-bound or I/O-bound? Explain your reasoning.
■ Determine using observability tools if it is CPU-bound or I/O-bound.
■ Generate a CPU flame graph for the application. You may need to fix symbols and stack traces for this to work. What is the hottest CPU code path?
■ Generate an off-CPU flame graph for the application. What is the longest blocking event during the application’s request (ignore idle stacks)?
■ Characterize the size of I/O it performs (e.g., file system reads/writes, network sends/ receives).
■ Does the application have caches? Identify their size and hit rate.
■ Measure the latency (response time) for the operation that the application serves. Show the average, minimum, maximum, and full distribution.
■ Perform drill-down analysis of the operation, investigating the origin of the bulk of the latency.
■ Characterize the workload applied to the application (especially who and what).
■ Step through the static performance tuning checklist.
■ Does the application run concurrently? Investigate its use of synchronization primitives.
5. (optional, advanced) Develop a tool for Linux called tsastat(8) that prints columns for multiple thread state analysis states, with time spent in each. 

■ What is the difference between a process and a processor?
■ What is a hardware thread?
■ What is the run queue?
■ What is the difference between user time and kernel time?
■ Describe CPU utilization and saturation.
■ Describe how the instruction pipeline improves CPU throughput.
■ Describe how processor instruction width improves CPU throughput.
■ Describe the advantages of multiprocess and multithreaded models.
■ Describe what happens when the system CPUs are overloaded with runnable work, including the effect on application performance.
■ When there is no runnable work to perform, what do the CPUs do?
■ When handed a suspected CPU performance issue, name two methodologies you would use early during the investigation, and explain why.
Develop the following procedures for your environment:
■ A USE method checklist for CPU resources. Include how to fetch each metric (e.g., which command to execute) and how to interpret the result. Try to use existing OS observability tools before installing or using additional software products.
■ A workload characterization checklist for CPU resources. Include how to fetch each metric, and try to use existing OS observability tools first.
■ Calculate the load average for the following system, whose load is at steady state with no significant disk/lock load:
 q The system has 64 CPUs.
 q The system-wide CPU utilization is 50%.
 q The system-wide CPU saturation, measured as the total number of runnable and queued threads on average, is 2.0.
■ Choose an application, and profile its user-level CPU usage. Show which code paths are consuming the most CPU.
Develop bustop(1)—a tool that shows physical bus or interconnect utilization—with a presentation similar to iostat(1): a list of buses, columns for throughput in each direction, and utilization. Include saturation and error metrics if possible

■ What is a page of memory?
■ What is resident memory?
■ What is virtual memory?
■ Using Linux terminology, what is the difference between paging and swapping?
■ What is the purpose of demand paging?
■ Describe memory utilization and saturation.
■ What is the purpose of the MMU and the TLB?
■ What is the role of the page-out daemon?
■ What is the role of the OOM killer?
■ What is anonymous paging, and why is it more important to analyze than file system paging?
■ Describe the steps the kernel takes to free up more memory when free memory becomes exhausted on Linux-based systems.
■ Describe the performance advantages of slab-based allocation.
Develop the following procedures for your operating system:
■ A USE method checklist for memory resources. Include how to fetch each metric (e.g., which command to execute) and how to interpret the result. Try to use existing OS observability tools before installing or using additional software products.
■ Create a workload characterization checklist for memory resources. Include how to fetch each metric, and try to use existing OS observability tools first.
■ Choose an application, and summarize code paths that lead to memory allocation (malloc(3)).
■ Choose an application that has some degree of memory growth (calling brk(2) or sbrk(2)), and summarize code paths that lead to this growth.
■ Describe the memory activity visible in the following Linux output alone
Find or develop metrics to show how well the kernel NUMA memory locality policies are working in practice. Develop “known” workloads that have good or poor memory locality for testing the metrics.

■ What is the difference between logical I/O and physical I/O?
■ What is the difference between random and sequential I/O?
■ What is direct I/O?
■ What is non-blocking I/O?
■ What is the working set size?
■ What is the role of VFS?
■ Describe file system latency, specifically where it can be measured from.
■ What is the purpose of prefetch (read-ahead)?
■ What is the purpose of direct I/O?
■ Describe the advantages of using fsync(2) over O_SYNC.
■ Describe the pros and cons of mmap(2) over read(2)/write(2).
■ Describe reasons why logical I/O becomes inflated by the time it becomes physical I/O.
■ Describe reasons why logical I/O becomes deflated by the time it becomes physical I/O.
■ Explain how file system copy-on-write can improve performance. 
Develop the following procedures for your operating system:
■ A file system cache tuning checklist. This should list the file system caches that exist, how to check their current size and usage, and hit rate.
■ A workload characterization checklist for file system operations. Include how to fetch each detail, and try to use existing OS observability tools first.
■ Choose an application, and measure file system operations and latency. Include:
 q the full distribution of file system operation latency, not just the average.
 q the portion of each second that each application thread spends in file system operations.
■ Using a micro-benchmark tool, determine the size of the file system cache experimentally. Explain your choices when using the tool. Also show the performance degradation (using any metric) when the working set no longer caches.
Develop an observability tool that provides metrics for synchronous versus asynchronous file system writes. T
Develop a tool to provide statistics for indirect and inflated file system I/O: additional bytes and I/O not issued directly by applications. The tool should break down this additional I/O into different types to explain their reason.

■ What are IOPS?
■ What is the difference between service time and wait time?
■ What is disk I/O wait time?
■ What is a latency outlier?
■ What is a non-data-transfer disk command?
■ Describe disk utilization and saturation.
■ Describe the performance differences between random and sequential disk I/O.
■ Describe the role of an on-disk cache for read and write I/O.
■ Explain why utilization (percent busy) of virtual disks can be misleading.
■ Explain why the “I/O wait” metric can be misleading.
■ Describe performance characteristics of RAID-0 (striping) and RAID-1 (mirroring). 
■ Describe what happens when disks are overloaded with work, including the effect on application performance.
■ Describe what happens when the storage controller is overloaded with work (either throughput or IOPS), including the effect on application performance.
Develop the following procedures for your operating system:
■ A USE method checklist for disk resources (disks and controllers). Include how to fetch each metric (e.g., which command to execute) and how to interpret the result. Try to use existing OS observability tools before installing or using additional software products.
■ A workload characterization checklist for disk resources. Include how to fetch each metric, and try to use existing OS observability tools first.
Describe disk behavior visible in this Linux iostat(1) output alone
Develop a tool to trace all disk commands except for reads and writes. This may require tracing at the SCSI level.

■ What is the difference between bandwidth and throughput?
■ What is TCP connection latency?
■ What is first-byte latency?
■ What is round-trip time?
Describe network interface utilization and saturation.
■ What is the TCP listen backlog, and how is it used?
■ Describe the pros and cons of interrupt coalescing
■ For a TCP connection, explain how a network frame (or packet) error could hurt performance.
■ Describe what happens when a network interface is overloaded with work, including the effect on application performance.
Develop the following procedures for your operating system:
■ A USE method checklist for network resources (network interfaces and controllers). Include how to fetch each metric (e.g., which command to execute) and how to interpret the result. Try to use existing OS observability tools before installing or using additional software\ products.
A workload characterization checklist for network resources. Include how to Perform these tasks (may require use of dynamic tracing):
■ Measure first-byte latency for outbound (active) TCP connections.
■ Measure TCP connect latency. The script should handle non-blocking connect(2) calls
Measure TCP/IP inter-stack latency for RX and TX. For RX, this measures time from interrupt to socket read; for TX, the time from socket write to device transmit. Test under load. Can additional information be included to explain the cause of any latency outliers?

■ What is the difference between the host and the guest?
■ What is a tenant?
■ What is a hypervisor?
■ What is hardware virtualization?
■ What is OS virtualization?
■ Describe the role of performance isolation.
■ Describe the performance overheads with modern hardware virtualization (e.g., Nitro).
■ Describe the performance overheads with OS virtualization (e.g., Linux containers).
■ Describe physical system observability from a hardware-virtualized guest (either Xen or KVM).
■ Describe physical system observability from an OS-virtualized guest.
■ Explain the difference between hardware virtualization (e.g., Xen or KVM) and lightweight hardware virtualization (e.g., Firecracker).
■ Describe how a memory limit is applied, and how it is visible from the guest. (What does the system administrator see when guest memory is exhausted?)
■ If there is an imposed CPU limit, describe how it is applied and how it is visible from the guest. 
■ If there is an imposed disk I/O limit, describe how it is applied and how it is visible from the guest.
■ If there is an imposed network I/O limit, describe how it is applied and how it is visible from the guest.
4. Develop a USE method checklist for resource controls. Include how to fetch each metric (e.g., which command to execute) and how to interpret the result. Try to use existing OS observability tools before installing or using additional software products.

■ What is a micro-benchmark?
■ What is working set size, and how might it affect the results of storage benchmarks?
■ What is the reason for studying the price/performance ratio?
Choose a micro-benchmark and perform the following tasks:
■ Scale a dimension (threads, I/O size...) and measure performance.
■ Graph the results (scalability).
■ Use the micro-benchmark to drive the target to peak performance, and analyze the limiting factor.
q Does the benchmark relate to my production workload?
 q What was the configuration of the system under test?
 q Was a single system tested, or is this the result of a cluster of systems?
 q What is the cost of the system under test?
 q What was the configuration of the benchmark clients?
 q What was the duration of the test? How many results were collected?
 q Is the result an average or a peak? What is the average?
 q What are other distribution details (standard deviation, percentiles, or full distribution
details)?
 q What was the limiting factor of the benchmark?
 q What was the operation success/fail ratio?
 q What were the operation attributes?
 q Were the operation attributes chosen to simulate a workload? How were they selected?
 q Does the benchmark simulate variance, or an average workload?
 q Was the benchmark result confirmed using other analysis tools? (Provide screenshots.)
 q Can an error margin be expressed with the benchmark result?
 q Is the benchmark result reproducible?
■ For CPU/memory-related benchmarks:
 q What processors were used?
 q Were processors overclocked? Was custom cooling used (e.g., water cooling)?
668 Chapter 12}}Benchmarking
 q How many memory modules (e.g., DIMMs) were used? How are they attached to sockets?
 q Were any CPUs disabled?
 q What was the system-wide CPU utilization? (Lightly loaded systems can perform faster
due to higher levels of turbo boosting.)
 q Were the tested CPUs cores or hyperthreads?
 q How much main memory was installed? Of what type?
 q Were any custom BIOS settings used?
■ For storage-related benchmarks:
 q What is the storage device configuration (how many were used, their type, storage protocol, RAID configuration, cache size, write-back or write-through, etc.)?
 q What is the file system configuration (what types, how many were used, their configuration such as the use of journaling, and their tuning)?
 q What is the working set size?
 q To what degree did the working set cache? Where did it cache?
 q How many files were accessed?
■ For network-related benchmarks:
 q What was the network configuration (how many interfaces were used, their type and configuration)?
 q What was the network topology?
 q What protocols were used? Socket options?
 q What network stack settings were tuned? TCP/UDP tunables?



















App Dev

3. What is .NET Standard and why is it still important?
4. Why can a programmer use different languages, for example, C# and F#, to write applications that run on .NET?
5. What is the name of the entry point method of a .NET console application and how should it be declared?
6. What is a top-level program and how do you access any command-line arguments?
7. What do you type at the prompt to build and execute C# source code?
8. What are some benefits of using .NET Interactive Notebooks to write C# code?
9. Where would you look for help for a C# keyword?
10. Where would you look for solutions to common programming problems?

1. What statement can you type in a C# file to discover the compiler and language version?
2. What are the two types of comments in C#? 
3. What is the difference between a verbatim string and an interpolated string?
4. Why should you be careful when using float and double values?
5. How can you determine how many bytes a type like double uses in memory?
6. When should you use the var keyword?
7. What is the newest way to create an instance of a class like XmlDocument?
8. Why should you be careful when using the dynamic type?
9. How do you right-align a format string?
10. What character separates arguments for a console application? 
What type would you choose for the following "numbers"?
1. A person's telephone number
2. A person's height
3. A person's age
4. A person's salary
5. A book's ISBN
In the Chapter02 solution/workspace, create a console application project named Exercise02 that outputs the number of bytes in memory that each of the following number types uses and the minimum and maximum values they can have: sbyte, byte, short, ushort, int, uint, long, ulong, float, double, and decimal.

1. What happens when you divide an int variable by 0?
2. What happens when you divide a double variable by 0?
3. What happens when you overflow an int variable, that is, set it to a value beyond its range?
4. What is the difference between x = y++; and x = ++y;?
5. What is the difference between break, continue, and return when used inside a loop statement?
6. What are the three parts of a for statement and which of them are required?
7. What is the difference between the = and == operators?
9. What does the underscore _ represent in a switch expression?
10. What interface must an object implement to be enumerated over by using the foreach statement?
Create a console application in Chapter03 named Exercise02 and enter the preceding code. Run the console application and view the output. What happens?
Create a console application in Chapter03 named Exercise03 that outputs a simulated FizzBuzz game counting up to 100.
Create a console application in Chapter03 named Exercise04 that asks the user for two numbers in the range 0-255 and then divides the first number by the second. Write exception handlers to catch any thrown errors, as shown in the following output

1. What does the C# keyword void mean?
2. What are some differences between imperative and functional programming styles?
3. In Visual Studio Code or Visual Studio, what is the difference between pressing F5, Ctrl or Cmd + F5, Shift + F5, and Ctrl or Cmd + Shift + F5?
4. Where does the Trace.WriteLine method write its output to?
5. What are the five trace levels?
6. What is the difference between the Debug and Trace classes?
7. When writing a unit test, what are the three "A"s?
8. When writing a unit test using xUnit, what attribute must you decorate the test methods with?
9. What dotnet command executes xUnit tests?
10. What statement should you use to rethrow a caught exception named ex without losing the stack trace?
Create a workspace/solution named PrimeFactors to contain three projects: a class library with a method named PrimeFactors that, when passed an int variable as a parameter, returns a string showing its prime factors; a unit tests project; and a console application to use it. Use the debugging tools and write unit tests to ensure that your function works correctly with multiple inputs and returns the correct output.

1. What are the six combinations of access modifier keywords and what do they do?
2. What is the difference between the static, const, and readonly keywords when applied to a type member?
3. What does a constructor do?
4. Why should you apply the [Flags] attribute to an enum type when you want to store combined values?
5. Why is the partial keyword useful?
6. What is a tuple?
7. What does the record keyword do?
8. What does overloading mean?
9. What is the difference between a field and a property?
10. How do you make a method parameter optional?

1. What is a delegate?
2. What is an event?
3. How are a base class and a derived class related, and how can the derived class access the base class?
4. What is the difference between is and as operators?
5. Which keyword is used to prevent a class from being derived from or a method from being further overridden?
6. Which keyword is used to prevent a class from being instantiated with the new keyword?
7. Which keyword is used to allow a member to be overridden?
8. What's the difference between a destructor and a deconstruct method?
9. What are the signatures of the constructors that all exceptions should have?
10. What is an extension method, and how do you define one?
Explore inheritance hierarchies by following these steps:
1. Add a new console application named Exercise02 to your Chapter06 solution/ workspace.
2. Create a class named Shape with properties named Height, Width, and Area
3. Add three classes that derive from it—Rectangle, Square, and Circle—with any additional members you feel are appropriate and that override and implement the Area property correctly.
4. In Main, add statements to create one instance of each shape, as shown in the following code:

1. What is the difference between a namespace and an assembly?
2. How do you reference another project in a .csproj file?
3. What is the benefit of a tool like ILSpy?
4. Which .NET type does the C# float alias represent?
5. When porting an application from .NET Framework to .NET 6, what tool should you run before porting, and what tool could you run to perform much of the porting work?
6. What is the difference between framework-dependent and self-contained deployments of .NET applications?
7. What is a RID?
8. What is the difference between the dotnet pack and dotnet publish commands?
9. What types of applications written for the .NET Framework can be ported to modern .NET?
10. Can you use packages written for .NET Framework with modern .NET?

1. What is the maximum number of characters that can be stored in a string variable?
2. When and why should you use a SecureString type?
3. When is it appropriate to use a StringBuilder class?
4. When should you use a LinkedList<T> class?
5. When should you use a SortedDictionary<T> class rather than a SortedList<T> class?
6. What is the ISO culture code for Welsh?
7. What is the difference between localization, globalization, and internationalization?
8. In a regular expression, what does $ mean?
9. In a regular expression, how can you represent digits?
10. Why should you not use the official standard for email addresses to create a regular expression to validate a user's email address?
In the Chapter08 solution/workspace, create a class library named Exercise03 that defines extension methods that extend number types such as BigInteger and int with a method named ToWords that returns a string describing the number

1. What is the difference between using the File class and the FileInfo class?
2. What is the difference between the ReadByte method and the Read method of a stream?
3. When would you use the StringReader, TextReader, and StreamReader classes?
4. What does the DeflateStream type do?
5. How many bytes per character does UTF-8 encoding use?
6. What is an object graph?
7. What is the best serialization format to choose for minimizing space requirements?
8. What is the best serialization format to choose for cross-platform compatibility?
9. Why is it bad to use a string value like "\Code\Chapter01" to represent a path, and what should you do instead? 
10. Where can you find information about NuGet packages and their dependencies?
In the Chapter09 solution/workspace, create a console application named Exercise02 that creates a list of shapes, uses serialization to save it to the filesystem using XML, and then deserializes it back

1. What type would you use for the property that represents a table, for example, the Products property of a database context?
2. What type would you use for the property that represents a one-to-many relationship, for example, the Products property of a Category entity?
3. What is the EF Core convention for primary keys?
4. When might you use an annotation attribute in an entity class?
5. Why might you choose the Fluent API in preference to annotation attributes?
6. What does a transaction isolation level of Serializable mean?
7. What does the DbContext.SaveChanges() method return?
8. What is the difference between eager loading and explicit loading?
9. How should you define an EF Core entity class to match the following table?
In the Chapter10 solution/workspace, create a console application named Exercise02 that queries the Northwind database for all the categories and products, and then serializes the data using at least three formats of serialization available to .NET. Which format of serialization uses the least number of bytes?

1. What are the two required parts of LINQ?
2. Which LINQ extension method would you use to return a subset of properties from a type?
3. Which LINQ extension method would you use to filter a sequence?
4. List five LINQ extension methods that perform aggregation.
5. What is the difference between the Select and SelectMany extension methods?
6. What is the difference between IEnumerable<T> and IQueryable<T>? And how do you switch between them?
7. What does the last type parameter T in generic Func delegates like Func<T1, T2, T> represent?
8. What is the benefit of a LINQ extension method that ends with OrDefault?
9. Why is query comprehension syntax optional?
10. How can you create your own LINQ extension methods?
In the Chapter11 solution/workspace, create a console application, named Exercise02, that prompts the user for a city and then lists the company names for Northwind customers in that city, as shown in the following output. Then, enhance the application by displaying a list of all unique cities that customers already reside in as a prompt to the user before they enter their preferred city, as shown in the following output:

1. What information can you find out about a process?
2. How accurate is the Stopwatch class?
3. By convention, what suffix should be applied to a method that returns Task or Task<T>?
4. To use the await keyword inside a method, what keyword must be applied to the method declaration?
5. How do you create a child task?
6. Why should you avoid the lock keyword?
7. When should you use the Interlocked class?
8. When should you use the Mutex class instead of the Monitor class?
9. What is the benefit of using async and await in a website or web service?
10. Can you cancel a task? If so, how?

1. .NET 6 is cross-platform. Windows Forms and WPF apps can run on .NET 6. Can those apps therefore run on macOS and Linux?
2. How does a Windows Forms app define its user interface, and why is this a potential problem?
3. How can a WPF or UWP app define its user interface, and why is this good for developers?

1. List six method names that can be specific in an HTTP request.
2. List six status codes and their descriptions that can be returned in an HTTP response.
3. In ASP.NET Core, what is the Startup class used for?
4. What does the acronym HSTS stand for and what does it do?
5. How do you enable static HTML pages for a website?
6. How do you mix C# code into the middle of HTML to create a dynamic page?
7. How can you define shared layouts for Razor Pages?
8. How can you separate the markup from the code-behind in a Razor Page?
9. How do you configure an Entity Framework Core data context for use with an ASP.NET Core website?
10. How can you reuse Razor Pages with ASP.NET Core 2.2 or later?
Add a Razor Page to the Northwind.Web website that enables the user to see a list of customers grouped by country. When the user clicks on a customer record, they then see a page showing the full contact details of that customer, and a list of their orders.
Reimplement some of the console apps from earlier chapters as Razor Pages, for example, from Chapter 4, Writing, Debugging, and Testing Functions, provide a web user interface to output times tables, calculate tax, and generate factorials and the Fibonacci sequence.

1. What do the files with the special names _ViewStart and _ViewImports do when created in the Views folder?
2. What are the names of the three segments defined in the default ASP.NET Core MVC route, what do they represent, and which are optional?
3. What does the default model binder do, and what data types can it handle?
4. In a shared layout file like _Layout.cshtml, how do you output the content of the current view?
5. In a shared layout file like _Layout.cshtml, how do you output a section that the current view can supply content for, and how does the view supply the contents for that section?
6. When calling the View method inside a controller's action method, what paths are searched for the view by convention?
7. How can you instruct the visitor's browser to cache the response for 24 hours?
8. Why might you enable Razor Pages even if you are not creating any yourself?
9. How does ASP.NET Core MVC identify classes that can act as controllers?
10. In what ways does ASP.NET Core MVC make it easier to test a website?
The Northwind.Mvc project has a home page that shows categories, but when the View button is clicked, the website returns a 404 Not Found error, for example, for the following URL: https://localhost:5001/category/1 Extend the Northwind.Mvc project by adding the ability to show a detail page for a category.
Controllers are where the business logic of your website runs, so it is important to test the correctness of that logic using unit tests, as you learned in Chapter 4, Writing, Debugging, and Testing Functions. Write some unit tests for HomeController.

1. Which class should you inherit from to create a controller class for an ASP.NET Core Web API service?
2. If you decorate your controller class with the [ApiController] attribute to get default behavior like automatic 400 responses for invalid models, what else must you do?
3. What must you do to specify which controller action method will be executed in response to an HTTP request?
4. What must you do to specify what responses should be expected when calling an action method?
5. List three methods that can be called to return responses with different status codes.
6. List four ways that you can test a web service.
7. Why should you not wrap your use of HttpClient in a using statement to dispose of it when you are finished even though it implements the IDisposable interface, and what should you use instead?
8. What does the acronym CORS stand for and why is it important to enable it in a web service?
9. How can you enable clients to detect if your web service is healthy with ASP. NET Core 2.2 and later?
10. What benefits does endpoint routing provide?
Extend the Northwind.Mvc website project to have pages where a visitor can fill in a form to create a new customer, or search for a customer and then delete them. The MVC controller should make calls to the Northwind web service to create and delete customers.

1. What are the two primary hosting models for Blazor, and how are they different?
2. In a Blazor Server website project, compared to an ASP.NET Core MVC website project, what extra configuration is required in the Startup class?
3. One of the benefits of Blazor is being able to implement client-side components using C# and .NET instead of JavaScript. Does a Blazor component need any JavaScript?
4. In a Blazor project, what does the App.razor file do?
5. What is a benefit of using the <NavLink> component?
6. How can you pass a value into a component?
7. What is a benefit of using the <EditForm> component?
8. How can you execute some statements when parameters are set?
9. How can you execute some statements when a component appears?
10. What are two key differences in the Program class between a Blazor Server and Blazor WebAssembly project?
Create a component that renders a times table based on a parameter named Number and then test your component in two ways. First, by adding an instance of your component to the Index.razor file, as shown in the following markup
Add an action method to the CustomersController class to return a list of country names.






























Sysadmin

1.1 Verify on your system that the directories dot and dot-dot are not the same, except in the root directory.
1.2 In the output from the program in Figure 1.6, what happened to the processes with process IDs 852 and 853?
1.3 In Section 1.7, the argument to perror is defined with the ISO C attribute const, whereas the integer argument to strerror isn’t defined with this attribute. Why?
1.4 If the calendar time is stored as a signed 32-bit integer, in which year will it overflow? How can we extend the overflow point? Are these strategies compatible with existing applications?
1.5 If the process time is stored as a signed 32-bit integer, and if the system counts 100 ticks per second, after how many days will the value overflow?

2.2 Examine your system’s headers and list the actual data types used to implement the primitive system data types.
2.3 Update the program in Figure 2.17 to avoid the needless processing that occurs when sysconf returns LONG_MAX as the limit for OPEN_MAX.

3.1 When reading or writing a disk file, are the functions described in this chapter really unbuffered? Explain.
3.2 Write your own dup2 function that behaves the same way as the dup2 function described in Section 3.12, without calling the fcntl function
Draw the resulting picture, similar to Figure 3.9. Which descriptors are affected by an fcntl on fd1 with a command of F_SETFD? Which descriptors are affected by an fcntl on fd1 with a command of F_SETFL?
3.6 If you open a file for read–write with the append flag, can you still read from anywhere in the file using lseek? Can you use lseek to replace existing data in the file? Write a program to verify this.

4.1 Modify the program in Figure 4.3 to use stat instead of lstat. What changes if one of the command-line arguments is a symbolic link?
4.2 What happens if the file mode creation mask is set to 777 (octal)? Verify the results using your shell’s umask command.
4.3 Verify that turning off user-read permission for a file that you own denies your access to the file.
4.4 Run the program in Figure 4.9 after creating the files foo and bar. What happens?
4.6 Write a utility like cp(1) that copies a file containing holes, without writing the bytes of 0 to the output file.
4.8 When running the program in Figure 4.16, we check the available disk space with the df(1) command. Why didn’t we use the du(1) command?
4.9 In Figure 4.20, we show the unlink function as modifying the changed-status time of the file itself. How can this happen?
4.10 In Section 4.22, how does the system’s limit on the number of open files affect the myftw function?
Modify this routine so that each time it encounters a directory, it uses the chdir function to change to that directory, allowing it to use the filename and not the pathname for each call to lstat.
4.13 How can you set only one of the two time values with the utimes function?
4.14 Some versions of the finger(1) command output ‘‘New mail received ...’’ and ‘‘unread since ...’’ where ... are the corresponding times and dates. How can the program determine these two times and dates?
Examine the archive formats used by the cpio(1) and tar(1) commands. (These descriptions are usually found in Section 5 of the UNIX Programmer ’s Manual.) How many of the three possible time values are saved for each file? When a file is restored, what value do you think the access time is set to, and why?
4.16 Does the UNIX System have a fundamental limitation on the depth of a directory tree? To find out, write a program that creates a directory and then changes to that directory, in a loop
For any user to be able to access these files, their permissions must be rw-rw-rw-. Some programs that create an output file delete the file first, in case it already exists, ignoring the return code

5.1 Implement setbuf using setvbuf.
5.2 Type in the program that copies a file using line-at-a-time I/O (fgets and fputs) from Figure 5.5, but use a MAXLINE of 4. What happens if you copy lines that exceed this length? Explain what is happening.
5.3 What does a return value of 0 from printf mean?
5.5 How would you use the fsync function (Section 3.13) with a standard I/O stream?
5.6 In the programs in Figures 1.7 and 1.10, the prompt that is printed does not contain a newline, and we don’t call fflush. What causes the prompt to be output?
5.7 BSD-based systems provide a function called funopen that allows us to intercept read, write, seek, and close calls on a stream. Use this function to implement fmemopen for FreeBSD and Mac OS X.

6.1 If the system uses a shadow file and we need to obtain the encrypted password, how do we do so?
6.2 If you have superuser access and your system uses shadow passwords, implement the previous exercise.
6.3 Write a program that calls uname and prints all the fields in the utsname structure. Compare the output to the output from the uname(1) command.
6.4 Calculate the latest time that can be represented by the time_t data type. After it wraps around, what happens?
6.5 Write a program to obtain the current time and print it using strftime, so that it looks like the default output from date(1). Set the TZ environment variable to different values and see what happens

7.2 When is the output from the printfs in Figure 7.3 actually output?
7.3 Is there any way for a function that is called by main to examine the command-line arguments without (a) passing argc and argv as arguments from main to the function or (b) having main copy argc and argv into global variables?
7.4 Some UNIX system implementations purposely arrange that, when a program is executed, location 0 in the data segment is not accessible. Why?
7.5 Use the typedef facility of C to define a new data type Exitfunc for an exit handler. Redo the prototype for atexit using this data type.
7.6 If we allocate an array of longs using calloc, is the array initialized to 0? If we allocate an array of pointers using calloc, is the array initialized to null pointers?
7.7 In the output from the size command at the end of Section 7.6, why aren’t any sizes given for the heap and the stack?
7.8 In Section 7.7, the two file sizes (879443 and 8378) don’t equal the sums of their respective text and data sizes. Why?
7.9 In Section 7.7, why does the size of the executable file differ so dramatically when we use shared libraries for such a trivial program?

Modify the program to check whether your implementation behaves this way. If it does not, how can you simulate this behavior?
Because the stack frames corresponding to each function call are usually stored in the stack, and because after a vfork the child runs in the address space of the parent, what happens if the call to vfork is from a function other than main and the child does a return from this function after the vfork? Write a test program to verify this, and draw a picture of what’s happening.
Rewrite the program in Figure 8.6 to use waitid instead of wait. Instead of calling pr_exit, determine the equivalent information from the siginfo structure.
In the program shown in Figure 8.20, we call execl, specifying the pathname of the interpreter file. If we called execlp instead, specifying a filename of testinterp, and if the directory /home/sar/bin was a path prefix, what would be printed as argv[2] when the program is run?
8.6 Write a program that creates a zombie, and then call system to execute the ps(1) command to verify that the process is a zombie.
8.7 We mentioned in Section 8.10 that POSIX.1 requires open directory streams to be closed across an exec. Verify this as follows: call opendir for the root directory, peek at your system’s implementation of the DIR structure, and print the close-on-exec flag. Then open the same directory for reading, and print the close-on-exec flag.

9.1 Refer back to our discussion of the utmp and wtmp files in Section 6.8. Why are the logout records written by the init process? Is this handled the same way for a network login?
9.2 Write a small program that calls fork and has the child create a new session. Verify that the child becomes a process group leader and that the child no longer has a controlling terminal.

10.1 In Figure 10.2, remove the for (;;) statement. What happens and why?
10.2 Implement the sig2str function described in Section 10.22.
10.3 Draw pictures of the stack frames when we run the program from Figure 10.9.
10.6 Write the following program to test the parent–child synchronization functions in Figure 10.24. The process creates a file and writes the integer 0 to the file. The process then calls fork, and the parent and child alternate incrementing the counter in the file. 
10.8 Why do you think the siginfo structure (Section 10.14) includes the real user ID, instead of the effective user ID, in the si_uid field?
10.9 Rewrite the function in Figure 10.14 to handle all the signals from Figure 10.1. The function should consist of a single loop that iterates once for every signal in the current signal mask (not once for every possible signal).
10.10 Write a program that calls sleep(60) in an infinite loop
10.11 Modify Figure 3.5 as follows: (a) change BUFFSIZE to 100; (b) catch the SIGXFSZ signal using the signal_intr function, printing a message when it’s caught, and returning from the signal handler; and (c) print the return value from write if the requested number of bytes wasn’t written. Modify the soft RLIMIT_FSIZE resource limit (Section 7.11) to 1,024 bytes and run your new program, copying a file that is larger than 1,024 bytes.
Write a program that calls fwrite with a large buffer (about one gigabyte). Before calling fwrite, call alarm to schedule a signal in 1 second. In your signal handler, print that the signal was caught and return. Does the call to fwrite complete? What’s happening?

11.1 Modify the example code shown in Figure 11.4 to pass the structure between the threads properly.
11.2 In the example code shown in Figure 11.14, what additional synchronization (if any) is necessary to allow the master thread to change the thread ID associated with a pending job? How would this affect the job_remove function?
11.3 Apply the techniques shown in Figure 11.15 to the worker thread example (Figures 11.1 and 11.14) to implement the worker thread function.
Which sequence of steps is correct?
1. Lock a mutex (pthread_mutex_lock).
2. Change the condition protected by the mutex.
3. Signal threads waiting on the condition (pthread_cond_broadcast).
4. Unlock the mutex (pthread_mutex_unlock).
What synchronization primitives would you need to implement a barrier? Provide an implementation of the pthread_barrier_wait function.

12.1 Run the program in Figure 12.17 on a Linux system, but redirect the output into a file. Explain the results.
12.2 Implement putenv_r,areentrant version of putenv. Make sure that your implementation is async-signal safe as well as thread-safe.
12.3 Can you make the getenv function shown in Figure 12.13 async-signal safe by blocking signals at the beginning of the function and restoring the previous signal mask before returning? Explain.
12.4 Write a program to exercise the version of getenv from Figure 12.13. Compile and run the program on FreeBSD. What happens? Explain.
12.5 Given that you can create multiple threads to perform different tasks within a program, explain why you might still need to use fork.
12.6 Reimplement the program in Figure 10.29 to make it thread-safe without using nanosleep or clock_nanosleep.
12.7 After calling fork, could we safely reinitialize a condition variable in the child process by first destroying the condition variable with pthread_cond_destroy and then initializing it with pthread_cond_init?
12.8 The timeout function in Figure 12.8 can be simplified substantially. Explain how.

What happens if the user process (the daemon) calls chroot before calling openlog?
13.2 Recall the sample ps output from Section 13.2. The only user-level daemon that isn’t a session leader is the rsyslogd process. Explain why the syslogd daemon isn’t a session leader.
13.3 List all the daemons active on your system, and identify the function of each one.
13.4 Write a program that calls the daemonize function in Figure 13.1. After calling this function, call getlogin (Section 8.15) to see whether the process has a login name now that it has become a daemon. Print the results to a file.

14.1 Write a test program that illustrates your system’s behavior when a process is blocked while trying to write lock a range of a file and additional read-lock requests are made. Is the process requesting a write lock starved by the processes read locking the file?
14.2 Take a look at your system’s headers and examine the implementation of select and the four FD_ macros.
14.4 Compare the functions provided for signal sets (Section 10.11) and the fd_set descriptor sets. Also compare the implementation of the two on your system.
14.5 Implement the function sleep_us, which is similar to sleep, but waits for a specified number of microseconds. Use either select or poll. Compare this function to the BSD usleep function.
14.6 Can you implement the functions TELL_WAIT, TELL_PARENT, TELL_CHILD, WAIT_PARENT, and WAIT_CHILD from Figure 10.24 using advisory record locking instead of signals? If so, code and test your implementation.
14.7 Determine the capacity of a pipe using nonblocking writes. Compare this value with the value of PIPE_BUF from Chapter 2.
14.8 Rewrite the program in Figure 14.21 to make it a filter: read from the standard input and write to the standard output, but use the asynchronous I/O interfaces
14.9 Recall Figure 14.23. Determine the break-even point on your system where using writev is faster than copying the data yourself and using a single write.
14.10 Run the program in Figure 14.27 to copy a file and determine whether the last-access time for the input file is updated.
14.11 In the program from Figure 14.27, close the input file after calling mmap to verify that closing the descriptor does not invalidate the memory-mapped I/O.

15.1 In the program shown in Figure 15.6, remove the close right before the waitpid at the end of the parent code. Explain what happens.
15.2 In the program in Figure 15.6, remove the waitpid at the end of the parent code. Explain what happens.
15.3 What happens if the argument to popen is a nonexistent command? Write a small program to test this.
15.4 In the program shown in Figure 15.18, remove the signal handler, execute the program, and then terminate the child. After entering a line of input, how can you tell that the parent was terminated by SIGPIPE?
15.5 In the program in Figure 15.18, use the standard I/O library for reading and writing the pipes instead of read and write.
15.8 What happens if the cmdstring executed by popen with a type of "r" writes to its standard error?
15.9 Since popen invokes a shell to execute its cmdstring argument, what happens when cmdstring terminates? (Hint: Draw all the processes involved.)
15.10 POSIX.1 specifically states that opening a FIFO for read–write is undefined. Although most UNIX systems allow this, show another method for opening a FIFO for both reading and writing, without blocking.
15.12 Write a program that does the following. Execute a loop five times: create a message queue, print the queue identifier, delete the message queue. Then execute the next loop five times: create a message queue with a key of IPC_PRIVATE, and place a message on the queue. After the program terminates, look at the message queues using ipcs(1). Explain what is happening with the queue identifiers.
15.13 Describe how to build a linked list of data objects in a shared memory segment. What would you store as the list pointers?
15.14 Draw a timeline of the program in Figure 15.33 showing the value of the variable i in both the parent and child, the value of the long integer in the shared memory region, and the value returned by the update function. 
15.15 Redo the program in Figure 15.33 using the XSI shared memory functions from Section 15.9 instead of the shared memory-mapped region.
15.16 Redo the program in Figure 15.33 using the XSI semaphore functions from Section 15.8 to alternate between the parent and the child.
15.17 Redo the program in Figure 15.33 using advisory record locking to alternate between the parent and the child.
15.18 Redo the program in Figure 15.33 using the POSIX semaphore functions from Section 15.10 to alternate between the parent and the child.

16.1 Write a program to determine your system’s byte ordering.
16.2 Write a program to print out which stat structure members are supported for sockets on at least two different platforms, and describe how the results differ.
16.3 The program in Figure 16.17 provides service on only a single endpoint. Modify the program to support service on multiple endpoints (each with a different address) at the same time.
16.4 Write a client program and a server program to return the number of processes currently running on a specified host computer.
16.5 In the program in Figure 16.18, the server waits for the child to execute the uptime command and exit before accepting the next connect request. Redesign the server so that the time to service one request doesn’t delay the processing of incoming connect requests.
16.6 Write two library routines: one to enable asynchronous (signal-based) I/O on a socket and one to disable asynchronous I/O on a socket. Use Figure 16.23 to make sure that the functions work on all platforms with as many socket types as possible.


17.2 Write the following program using the file descriptor passing functions from this chapter and the parent–child synchronization routines from Section 8.9. The program calls fork, and the child opens an existing file and passes the open descriptor to the parent. 
17.3 In Figures 17.20 and 17.21, we differentiated between declaring and defining the global variables. What is the difference?
17.4 Recode the buf_args function (Figure 17.23), removing the compile-time limit on the size of the argv array. Use dynamic memory allocation.
17.5 Describe ways to optimize the function loop in Figure 17.29 and Figure 17.30. Implement your optimizations.
17.7 Describe two possible ways to pass more than one file descriptor with a single call to sendmsg. Try them out to see if they are supported by your operating system.

18.1 Write a program that calls tty_raw and terminates (without resetting the terminal mode). If your system provides the reset(1) command (all four systems described in this text do), use it to restore the terminal mode.
18.2 The PARODD flag in the c_cflag field allows us to specify even or odd parity. The BSD tip program, however, also allows the parity bit to be 0 or 1. How does it do this?
Log in to the system twice and start the vi editor from one login. Use the stty command from your other login to determine which values vi sets MIN and TIME to (since vi sets the terminal to noncanonical mode).

19.1 When we remotely log in to a BSD system using either telnet or rlogin, the ownership of the PTY slave and its permissions are set, as we described in Section 19.3. How does this happen?
19.2 Use the pty program to determine the values used by your system to initialize a slave PTY’s termios structure and winsize structure.
19.3 Recode the loop function (Figure 19.12) as a single process using either select or poll.
19.4 In the child process after pty_fork returns, standard input, standard output, and standard error are all open for read–write. Can you change standard input to be read-only and the other two to be write-only?
19.5 In Figure 19.13, identify which process groups are in the foreground and which are in the background, and identify the session leaders.
19.6 In Figure 19.13, in what order do the processes terminate when we type the end-of-file character? Verify this with process accounting, if possible.
19.7 The script(1) program normally adds to the beginning of the output file a line with the\ starting time, and to the end of the output file another line with the ending time. Add these features to the simple shell script that we showed.
Write a program that calls pty_fork and have the child exec another program that you will write. The new program that the child execs must catch SIGTERM and SIGWINCH.

describe how db_nextrec could return the correct key but an all-blank (hence incorrect) data record. (Hint: Look at _db_dodelete.)
20.4 How would you integrate the fsync function into this database library?
20.5 In db_store, we write the data record before the index record. What happens if you do it in the opposite order?
20.6 Create a new database and write some number of records to the database. Write a program that calls db_nextrec to read each record in the database, and call _db_hash to calculate the hash value for each record. Print a histogram of the number of records on each hash chain. Is the hashing function in _db_hash adequate?
20.7 Modify the database functions so that the number of hash chains in the index file can be specified when the database is created.
20.8 Compare the performance of the database functions when the database is (a) on the same host as the test program and (b) on a different host accessed via NFS. Does the record locking provided by the database library still work?
Modify the database to allow larger buffer sizes on the free list to satisfy the request. How do you have to change the persistent format of the database to support this feature?
20.10 After implementing a solution to Exercise 20.9, write a tool to convert one database format to the other.

21.1 Translate the IPP error code values listed in ipp.h into error messages. Then modify the print spooler daemon to log a message at the end of the printer_status function when the IPP header indicates a printer error.
21.2 Add support to the print command and the printd daemon to allow users to request double-sided printing. Do the same for landscape and portrait page orientation.
21.3 Modify the print spooler daemon so that when it starts, it contacts the printer to find out which features are supported by the printer so that the daemon doesn’t request an option that isn’t supported.
21.4 Write a command to report on the status of pending print jobs.
21.5 Write a command to cancel a pending print job. Use the job ID as the argument to the command to specify which job to cancel. How can you prevent one user from canceling another user’s print jobs?
21.6 Add support for multiple printers to the printer spooler. Include a way to move print jobs from one printer to another.
21.7 In the printer daemon, explain why we don’t need to prod the printer thread when the signal handling thread catches SIGHUP and sets reread to 1.
















1. What is WIP?
2. How does a ticket system improve our ability to track WIP?
3. How does Kanban work?
4. Compare and contrast a ticket system and Kanban.
5. How do you track WIP in your environment? What do you like or dislike about
it? What you would like to improve?
6. In your organization, how do you ensure that SAs follow through on requests?
7. In your organization, if a piece of WIP has been ignored or progress has stalled,
will this be noticed? If not, how could you fix this?
8. Why is it important to automate OS installation?
9. List the operating systems supported in your environment in order of popularity. Which automation is used to install each? Of those that aren’t automated,
which would benefit the most from it?
10. For an OS that does not have an automated installation process, which product
is available that will automate it?
11. What’s the biggest time sinkhole in your environment? Name two ways to
eliminate it.
12. What’s the biggest bottleneck in your environment? What can be done to
optimize or eliminate it?

1. What is the small batches principle?
2. Why are big batches more risky than small batches?
3. Why is it better to push a new software release into production monthly rather
than every six months?
4. Pick a number of software projects you are or have been involved in. How frequently were new releases issued? Compare and contrast the projects’ ability
to address bugs and ship new features.
5. Is it better to fail over or take down a perfectly running system than to wait
until it fails on its own?
Exercises 35
6. What is the difference between behavior and process?
7. Why is it better to have a small improvement now than a large improvement
a year from now?
8. Describe the minimum viable product (MVP) strategy. What are the benefits
of it versus a larger, multi-year project plan?
9. List a number of risky behaviors that cannot be improved through practice.
Why are they inherently risky?
10. Which big-batch releases happen in your environment? Describe them
in detail.
11. Pick a project that you are involved in. How could it be restructured so that
people benefit immediately instead of waiting for the entire project to be
complete?

1. Explain the pets and cattle analogy for computers.
2. What is a snowflake server? Why are they a bad idea?
3. If a snowflake server is risky, how can we reduce risk through repetition?
4. How do cattle-like systems help us be more efficient?
5. How do cattle-like systems help us scale services?
6. According to this chapter, why do banks have lousy interest rates?
7. A laptop and a desktop PC are very different. In what way could we treat them
both as cattle of the same herd?
8. What is state? What is irreproducible state?
9. Why is isolating state to particular machines a good thing?
10. How can beta and production environments end up being different? How can
we make them as similar as possible?
11. How is mass-production aided by moving variations to the end?
12. Sometimes bad customer service is described as being treated like cattle. Yet,
some of the best companies have practices that assure that everyone receives
extremely high-quality service in an efficient and mass-produced way. These
companies are also managing people like cattle. How are the latter companies
able to achieve this without offending their customers?
13. Pick a service in your organization that stores a lot of state. Describe how it
could be implemented using an architecture that isolates state.
14. What are the benefits of moving variations to the end of the process?
15. Pick a process in your organization that has a lot of variation. How can it
be restructured to move the variation to the end? What benefits would be
achieved by doing this?

1. What is meant by infrastructure as code (IaC)?
2. What are the benefits of automation over doing system administration work
manually?
3. What are the benefits of IaC?
4. Why is it important to know the history of changes to a system?
5. What is meant by software being parameterized or parameterizable? How
does this make software more reusable?
6. What are some key software engineering principles or techniques that have
been adopted by system administrators to create IaC?
7. What are the principles of IaC?
8. What are immutable elements? How are they used?
9. What is idempotency? Why are most CM systems idempotent?
10. How do configuration management systems differ from other software that
system administrators use to control our systems?
11. Which, if any, IaC systems are in use in your environment?
12. Describe a strategy to introduce, or increase the use of, IaC in your current
environment?
13. What is a declarative language? How is it different from an imperative
language?
14. Suppose you are going to cook dinner. You have no ingredients, so you must
buy them. Then you must mix and cook them. Finally, you serve the food at
a dinner table. Suppose the world was controlled by computers. How would
you write a program to make dinner using an imaginary imperative language,
and then in an imaginary declarative language?
15. Learn the basics of Puppet, Chef, or some other CM system. Use it to configure
a simple web server.

































































RTOS

1. Does a system with real-time requirements always need to be extremely fast?
2. Is an RTOS always required for real-time systems?
3. Is firmware the only way to satisfy real-time requirements?
4. What is a real-time system?
5. Name 3–4 types of real-time systems.
6. When is it appropriate to use an RTOS to meet real-time requirements?

1. What is a super loop? An infinite while loop A loop that oversees all function calls in an embedded system Both of the preceding options
2. RTOS tasks should always be preferred over super loops. True False
3. Name a drawback to complex super loops.
4. How can the responsiveness of a super loop-based application be improved?
5. List two ways in which super loops differ from RTOS tasks.
6. What features do RTOS tasks possess to help ensure that the most time-critical task gets CPU time before less time-critical tasks? Time slicing Prioritization Round-robin scheduling
7. What type of scheduler attempts to execute the most critical tasks before less critical tasks?

1. Which RTOS primitive is most commonly used for sending and receiving databetween tasks?
2. Is it possible for a queue to interact with more than two tasks?
3. Which RTOS primitive is commonly used for signaling and synchronizing tasks?
4. What is an example of when a counting semaphore could be used?
5. Name one major difference between binary semaphores and mutexes.
6. When protecting a resource shared between tasks, should a binary semaphore or a mutex be used?
7. What is priority inversion and why is it dangerous for a real-time system?

1. Why is it important for firmware engineers to be knowledgeable about the MCU they are programming on?
2. When selecting an MCU for performance, clock speed is the only factor at play:
True
False
3. Today's MCUs contain many different pieces of hardware in addition to the CPU. What is the general name given to these pieces of hardware?
Batteries
Hardware peripherals
Bugs
4. Name one advantage of using a platform approach for development.
5. Name one advantage of using a fully featured evaluation board for development.
6. Name two significant device characteristics when designing low-power applications.
7. Why was an inexpensive development board chosen for this book?

1. There is one IDE that is best for each MCU/language combination:
True
False
2. Paid IDEs are a must for professional-grade work:
True
False
3. Vendor-supplied IDEs are always the best IDEs to use for that vendor's hardware:
True
False
4. Software-generated code is always better than human-crafted code:
True
False
5. The IDE selected in this book was chosen because it has the best long-term availability and widest device compatibility:
True
False
6. Name three stages of development where STMCubeMX is helpful.

1. J-Link hardware must be purchased to use the tools in this book.
True
False
2. The only way to evaluate the effectiveness of a real-time system is to wait and see whether something breaks because a deadline was missed.
True
False
3. Since RTOSes have one stack per task, they are impossible to debug using a debugger since only the main system stack is visible.
True
False




























Verilog

An interconnect switch (IS) contains the following components, a shared memory (MEM), a system controller (SC) and a data crossbar (Xbar). 
Define the modules MEM, SC, and Xbar, using the module/endmodule keywords.
Define the module IS, using the module/endmodule keywords. Instantiate the modules MEM, SC, Xbar and call the instances mem1, sc1, and xbar1, respectively
Define a stimulus block (Top), using the module/endmodule keywords. Instantiate the design block IS and call the instance is1.
A 4-bit ripple carry adder (Ripple_Add) contains four 1-bit full adders (FA).
a. Define the module FA. Do not define the internals or the terminal list.
b. Define the module Ripple_Add. Do not define the internals or the terminal list. Instantiate four full adders of the type FA in the module Ripple_Add and call them fa0, fa1, fa2, and fa3. 

Practice writing the following numbers:
a. Decimal number 123 as a sized 8-bit number in binary. Use _ for readability.
b. A 16-bit hexadecimal unknown number with all x's.
c. A 4-bit negative 2 in decimal . Write the 2's complement form for this number.
d. An unsized hex number 1234. 
Are these legal identifiers?
a. system1
b. 1reg
c. $latch
d. exec$ 
Declare the following variables in Verilog: 
a. An 8-bit vector net called a_in.
b. A 32-bit storage register called address. Bit 31 must be the most significant bit. Set the value of the register to a 32-bit decimal number equal to 3.
c. An integer called count.
d. A time variable called snap_shot.
e. An array called delays. Array contains 20 elements of the type integer.
f. A memory MEM containing 256 words of 64 bits each.
g. A parameter cache_size equal to 512. 
What would be the output/effect of the following statements?
a. latch = 4'd12; $display("The current value of latch = %b\n", latch);
b. in_reg = 3'd2; $monitor($time, " In register value = %b\n", in_reg[2:0]);
c. `define MEM_SIZE 1024 $display("The maximum memory size is %h", 'MEM_SIZE);

1: What are the basic components of a module? Which components are mandatory?
2: Does a module that does not interact with its environment have any I/O ports? Does it have a port list in the module definition?
3: A 4-bit parallel shift register has I/O pins as shown in the figure below. Write the module definition for this module shift_reg. Include the list of ports and port declarations.
4: Declare a top-level module stimulus. Define REG_IN (4 bit) and CLK (1 bit) as reg register variables and REG_OUT (4 bit) as wire. Instantiate the module shift_reg and call it sr1. Connect the ports by ordered list.
5: Connect the ports in Step 4 by name.
6: Write the hierarchical names for variables REG_IN, CLK, and REG_OUT.
7: Write the hierarchical name for the instance sr1. Write the hierarchical names for its ports clock and reg_in. 

1: Create your own 2-input Verilog gates called my-or, my-and and my-not from 2-input nand gates. Check the functionality of these gates with a stimulus module.
2: A 2-input xor gate can be built from my_and, my_or and my_not gates. Construct an xor module in Verilog that realizes the logic function, z = xy' + x'y. Inputs are x and y, and z is the output. Write a stimulus module that exercises all four combinations of x and y inputs. 
Assuming a, b, c_in are the inputs and sum and c_out are the outputs, design a logic circuit to implement the 1-bit full adder, using only and, not, and or gates. Write the Verilog description for the circuit. Write the stimulus for the full adder and check the functionality for all input combinations. 
Write the Verilog description for the RS latch. Write the stimulus module for the RS latch, using the following table, and verify the outputs. 
Design a 2-to-1 multiplexer using bufif0 and bufif1 gates 

Write the full Verilog description for the full subtractor module, including I/O ports (Remember that + in logic equations corresponds to a logical or operator (||) in dataflow). Instantiate the subtractor inside a stimulus block and test all eight possible combinations of x, y, and z given in the following truth table. 
Write the Verilog description of the module magnitude_comparator. Instantiate the magnitude comparator inside the stimulus module and try out a few combinations of A and B.
Write the dataflow description for the synchronous counter. Write a stimulus file that exercises clear and count_enable. Display the output count Q[3:0]

Declare a register called oscillate. Initialize it to 0 and make it toggle every 30 time units.
Design a clock with time period = 40 and a duty cycle of 25% by using the always and initial statements.
Given below is an initial block with blocking procedural assignments. At what simulation time is each statement executed? What are the intermediate and final values of a, b, c, d? 
What is the order of execution of statements in the following Verilog code? Is there any ambiguity in the order of execution? What are the final values of a, b, c, d? 
7: Design a negative edge-triggered D-flipflop (D_FF) with synchronous clear, active high (D_FF clears only at a negative edge of clock when clear is high). Use behavioral statements only. (Hint: Output q of D_FF must be declared as reg). Design a clock with a period of 10 units and test the D_FF.
8: Design the D-flipflop in exercise 7 with asynchronous clear (D_FF clears whenever clear goes high. It does not wait for next negative edge). Test the D_FF.
9: Using the wait statement, design a level-sensitive latch that takes clock and d as inputs and q as output. q = d whenever clock = 1.
10: Design the 4-to-1 multiplexer in Example 7-19 by using if and else statements. The port interface must remain the same.
11: Design the traffic signal controller discussed in this chapter by using if and else statements.
12: Using a case statement, design an 8-function ALU that takes 4-bit inputs a and b and a 3-bit input signal select, and gives a 5-bit output out
13: Using a while loop, design a clock generator. Initial value of clock is 0. Time period for the clock is 10.
14: Using the for loop, initialize locations 0 to 1023 of a 4-bit register array cache_var to 0.
15: Using a forever statement, design a clock with time period = 10 and duty cycle = 40%. Initial value of clock is 0.
16: Using the repeat loop, delay the statement a = a + 1 by 20 positive edges of clock.
17: Below is a block with nested sequential and parallel blocks. When does the block finish and what is the order of execution of events? At what simulation times does each statement finish execution? 
18: Design an 8-bit counter by using a forever loop, named block, and disabling of named block

Define a function to calculate the factorial of a 4-bit number.
Define a function to design an 8-function ALU that takes two 4-bit numbers a and b and computes a 5-bit result out based on a 3-bit select signal. Ignore overflow or underflow bits.
Define a task to compute even parity of a 16-bit number. The result is a 1-bit value that is assigned to the output after three positive edges of clock
Using named events, tasks, and functions, design the traffic signal controller

1: Using assign and deassign statements, design a positive edge-triggered Dflipflop with asynchronous clear (q=0) and preset (q=1).
2: Using primitive gates, design a 1-bit full adder FA. Instantiate the full adder inside a stimulus module. Force the sum output to a & b & c_in for the time between 15 and 35 units. 
a. Build the fulladd4 module with defparam statements to change instance parameter values. Simulate the 4-bit full adder using the stimulus shown in Example 5-9 on page 77. Explain the effect of the full adder delays on the times when outputs of the adder appear. (Use delays of 20 instead of 5 used in this stimulus.)
b. Build the fulladd4 with delay values passed to instances fa0, fa1, fa2, and fa3 during instantiation. Resimulate the 4-bit adder, using the stimulus above. Check if the results are identical. 
4: Create a design that uses the full adder example above. Use a conditional compilation (`ifdef). Compile the fulladd4 with defparam statements if the text macro DPARAM is defined by the `define statement; otherwise, compile the fulladd4 with module instance parameter values. 
Write a stimulus file to do random testing of the full adder. Use a random number generator to generate a 32-bit random number. Pick bits 3:0 and apply them to input a; pick bits 7:4 and apply them to input b. Use bit 8 and apply it to c_in. Apply 20 random test vectors and observe the output. 
Modify the file to read data in hexadecimal. Write a new data file with the following addresses and data values. Unspecified locations are not initialized. 
Write an initial block that controls the VCD file. The initial block must do the following

What type of delay model is used in the following circuit? Write the Verilog description for the module Y
2: Use the largest delay in the module to convert the circuit to a lumped delay model. Using a lumped delay model, write the Verilog description for the module Y.
3: Compute the delays along each path from input to output for the circuit in Exercise 1. Write the Verilog description, using the path delay model. Use specify blocks.
4: Consider the negative edge-triggered with the asynchronous reset D-flipflop shown in the figure below. Write the Verilog description for the module D_FF. Show only the I/O ports and path delay specification. Describe path delays, using parallel connection. 
5: Modify the D-flipflop in Exercise 4 if all path delays are 5 units. Describe the path delays, using full connections to q and qbar. 
Use the D-flipflop in Exercise 4 and write the six-delay specification for all paths, using full connections.
7: In Exercise 4, modify the delay specification for the D-flipflop if the delays are dependent on the value of d as follows
add timing checks for the D-flipflop in the specify block as follows
Describe delay back-annotation. Draw the flow diagram for delay backannotation. 

1: Draw the circuit diagram for an xor gate, using nmos and pmos switches. Write the Verilog description for the circuit. Apply stimulus and test the design.
2: Draw the circuit diagram for and and or gates, using nmos and pmos switches. Write the Verilog description for the circuits. Apply stimulus and test the design.
3: Design the 1-bit full-adder shown below using the xor, and, and or gates built in Exercise 1 and Exercise 2 above. Apply stimulus and test the design. 
4: Design a 4-bit bidirectional bus switch that has two buses, BusA and BusB, on one side and a single bus, BUS, on the other side
5: Instantiate switches with the following delay specifications. Use your own input/output port names. 

Design a 2-to-1 multiplexer by using UDP.
Write the truth table for the boolean function Y = (A & B) | (C ^ D). Define a UDP that implements this boolean function
Define a level-sensitive latch with a preset signal.
Define a positive edge-triggered D-flipflop with clear as a UDP. Signal clear is active low
Define a negative edge-triggered JK flipflop, jk_ff with asynchronous preset and clear as a UDP.
Design the 4-bit synchronous counter shown below

Write a user-defined system task, $get_in_ports, that gets full hierarchical names of only the input ports of a module instance. Link the task into the Verilog simulator. Find the input ports of the 1-bit full adder
Write a user-defined system task, $count_and_gates, which counts the number of and gate primitives in a module instance. Hierarchical module instance name is the input to the task. Use this task to count the number of and gates in the 4- to-1 multiplexer
Create a user-defined system task, $monitor_mod_output, that finds out all the output signals of a module instance and adds them to a monitoring list
Use the 2-to-1 multiplexer in Example 13-1. Add output signals to the monitoring list by using $monitor_mod_output. Check results by applying stimulus

Synthesize the full adder, using a technology library available to you. Optimize for fastest timing. Apply identical stimulus to the RTL and the gate-level netlist and compare the output. 
Write the Verilog RTL description for the full subtractor. Synthesize the full subtractor, using any technology library available to you. Optimize for fastest timing. Apply identical stimulus to the RTL and the gate-level netlist and compare the output. 
Design a 3-to-8 decoder, using a Verilog RTL description. . Synthesize the decoder, using any technology library available to you. Optimize for smallest area. Apply identical stimulus to the RTL and the gate-level netlist and compare the outputs. 
Write the Verilog RTL description for a 4-bit binary counter with synchronous reset that is active high. Synthesize the counter, using any technology library available to you. Optimize for smallest area. Apply identical stimulus to the RTL and the gate-level netlist and compare the outputs. 
Using a synchronous finite state machine approach, design a circuit that takes a single bit stream as an input at the pin in.
































































































































